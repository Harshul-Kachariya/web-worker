"use strict";
var AllComponents = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape2("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState4(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports2.Children = Children;
          exports2.Component = Component;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.act = act;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef;
          exports2.forwardRef = forwardRef;
          exports2.isValidElement = isValidElement;
          exports2.lazy = lazy;
          exports2.memo = memo;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback;
          exports2.useContext = useContext;
          exports2.useDebugValue = useDebugValue;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect4;
          exports2.useId = useId;
          exports2.useImperativeHandle = useImperativeHandle;
          exports2.useInsertionEffect = useInsertionEffect;
          exports2.useLayoutEffect = useLayoutEffect;
          exports2.useMemo = useMemo;
          exports2.useReducer = useReducer;
          exports2.useRef = useRef;
          exports2.useState = useState4;
          exports2.useSyncExternalStore = useSyncExternalStore;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render;
          exports2.unmountComponentAtNode = unmountComponentAtNode;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys = Object.keys(props).filter(function(k) {
                    return k !== "key";
                  });
                  var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx5 = jsxWithValidationDynamic;
          var jsxs4 = jsxWithValidationStatic;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.jsx = jsx5;
          exports2.jsxs = jsxs4;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // (disabled):fs
  var require_fs = __commonJS({
    "(disabled):fs"() {
    }
  });

  // (disabled):node_modules/canvas/browser.js
  var require_browser = __commonJS({
    "(disabled):node_modules/canvas/browser.js"() {
    }
  });

  // (disabled):node_modules/url/url.js
  var require_url = __commonJS({
    "(disabled):node_modules/url/url.js"() {
    }
  });

  // (disabled):http
  var require_http = __commonJS({
    "(disabled):http"() {
    }
  });

  // (disabled):https
  var require_https = __commonJS({
    "(disabled):https"() {
    }
  });

  // (disabled):zlib
  var require_zlib = __commonJS({
    "(disabled):zlib"() {
    }
  });

  // node_modules/pdfjs-dist/build/pdf.js
  var require_pdf = __commonJS({
    "node_modules/pdfjs-dist/build/pdf.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = root.pdfjsLib = factory();
        else if (typeof define === "function" && define.amd)
          define("pdfjs-dist/build/pdf", [], () => {
            return root.pdfjsLib = factory();
          });
        else if (typeof exports === "object")
          exports["pdfjs-dist/build/pdf"] = root.pdfjsLib = factory();
        else
          root["pdfjs-dist/build/pdf"] = root.pdfjsLib = factory();
      })(globalThis, () => {
        return (
          /******/
          (() => {
            "use strict";
            var __webpack_modules__ = [
              ,
              /* 1 */
              /***/
              (__unused_webpack_module2, exports2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.VerbosityLevel = exports2.Util = exports2.UnknownErrorException = exports2.UnexpectedResponseException = exports2.TextRenderingMode = exports2.RenderingIntentFlag = exports2.PromiseCapability = exports2.PermissionFlag = exports2.PasswordResponses = exports2.PasswordException = exports2.PageActionEventType = exports2.OPS = exports2.MissingPDFException = exports2.MAX_IMAGE_SIZE_TO_CACHE = exports2.LINE_FACTOR = exports2.LINE_DESCENT_FACTOR = exports2.InvalidPDFException = exports2.ImageKind = exports2.IDENTITY_MATRIX = exports2.FormatError = exports2.FeatureTest = exports2.FONT_IDENTITY_MATRIX = exports2.DocumentActionEventType = exports2.CMapCompressionType = exports2.BaseException = exports2.BASELINE_FACTOR = exports2.AnnotationType = exports2.AnnotationReplyType = exports2.AnnotationPrefix = exports2.AnnotationMode = exports2.AnnotationFlag = exports2.AnnotationFieldFlag = exports2.AnnotationEditorType = exports2.AnnotationEditorPrefix = exports2.AnnotationEditorParamsType = exports2.AnnotationBorderStyleType = exports2.AnnotationActionEventType = exports2.AbortException = void 0;
                exports2.assert = assert;
                exports2.bytesToString = bytesToString;
                exports2.createValidAbsoluteUrl = createValidAbsoluteUrl;
                exports2.getModificationDate = getModificationDate;
                exports2.getUuid = getUuid;
                exports2.getVerbosityLevel = getVerbosityLevel;
                exports2.info = info;
                exports2.isArrayBuffer = isArrayBuffer;
                exports2.isArrayEqual = isArrayEqual;
                exports2.isNodeJS = void 0;
                exports2.normalizeUnicode = normalizeUnicode;
                exports2.objectFromMap = objectFromMap;
                exports2.objectSize = objectSize;
                exports2.setVerbosityLevel = setVerbosityLevel;
                exports2.shadow = shadow;
                exports2.string32 = string32;
                exports2.stringToBytes = stringToBytes;
                exports2.stringToPDFString = stringToPDFString;
                exports2.stringToUTF8String = stringToUTF8String;
                exports2.unreachable = unreachable;
                exports2.utf8StringToString = utf8StringToString;
                exports2.warn = warn;
                const isNodeJS = typeof process === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
                exports2.isNodeJS = isNodeJS;
                const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
                exports2.IDENTITY_MATRIX = IDENTITY_MATRIX;
                const FONT_IDENTITY_MATRIX = [1e-3, 0, 0, 1e-3, 0, 0];
                exports2.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
                const MAX_IMAGE_SIZE_TO_CACHE = 1e7;
                exports2.MAX_IMAGE_SIZE_TO_CACHE = MAX_IMAGE_SIZE_TO_CACHE;
                const LINE_FACTOR = 1.35;
                exports2.LINE_FACTOR = LINE_FACTOR;
                const LINE_DESCENT_FACTOR = 0.35;
                exports2.LINE_DESCENT_FACTOR = LINE_DESCENT_FACTOR;
                const BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;
                exports2.BASELINE_FACTOR = BASELINE_FACTOR;
                const RenderingIntentFlag = {
                  ANY: 1,
                  DISPLAY: 2,
                  PRINT: 4,
                  SAVE: 8,
                  ANNOTATIONS_FORMS: 16,
                  ANNOTATIONS_STORAGE: 32,
                  ANNOTATIONS_DISABLE: 64,
                  OPLIST: 256
                };
                exports2.RenderingIntentFlag = RenderingIntentFlag;
                const AnnotationMode = {
                  DISABLE: 0,
                  ENABLE: 1,
                  ENABLE_FORMS: 2,
                  ENABLE_STORAGE: 3
                };
                exports2.AnnotationMode = AnnotationMode;
                const AnnotationEditorPrefix = "pdfjs_internal_editor_";
                exports2.AnnotationEditorPrefix = AnnotationEditorPrefix;
                const AnnotationEditorType = {
                  DISABLE: -1,
                  NONE: 0,
                  FREETEXT: 3,
                  STAMP: 13,
                  INK: 15
                };
                exports2.AnnotationEditorType = AnnotationEditorType;
                const AnnotationEditorParamsType = {
                  RESIZE: 1,
                  CREATE: 2,
                  FREETEXT_SIZE: 11,
                  FREETEXT_COLOR: 12,
                  FREETEXT_OPACITY: 13,
                  INK_COLOR: 21,
                  INK_THICKNESS: 22,
                  INK_OPACITY: 23
                };
                exports2.AnnotationEditorParamsType = AnnotationEditorParamsType;
                const PermissionFlag = {
                  PRINT: 4,
                  MODIFY_CONTENTS: 8,
                  COPY: 16,
                  MODIFY_ANNOTATIONS: 32,
                  FILL_INTERACTIVE_FORMS: 256,
                  COPY_FOR_ACCESSIBILITY: 512,
                  ASSEMBLE: 1024,
                  PRINT_HIGH_QUALITY: 2048
                };
                exports2.PermissionFlag = PermissionFlag;
                const TextRenderingMode = {
                  FILL: 0,
                  STROKE: 1,
                  FILL_STROKE: 2,
                  INVISIBLE: 3,
                  FILL_ADD_TO_PATH: 4,
                  STROKE_ADD_TO_PATH: 5,
                  FILL_STROKE_ADD_TO_PATH: 6,
                  ADD_TO_PATH: 7,
                  FILL_STROKE_MASK: 3,
                  ADD_TO_PATH_FLAG: 4
                };
                exports2.TextRenderingMode = TextRenderingMode;
                const ImageKind = {
                  GRAYSCALE_1BPP: 1,
                  RGB_24BPP: 2,
                  RGBA_32BPP: 3
                };
                exports2.ImageKind = ImageKind;
                const AnnotationType = {
                  TEXT: 1,
                  LINK: 2,
                  FREETEXT: 3,
                  LINE: 4,
                  SQUARE: 5,
                  CIRCLE: 6,
                  POLYGON: 7,
                  POLYLINE: 8,
                  HIGHLIGHT: 9,
                  UNDERLINE: 10,
                  SQUIGGLY: 11,
                  STRIKEOUT: 12,
                  STAMP: 13,
                  CARET: 14,
                  INK: 15,
                  POPUP: 16,
                  FILEATTACHMENT: 17,
                  SOUND: 18,
                  MOVIE: 19,
                  WIDGET: 20,
                  SCREEN: 21,
                  PRINTERMARK: 22,
                  TRAPNET: 23,
                  WATERMARK: 24,
                  THREED: 25,
                  REDACT: 26
                };
                exports2.AnnotationType = AnnotationType;
                const AnnotationReplyType = {
                  GROUP: "Group",
                  REPLY: "R"
                };
                exports2.AnnotationReplyType = AnnotationReplyType;
                const AnnotationFlag = {
                  INVISIBLE: 1,
                  HIDDEN: 2,
                  PRINT: 4,
                  NOZOOM: 8,
                  NOROTATE: 16,
                  NOVIEW: 32,
                  READONLY: 64,
                  LOCKED: 128,
                  TOGGLENOVIEW: 256,
                  LOCKEDCONTENTS: 512
                };
                exports2.AnnotationFlag = AnnotationFlag;
                const AnnotationFieldFlag = {
                  READONLY: 1,
                  REQUIRED: 2,
                  NOEXPORT: 4,
                  MULTILINE: 4096,
                  PASSWORD: 8192,
                  NOTOGGLETOOFF: 16384,
                  RADIO: 32768,
                  PUSHBUTTON: 65536,
                  COMBO: 131072,
                  EDIT: 262144,
                  SORT: 524288,
                  FILESELECT: 1048576,
                  MULTISELECT: 2097152,
                  DONOTSPELLCHECK: 4194304,
                  DONOTSCROLL: 8388608,
                  COMB: 16777216,
                  RICHTEXT: 33554432,
                  RADIOSINUNISON: 33554432,
                  COMMITONSELCHANGE: 67108864
                };
                exports2.AnnotationFieldFlag = AnnotationFieldFlag;
                const AnnotationBorderStyleType = {
                  SOLID: 1,
                  DASHED: 2,
                  BEVELED: 3,
                  INSET: 4,
                  UNDERLINE: 5
                };
                exports2.AnnotationBorderStyleType = AnnotationBorderStyleType;
                const AnnotationActionEventType = {
                  E: "Mouse Enter",
                  X: "Mouse Exit",
                  D: "Mouse Down",
                  U: "Mouse Up",
                  Fo: "Focus",
                  Bl: "Blur",
                  PO: "PageOpen",
                  PC: "PageClose",
                  PV: "PageVisible",
                  PI: "PageInvisible",
                  K: "Keystroke",
                  F: "Format",
                  V: "Validate",
                  C: "Calculate"
                };
                exports2.AnnotationActionEventType = AnnotationActionEventType;
                const DocumentActionEventType = {
                  WC: "WillClose",
                  WS: "WillSave",
                  DS: "DidSave",
                  WP: "WillPrint",
                  DP: "DidPrint"
                };
                exports2.DocumentActionEventType = DocumentActionEventType;
                const PageActionEventType = {
                  O: "PageOpen",
                  C: "PageClose"
                };
                exports2.PageActionEventType = PageActionEventType;
                const VerbosityLevel = {
                  ERRORS: 0,
                  WARNINGS: 1,
                  INFOS: 5
                };
                exports2.VerbosityLevel = VerbosityLevel;
                const CMapCompressionType = {
                  NONE: 0,
                  BINARY: 1
                };
                exports2.CMapCompressionType = CMapCompressionType;
                const OPS = {
                  dependency: 1,
                  setLineWidth: 2,
                  setLineCap: 3,
                  setLineJoin: 4,
                  setMiterLimit: 5,
                  setDash: 6,
                  setRenderingIntent: 7,
                  setFlatness: 8,
                  setGState: 9,
                  save: 10,
                  restore: 11,
                  transform: 12,
                  moveTo: 13,
                  lineTo: 14,
                  curveTo: 15,
                  curveTo2: 16,
                  curveTo3: 17,
                  closePath: 18,
                  rectangle: 19,
                  stroke: 20,
                  closeStroke: 21,
                  fill: 22,
                  eoFill: 23,
                  fillStroke: 24,
                  eoFillStroke: 25,
                  closeFillStroke: 26,
                  closeEOFillStroke: 27,
                  endPath: 28,
                  clip: 29,
                  eoClip: 30,
                  beginText: 31,
                  endText: 32,
                  setCharSpacing: 33,
                  setWordSpacing: 34,
                  setHScale: 35,
                  setLeading: 36,
                  setFont: 37,
                  setTextRenderingMode: 38,
                  setTextRise: 39,
                  moveText: 40,
                  setLeadingMoveText: 41,
                  setTextMatrix: 42,
                  nextLine: 43,
                  showText: 44,
                  showSpacedText: 45,
                  nextLineShowText: 46,
                  nextLineSetSpacingShowText: 47,
                  setCharWidth: 48,
                  setCharWidthAndBounds: 49,
                  setStrokeColorSpace: 50,
                  setFillColorSpace: 51,
                  setStrokeColor: 52,
                  setStrokeColorN: 53,
                  setFillColor: 54,
                  setFillColorN: 55,
                  setStrokeGray: 56,
                  setFillGray: 57,
                  setStrokeRGBColor: 58,
                  setFillRGBColor: 59,
                  setStrokeCMYKColor: 60,
                  setFillCMYKColor: 61,
                  shadingFill: 62,
                  beginInlineImage: 63,
                  beginImageData: 64,
                  endInlineImage: 65,
                  paintXObject: 66,
                  markPoint: 67,
                  markPointProps: 68,
                  beginMarkedContent: 69,
                  beginMarkedContentProps: 70,
                  endMarkedContent: 71,
                  beginCompat: 72,
                  endCompat: 73,
                  paintFormXObjectBegin: 74,
                  paintFormXObjectEnd: 75,
                  beginGroup: 76,
                  endGroup: 77,
                  beginAnnotation: 80,
                  endAnnotation: 81,
                  paintImageMaskXObject: 83,
                  paintImageMaskXObjectGroup: 84,
                  paintImageXObject: 85,
                  paintInlineImageXObject: 86,
                  paintInlineImageXObjectGroup: 87,
                  paintImageXObjectRepeat: 88,
                  paintImageMaskXObjectRepeat: 89,
                  paintSolidColorImageMask: 90,
                  constructPath: 91
                };
                exports2.OPS = OPS;
                const PasswordResponses = {
                  NEED_PASSWORD: 1,
                  INCORRECT_PASSWORD: 2
                };
                exports2.PasswordResponses = PasswordResponses;
                let verbosity = VerbosityLevel.WARNINGS;
                function setVerbosityLevel(level) {
                  if (Number.isInteger(level)) {
                    verbosity = level;
                  }
                }
                function getVerbosityLevel() {
                  return verbosity;
                }
                function info(msg) {
                  if (verbosity >= VerbosityLevel.INFOS) {
                    console.log(`Info: ${msg}`);
                  }
                }
                function warn(msg) {
                  if (verbosity >= VerbosityLevel.WARNINGS) {
                    console.log(`Warning: ${msg}`);
                  }
                }
                function unreachable(msg) {
                  throw new Error(msg);
                }
                function assert(cond, msg) {
                  if (!cond) {
                    unreachable(msg);
                  }
                }
                function _isValidProtocol(url) {
                  switch (url?.protocol) {
                    case "http:":
                    case "https:":
                    case "ftp:":
                    case "mailto:":
                    case "tel:":
                      return true;
                    default:
                      return false;
                  }
                }
                function createValidAbsoluteUrl(url, baseUrl = null, options = null) {
                  if (!url) {
                    return null;
                  }
                  try {
                    if (options && typeof url === "string") {
                      if (options.addDefaultProtocol && url.startsWith("www.")) {
                        const dots = url.match(/\./g);
                        if (dots?.length >= 2) {
                          url = `http://${url}`;
                        }
                      }
                      if (options.tryConvertEncoding) {
                        try {
                          url = stringToUTF8String(url);
                        } catch {
                        }
                      }
                    }
                    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
                    if (_isValidProtocol(absoluteUrl)) {
                      return absoluteUrl;
                    }
                  } catch {
                  }
                  return null;
                }
                function shadow(obj, prop, value, nonSerializable = false) {
                  Object.defineProperty(obj, prop, {
                    value,
                    enumerable: !nonSerializable,
                    configurable: true,
                    writable: false
                  });
                  return value;
                }
                const BaseException = function BaseExceptionClosure() {
                  function BaseException2(message, name) {
                    if (this.constructor === BaseException2) {
                      unreachable("Cannot initialize BaseException.");
                    }
                    this.message = message;
                    this.name = name;
                  }
                  BaseException2.prototype = new Error();
                  BaseException2.constructor = BaseException2;
                  return BaseException2;
                }();
                exports2.BaseException = BaseException;
                class PasswordException extends BaseException {
                  constructor(msg, code) {
                    super(msg, "PasswordException");
                    this.code = code;
                  }
                }
                exports2.PasswordException = PasswordException;
                class UnknownErrorException extends BaseException {
                  constructor(msg, details) {
                    super(msg, "UnknownErrorException");
                    this.details = details;
                  }
                }
                exports2.UnknownErrorException = UnknownErrorException;
                class InvalidPDFException extends BaseException {
                  constructor(msg) {
                    super(msg, "InvalidPDFException");
                  }
                }
                exports2.InvalidPDFException = InvalidPDFException;
                class MissingPDFException extends BaseException {
                  constructor(msg) {
                    super(msg, "MissingPDFException");
                  }
                }
                exports2.MissingPDFException = MissingPDFException;
                class UnexpectedResponseException extends BaseException {
                  constructor(msg, status) {
                    super(msg, "UnexpectedResponseException");
                    this.status = status;
                  }
                }
                exports2.UnexpectedResponseException = UnexpectedResponseException;
                class FormatError extends BaseException {
                  constructor(msg) {
                    super(msg, "FormatError");
                  }
                }
                exports2.FormatError = FormatError;
                class AbortException extends BaseException {
                  constructor(msg) {
                    super(msg, "AbortException");
                  }
                }
                exports2.AbortException = AbortException;
                function bytesToString(bytes) {
                  if (typeof bytes !== "object" || bytes?.length === void 0) {
                    unreachable("Invalid argument for bytesToString");
                  }
                  const length = bytes.length;
                  const MAX_ARGUMENT_COUNT = 8192;
                  if (length < MAX_ARGUMENT_COUNT) {
                    return String.fromCharCode.apply(null, bytes);
                  }
                  const strBuf = [];
                  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
                    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
                    const chunk = bytes.subarray(i, chunkEnd);
                    strBuf.push(String.fromCharCode.apply(null, chunk));
                  }
                  return strBuf.join("");
                }
                function stringToBytes(str) {
                  if (typeof str !== "string") {
                    unreachable("Invalid argument for stringToBytes");
                  }
                  const length = str.length;
                  const bytes = new Uint8Array(length);
                  for (let i = 0; i < length; ++i) {
                    bytes[i] = str.charCodeAt(i) & 255;
                  }
                  return bytes;
                }
                function string32(value) {
                  return String.fromCharCode(value >> 24 & 255, value >> 16 & 255, value >> 8 & 255, value & 255);
                }
                function objectSize(obj) {
                  return Object.keys(obj).length;
                }
                function objectFromMap(map) {
                  const obj = /* @__PURE__ */ Object.create(null);
                  for (const [key, value] of map) {
                    obj[key] = value;
                  }
                  return obj;
                }
                function isLittleEndian() {
                  const buffer8 = new Uint8Array(4);
                  buffer8[0] = 1;
                  const view32 = new Uint32Array(buffer8.buffer, 0, 1);
                  return view32[0] === 1;
                }
                function isEvalSupported() {
                  try {
                    new Function("");
                    return true;
                  } catch {
                    return false;
                  }
                }
                class FeatureTest {
                  static get isLittleEndian() {
                    return shadow(this, "isLittleEndian", isLittleEndian());
                  }
                  static get isEvalSupported() {
                    return shadow(this, "isEvalSupported", isEvalSupported());
                  }
                  static get isOffscreenCanvasSupported() {
                    return shadow(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas !== "undefined");
                  }
                  static get platform() {
                    if (typeof navigator === "undefined") {
                      return shadow(this, "platform", {
                        isWin: false,
                        isMac: false
                      });
                    }
                    return shadow(this, "platform", {
                      isWin: navigator.platform.includes("Win"),
                      isMac: navigator.platform.includes("Mac")
                    });
                  }
                  static get isCSSRoundSupported() {
                    return shadow(this, "isCSSRoundSupported", globalThis.CSS?.supports?.("width: round(1.5px, 1px)"));
                  }
                }
                exports2.FeatureTest = FeatureTest;
                const hexNumbers = [...Array(256).keys()].map((n) => n.toString(16).padStart(2, "0"));
                class Util {
                  static makeHexColor(r, g, b) {
                    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;
                  }
                  static scaleMinMax(transform, minMax) {
                    let temp;
                    if (transform[0]) {
                      if (transform[0] < 0) {
                        temp = minMax[0];
                        minMax[0] = minMax[1];
                        minMax[1] = temp;
                      }
                      minMax[0] *= transform[0];
                      minMax[1] *= transform[0];
                      if (transform[3] < 0) {
                        temp = minMax[2];
                        minMax[2] = minMax[3];
                        minMax[3] = temp;
                      }
                      minMax[2] *= transform[3];
                      minMax[3] *= transform[3];
                    } else {
                      temp = minMax[0];
                      minMax[0] = minMax[2];
                      minMax[2] = temp;
                      temp = minMax[1];
                      minMax[1] = minMax[3];
                      minMax[3] = temp;
                      if (transform[1] < 0) {
                        temp = minMax[2];
                        minMax[2] = minMax[3];
                        minMax[3] = temp;
                      }
                      minMax[2] *= transform[1];
                      minMax[3] *= transform[1];
                      if (transform[2] < 0) {
                        temp = minMax[0];
                        minMax[0] = minMax[1];
                        minMax[1] = temp;
                      }
                      minMax[0] *= transform[2];
                      minMax[1] *= transform[2];
                    }
                    minMax[0] += transform[4];
                    minMax[1] += transform[4];
                    minMax[2] += transform[5];
                    minMax[3] += transform[5];
                  }
                  static transform(m1, m2) {
                    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
                  }
                  static applyTransform(p, m) {
                    const xt = p[0] * m[0] + p[1] * m[2] + m[4];
                    const yt = p[0] * m[1] + p[1] * m[3] + m[5];
                    return [xt, yt];
                  }
                  static applyInverseTransform(p, m) {
                    const d = m[0] * m[3] - m[1] * m[2];
                    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
                    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
                    return [xt, yt];
                  }
                  static getAxialAlignedBoundingBox(r, m) {
                    const p1 = this.applyTransform(r, m);
                    const p2 = this.applyTransform(r.slice(2, 4), m);
                    const p3 = this.applyTransform([r[0], r[3]], m);
                    const p4 = this.applyTransform([r[2], r[1]], m);
                    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
                  }
                  static inverseTransform(m) {
                    const d = m[0] * m[3] - m[1] * m[2];
                    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
                  }
                  static singularValueDecompose2dScale(m) {
                    const transpose = [m[0], m[2], m[1], m[3]];
                    const a = m[0] * transpose[0] + m[1] * transpose[2];
                    const b = m[0] * transpose[1] + m[1] * transpose[3];
                    const c = m[2] * transpose[0] + m[3] * transpose[2];
                    const d = m[2] * transpose[1] + m[3] * transpose[3];
                    const first = (a + d) / 2;
                    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;
                    const sx = first + second || 1;
                    const sy = first - second || 1;
                    return [Math.sqrt(sx), Math.sqrt(sy)];
                  }
                  static normalizeRect(rect) {
                    const r = rect.slice(0);
                    if (rect[0] > rect[2]) {
                      r[0] = rect[2];
                      r[2] = rect[0];
                    }
                    if (rect[1] > rect[3]) {
                      r[1] = rect[3];
                      r[3] = rect[1];
                    }
                    return r;
                  }
                  static intersect(rect1, rect2) {
                    const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));
                    const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));
                    if (xLow > xHigh) {
                      return null;
                    }
                    const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));
                    const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));
                    if (yLow > yHigh) {
                      return null;
                    }
                    return [xLow, yLow, xHigh, yHigh];
                  }
                  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {
                    const tvalues = [], bounds = [[], []];
                    let a, b, c, t, t1, t2, b2ac, sqrtb2ac;
                    for (let i = 0; i < 2; ++i) {
                      if (i === 0) {
                        b = 6 * x0 - 12 * x1 + 6 * x2;
                        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
                        c = 3 * x1 - 3 * x0;
                      } else {
                        b = 6 * y0 - 12 * y1 + 6 * y2;
                        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
                        c = 3 * y1 - 3 * y0;
                      }
                      if (Math.abs(a) < 1e-12) {
                        if (Math.abs(b) < 1e-12) {
                          continue;
                        }
                        t = -c / b;
                        if (0 < t && t < 1) {
                          tvalues.push(t);
                        }
                        continue;
                      }
                      b2ac = b * b - 4 * c * a;
                      sqrtb2ac = Math.sqrt(b2ac);
                      if (b2ac < 0) {
                        continue;
                      }
                      t1 = (-b + sqrtb2ac) / (2 * a);
                      if (0 < t1 && t1 < 1) {
                        tvalues.push(t1);
                      }
                      t2 = (-b - sqrtb2ac) / (2 * a);
                      if (0 < t2 && t2 < 1) {
                        tvalues.push(t2);
                      }
                    }
                    let j = tvalues.length, mt;
                    const jlen = j;
                    while (j--) {
                      t = tvalues[j];
                      mt = 1 - t;
                      bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
                      bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
                    }
                    bounds[0][jlen] = x0;
                    bounds[1][jlen] = y0;
                    bounds[0][jlen + 1] = x3;
                    bounds[1][jlen + 1] = y3;
                    bounds[0].length = bounds[1].length = jlen + 2;
                    return [Math.min(...bounds[0]), Math.min(...bounds[1]), Math.max(...bounds[0]), Math.max(...bounds[1])];
                  }
                }
                exports2.Util = Util;
                const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364];
                function stringToPDFString(str) {
                  if (str[0] >= "\xEF") {
                    let encoding;
                    if (str[0] === "\xFE" && str[1] === "\xFF") {
                      encoding = "utf-16be";
                    } else if (str[0] === "\xFF" && str[1] === "\xFE") {
                      encoding = "utf-16le";
                    } else if (str[0] === "\xEF" && str[1] === "\xBB" && str[2] === "\xBF") {
                      encoding = "utf-8";
                    }
                    if (encoding) {
                      try {
                        const decoder = new TextDecoder(encoding, {
                          fatal: true
                        });
                        const buffer = stringToBytes(str);
                        return decoder.decode(buffer);
                      } catch (ex) {
                        warn(`stringToPDFString: "${ex}".`);
                      }
                    }
                  }
                  const strBuf = [];
                  for (let i = 0, ii = str.length; i < ii; i++) {
                    const code = PDFStringTranslateTable[str.charCodeAt(i)];
                    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
                  }
                  return strBuf.join("");
                }
                function stringToUTF8String(str) {
                  return decodeURIComponent(escape(str));
                }
                function utf8StringToString(str) {
                  return unescape(encodeURIComponent(str));
                }
                function isArrayBuffer(v) {
                  return typeof v === "object" && v?.byteLength !== void 0;
                }
                function isArrayEqual(arr1, arr2) {
                  if (arr1.length !== arr2.length) {
                    return false;
                  }
                  for (let i = 0, ii = arr1.length; i < ii; i++) {
                    if (arr1[i] !== arr2[i]) {
                      return false;
                    }
                  }
                  return true;
                }
                function getModificationDate(date = /* @__PURE__ */ new Date()) {
                  const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
                  return buffer.join("");
                }
                class PromiseCapability {
                  #settled = false;
                  constructor() {
                    this.promise = new Promise((resolve, reject) => {
                      this.resolve = (data) => {
                        this.#settled = true;
                        resolve(data);
                      };
                      this.reject = (reason) => {
                        this.#settled = true;
                        reject(reason);
                      };
                    });
                  }
                  get settled() {
                    return this.#settled;
                  }
                }
                exports2.PromiseCapability = PromiseCapability;
                let NormalizeRegex = null;
                let NormalizationMap = null;
                function normalizeUnicode(str) {
                  if (!NormalizeRegex) {
                    NormalizeRegex = /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu;
                    NormalizationMap = /* @__PURE__ */ new Map([["\uFB05", "\u017Ft"]]);
                  }
                  return str.replaceAll(NormalizeRegex, (_, p1, p2) => {
                    return p1 ? p1.normalize("NFKC") : NormalizationMap.get(p2);
                  });
                }
                function getUuid() {
                  if (typeof crypto !== "undefined" && typeof crypto?.randomUUID === "function") {
                    return crypto.randomUUID();
                  }
                  const buf = new Uint8Array(32);
                  if (typeof crypto !== "undefined" && typeof crypto?.getRandomValues === "function") {
                    crypto.getRandomValues(buf);
                  } else {
                    for (let i = 0; i < 32; i++) {
                      buf[i] = Math.floor(Math.random() * 255);
                    }
                  }
                  return bytesToString(buf);
                }
                const AnnotationPrefix = "pdfjs_internal_id_";
                exports2.AnnotationPrefix = AnnotationPrefix;
              },
              /* 2 */
              /***/
              (__unused_webpack_module, exports, __w_pdfjs_require__) => {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
                exports.RenderTask = exports.PDFWorkerUtil = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultFilterFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0;
                Object.defineProperty(exports, "SVGGraphics", {
                  enumerable: true,
                  get: function() {
                    return _displaySvg.SVGGraphics;
                  }
                });
                exports.build = void 0;
                exports.getDocument = getDocument;
                exports.version = void 0;
                var _util = __w_pdfjs_require__(1);
                var _annotation_storage = __w_pdfjs_require__(3);
                var _display_utils = __w_pdfjs_require__(6);
                var _font_loader = __w_pdfjs_require__(9);
                var _displayNode_utils = __w_pdfjs_require__(10);
                var _canvas = __w_pdfjs_require__(11);
                var _worker_options = __w_pdfjs_require__(14);
                var _message_handler = __w_pdfjs_require__(15);
                var _metadata = __w_pdfjs_require__(16);
                var _optional_content_config = __w_pdfjs_require__(17);
                var _transport_stream = __w_pdfjs_require__(18);
                var _displayFetch_stream = __w_pdfjs_require__(19);
                var _displayNetwork = __w_pdfjs_require__(22);
                var _displayNode_stream = __w_pdfjs_require__(23);
                var _displaySvg = __w_pdfjs_require__(24);
                var _xfa_text = __w_pdfjs_require__(25);
                const DEFAULT_RANGE_CHUNK_SIZE = 65536;
                const RENDERING_CANCELLED_TIMEOUT = 100;
                const DELAYED_CLEANUP_TIMEOUT = 5e3;
                const DefaultCanvasFactory = _util.isNodeJS ? _displayNode_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;
                exports.DefaultCanvasFactory = DefaultCanvasFactory;
                const DefaultCMapReaderFactory = _util.isNodeJS ? _displayNode_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;
                exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
                const DefaultFilterFactory = _util.isNodeJS ? _displayNode_utils.NodeFilterFactory : _display_utils.DOMFilterFactory;
                exports.DefaultFilterFactory = DefaultFilterFactory;
                const DefaultStandardFontDataFactory = _util.isNodeJS ? _displayNode_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;
                exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;
                function getDocument(src) {
                  if (typeof src === "string" || src instanceof URL) {
                    src = {
                      url: src
                    };
                  } else if ((0, _util.isArrayBuffer)(src)) {
                    src = {
                      data: src
                    };
                  }
                  if (typeof src !== "object") {
                    throw new Error("Invalid parameter in getDocument, need parameter object.");
                  }
                  if (!src.url && !src.data && !src.range) {
                    throw new Error("Invalid parameter object: need either .data, .range or .url");
                  }
                  const task = new PDFDocumentLoadingTask();
                  const {
                    docId
                  } = task;
                  const url = src.url ? getUrlProp(src.url) : null;
                  const data = src.data ? getDataProp(src.data) : null;
                  const httpHeaders = src.httpHeaders || null;
                  const withCredentials = src.withCredentials === true;
                  const password = src.password ?? null;
                  const rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;
                  const rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;
                  let worker2 = src.worker instanceof PDFWorker ? src.worker : null;
                  const verbosity = src.verbosity;
                  const docBaseUrl = typeof src.docBaseUrl === "string" && !(0, _display_utils.isDataScheme)(src.docBaseUrl) ? src.docBaseUrl : null;
                  const cMapUrl = typeof src.cMapUrl === "string" ? src.cMapUrl : null;
                  const cMapPacked = src.cMapPacked !== false;
                  const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;
                  const standardFontDataUrl = typeof src.standardFontDataUrl === "string" ? src.standardFontDataUrl : null;
                  const StandardFontDataFactory = src.StandardFontDataFactory || DefaultStandardFontDataFactory;
                  const ignoreErrors = src.stopAtErrors !== true;
                  const maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;
                  const isEvalSupported = src.isEvalSupported !== false;
                  const isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === "boolean" ? src.isOffscreenCanvasSupported : !_util.isNodeJS;
                  const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;
                  const disableFontFace = typeof src.disableFontFace === "boolean" ? src.disableFontFace : _util.isNodeJS;
                  const fontExtraProperties = src.fontExtraProperties === true;
                  const enableXfa = src.enableXfa === true;
                  const ownerDocument = src.ownerDocument || globalThis.document;
                  const disableRange = src.disableRange === true;
                  const disableStream = src.disableStream === true;
                  const disableAutoFetch = src.disableAutoFetch === true;
                  const pdfBug = src.pdfBug === true;
                  const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;
                  const useSystemFonts = typeof src.useSystemFonts === "boolean" ? src.useSystemFonts : !_util.isNodeJS && !disableFontFace;
                  const useWorkerFetch = typeof src.useWorkerFetch === "boolean" ? src.useWorkerFetch : CMapReaderFactory === _display_utils.DOMCMapReaderFactory && StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory && cMapUrl && standardFontDataUrl && (0, _display_utils.isValidFetchUrl)(cMapUrl, document.baseURI) && (0, _display_utils.isValidFetchUrl)(standardFontDataUrl, document.baseURI);
                  const canvasFactory = src.canvasFactory || new DefaultCanvasFactory({
                    ownerDocument
                  });
                  const filterFactory = src.filterFactory || new DefaultFilterFactory({
                    docId,
                    ownerDocument
                  });
                  const styleElement = null;
                  (0, _util.setVerbosityLevel)(verbosity);
                  const transportFactory = {
                    canvasFactory,
                    filterFactory
                  };
                  if (!useWorkerFetch) {
                    transportFactory.cMapReaderFactory = new CMapReaderFactory({
                      baseUrl: cMapUrl,
                      isCompressed: cMapPacked
                    });
                    transportFactory.standardFontDataFactory = new StandardFontDataFactory({
                      baseUrl: standardFontDataUrl
                    });
                  }
                  if (!worker2) {
                    const workerParams = {
                      verbosity,
                      port: _worker_options.GlobalWorkerOptions.workerPort
                    };
                    worker2 = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);
                    task._worker = worker2;
                  }
                  const fetchDocParams = {
                    docId,
                    apiVersion: "3.11.174",
                    data,
                    password,
                    disableAutoFetch,
                    rangeChunkSize,
                    length,
                    docBaseUrl,
                    enableXfa,
                    evaluatorOptions: {
                      maxImageSize,
                      disableFontFace,
                      ignoreErrors,
                      isEvalSupported,
                      isOffscreenCanvasSupported,
                      canvasMaxAreaInBytes,
                      fontExtraProperties,
                      useSystemFonts,
                      cMapUrl: useWorkerFetch ? cMapUrl : null,
                      standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null
                    }
                  };
                  const transportParams = {
                    ignoreErrors,
                    isEvalSupported,
                    disableFontFace,
                    fontExtraProperties,
                    enableXfa,
                    ownerDocument,
                    disableAutoFetch,
                    pdfBug,
                    styleElement
                  };
                  worker2.promise.then(function() {
                    if (task.destroyed) {
                      throw new Error("Loading aborted");
                    }
                    const workerIdPromise = _fetchDocument(worker2, fetchDocParams);
                    const networkStreamPromise = new Promise(function(resolve) {
                      let networkStream;
                      if (rangeTransport) {
                        networkStream = new _transport_stream.PDFDataTransportStream({
                          length,
                          initialData: rangeTransport.initialData,
                          progressiveDone: rangeTransport.progressiveDone,
                          contentDispositionFilename: rangeTransport.contentDispositionFilename,
                          disableRange,
                          disableStream
                        }, rangeTransport);
                      } else if (!data) {
                        const createPDFNetworkStream = (params) => {
                          if (_util.isNodeJS) {
                            return new _displayNode_stream.PDFNodeStream(params);
                          }
                          return (0, _display_utils.isValidFetchUrl)(params.url) ? new _displayFetch_stream.PDFFetchStream(params) : new _displayNetwork.PDFNetworkStream(params);
                        };
                        networkStream = createPDFNetworkStream({
                          url,
                          length,
                          httpHeaders,
                          withCredentials,
                          rangeChunkSize,
                          disableRange,
                          disableStream
                        });
                      }
                      resolve(networkStream);
                    });
                    return Promise.all([workerIdPromise, networkStreamPromise]).then(function([workerId, networkStream]) {
                      if (task.destroyed) {
                        throw new Error("Loading aborted");
                      }
                      const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker2.port);
                      const transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory);
                      task._transport = transport;
                      messageHandler.send("Ready", null);
                    });
                  }).catch(task._capability.reject);
                  return task;
                }
                async function _fetchDocument(worker2, source) {
                  if (worker2.destroyed) {
                    throw new Error("Worker was destroyed");
                  }
                  const workerId = await worker2.messageHandler.sendWithPromise("GetDocRequest", source, source.data ? [source.data.buffer] : null);
                  if (worker2.destroyed) {
                    throw new Error("Worker was destroyed");
                  }
                  return workerId;
                }
                function getUrlProp(val) {
                  if (val instanceof URL) {
                    return val.href;
                  }
                  try {
                    return new URL(val, window.location).href;
                  } catch {
                    if (_util.isNodeJS && typeof val === "string") {
                      return val;
                    }
                  }
                  throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");
                }
                function getDataProp(val) {
                  if (_util.isNodeJS && typeof Buffer !== "undefined" && val instanceof Buffer) {
                    throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");
                  }
                  if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {
                    return val;
                  }
                  if (typeof val === "string") {
                    return (0, _util.stringToBytes)(val);
                  }
                  if (typeof val === "object" && !isNaN(val?.length) || (0, _util.isArrayBuffer)(val)) {
                    return new Uint8Array(val);
                  }
                  throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.");
                }
                class PDFDocumentLoadingTask {
                  static #docId = 0;
                  constructor() {
                    this._capability = new _util.PromiseCapability();
                    this._transport = null;
                    this._worker = null;
                    this.docId = `d${PDFDocumentLoadingTask.#docId++}`;
                    this.destroyed = false;
                    this.onPassword = null;
                    this.onProgress = null;
                  }
                  get promise() {
                    return this._capability.promise;
                  }
                  async destroy() {
                    this.destroyed = true;
                    try {
                      if (this._worker?.port) {
                        this._worker._pendingDestroy = true;
                      }
                      await this._transport?.destroy();
                    } catch (ex) {
                      if (this._worker?.port) {
                        delete this._worker._pendingDestroy;
                      }
                      throw ex;
                    }
                    this._transport = null;
                    if (this._worker) {
                      this._worker.destroy();
                      this._worker = null;
                    }
                  }
                }
                exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;
                class PDFDataRangeTransport {
                  constructor(length, initialData, progressiveDone = false, contentDispositionFilename = null) {
                    this.length = length;
                    this.initialData = initialData;
                    this.progressiveDone = progressiveDone;
                    this.contentDispositionFilename = contentDispositionFilename;
                    this._rangeListeners = [];
                    this._progressListeners = [];
                    this._progressiveReadListeners = [];
                    this._progressiveDoneListeners = [];
                    this._readyCapability = new _util.PromiseCapability();
                  }
                  addRangeListener(listener) {
                    this._rangeListeners.push(listener);
                  }
                  addProgressListener(listener) {
                    this._progressListeners.push(listener);
                  }
                  addProgressiveReadListener(listener) {
                    this._progressiveReadListeners.push(listener);
                  }
                  addProgressiveDoneListener(listener) {
                    this._progressiveDoneListeners.push(listener);
                  }
                  onDataRange(begin, chunk) {
                    for (const listener of this._rangeListeners) {
                      listener(begin, chunk);
                    }
                  }
                  onDataProgress(loaded, total) {
                    this._readyCapability.promise.then(() => {
                      for (const listener of this._progressListeners) {
                        listener(loaded, total);
                      }
                    });
                  }
                  onDataProgressiveRead(chunk) {
                    this._readyCapability.promise.then(() => {
                      for (const listener of this._progressiveReadListeners) {
                        listener(chunk);
                      }
                    });
                  }
                  onDataProgressiveDone() {
                    this._readyCapability.promise.then(() => {
                      for (const listener of this._progressiveDoneListeners) {
                        listener();
                      }
                    });
                  }
                  transportReady() {
                    this._readyCapability.resolve();
                  }
                  requestDataRange(begin, end) {
                    (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
                  }
                  abort() {
                  }
                }
                exports.PDFDataRangeTransport = PDFDataRangeTransport;
                class PDFDocumentProxy {
                  constructor(pdfInfo, transport) {
                    this._pdfInfo = pdfInfo;
                    this._transport = transport;
                    Object.defineProperty(this, "getJavaScript", {
                      value: () => {
                        (0, _display_utils.deprecated)("`PDFDocumentProxy.getJavaScript`, please use `PDFDocumentProxy.getJSActions` instead.");
                        return this.getJSActions().then((js) => {
                          if (!js) {
                            return js;
                          }
                          const jsArr = [];
                          for (const name in js) {
                            jsArr.push(...js[name]);
                          }
                          return jsArr;
                        });
                      }
                    });
                  }
                  get annotationStorage() {
                    return this._transport.annotationStorage;
                  }
                  get filterFactory() {
                    return this._transport.filterFactory;
                  }
                  get numPages() {
                    return this._pdfInfo.numPages;
                  }
                  get fingerprints() {
                    return this._pdfInfo.fingerprints;
                  }
                  get isPureXfa() {
                    return (0, _util.shadow)(this, "isPureXfa", !!this._transport._htmlForXfa);
                  }
                  get allXfaHtml() {
                    return this._transport._htmlForXfa;
                  }
                  getPage(pageNumber) {
                    return this._transport.getPage(pageNumber);
                  }
                  getPageIndex(ref) {
                    return this._transport.getPageIndex(ref);
                  }
                  getDestinations() {
                    return this._transport.getDestinations();
                  }
                  getDestination(id) {
                    return this._transport.getDestination(id);
                  }
                  getPageLabels() {
                    return this._transport.getPageLabels();
                  }
                  getPageLayout() {
                    return this._transport.getPageLayout();
                  }
                  getPageMode() {
                    return this._transport.getPageMode();
                  }
                  getViewerPreferences() {
                    return this._transport.getViewerPreferences();
                  }
                  getOpenAction() {
                    return this._transport.getOpenAction();
                  }
                  getAttachments() {
                    return this._transport.getAttachments();
                  }
                  getJSActions() {
                    return this._transport.getDocJSActions();
                  }
                  getOutline() {
                    return this._transport.getOutline();
                  }
                  getOptionalContentConfig() {
                    return this._transport.getOptionalContentConfig();
                  }
                  getPermissions() {
                    return this._transport.getPermissions();
                  }
                  getMetadata() {
                    return this._transport.getMetadata();
                  }
                  getMarkInfo() {
                    return this._transport.getMarkInfo();
                  }
                  getData() {
                    return this._transport.getData();
                  }
                  saveDocument() {
                    return this._transport.saveDocument();
                  }
                  getDownloadInfo() {
                    return this._transport.downloadInfoCapability.promise;
                  }
                  cleanup(keepLoadedFonts = false) {
                    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);
                  }
                  destroy() {
                    return this.loadingTask.destroy();
                  }
                  get loadingParams() {
                    return this._transport.loadingParams;
                  }
                  get loadingTask() {
                    return this._transport.loadingTask;
                  }
                  getFieldObjects() {
                    return this._transport.getFieldObjects();
                  }
                  hasJSActions() {
                    return this._transport.hasJSActions();
                  }
                  getCalculationOrderIds() {
                    return this._transport.getCalculationOrderIds();
                  }
                }
                exports.PDFDocumentProxy = PDFDocumentProxy;
                class PDFPageProxy {
                  #delayedCleanupTimeout = null;
                  #pendingCleanup = false;
                  constructor(pageIndex, pageInfo, transport, pdfBug = false) {
                    this._pageIndex = pageIndex;
                    this._pageInfo = pageInfo;
                    this._transport = transport;
                    this._stats = pdfBug ? new _display_utils.StatTimer() : null;
                    this._pdfBug = pdfBug;
                    this.commonObjs = transport.commonObjs;
                    this.objs = new PDFObjects();
                    this._maybeCleanupAfterRender = false;
                    this._intentStates = /* @__PURE__ */ new Map();
                    this.destroyed = false;
                  }
                  get pageNumber() {
                    return this._pageIndex + 1;
                  }
                  get rotate() {
                    return this._pageInfo.rotate;
                  }
                  get ref() {
                    return this._pageInfo.ref;
                  }
                  get userUnit() {
                    return this._pageInfo.userUnit;
                  }
                  get view() {
                    return this._pageInfo.view;
                  }
                  getViewport({
                    scale,
                    rotation = this.rotate,
                    offsetX = 0,
                    offsetY = 0,
                    dontFlip = false
                  } = {}) {
                    return new _display_utils.PageViewport({
                      viewBox: this.view,
                      scale,
                      rotation,
                      offsetX,
                      offsetY,
                      dontFlip
                    });
                  }
                  getAnnotations({
                    intent = "display"
                  } = {}) {
                    const intentArgs = this._transport.getRenderingIntent(intent);
                    return this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);
                  }
                  getJSActions() {
                    return this._transport.getPageJSActions(this._pageIndex);
                  }
                  get filterFactory() {
                    return this._transport.filterFactory;
                  }
                  get isPureXfa() {
                    return (0, _util.shadow)(this, "isPureXfa", !!this._transport._htmlForXfa);
                  }
                  async getXfa() {
                    return this._transport._htmlForXfa?.children[this._pageIndex] || null;
                  }
                  render({
                    canvasContext,
                    viewport,
                    intent = "display",
                    annotationMode = _util.AnnotationMode.ENABLE,
                    transform = null,
                    background = null,
                    optionalContentConfigPromise = null,
                    annotationCanvasMap = null,
                    pageColors = null,
                    printAnnotationStorage = null
                  }) {
                    this._stats?.time("Overall");
                    const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage);
                    this.#pendingCleanup = false;
                    this.#abortDelayedCleanup();
                    if (!optionalContentConfigPromise) {
                      optionalContentConfigPromise = this._transport.getOptionalContentConfig();
                    }
                    let intentState = this._intentStates.get(intentArgs.cacheKey);
                    if (!intentState) {
                      intentState = /* @__PURE__ */ Object.create(null);
                      this._intentStates.set(intentArgs.cacheKey, intentState);
                    }
                    if (intentState.streamReaderCancelTimeout) {
                      clearTimeout(intentState.streamReaderCancelTimeout);
                      intentState.streamReaderCancelTimeout = null;
                    }
                    const intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);
                    if (!intentState.displayReadyCapability) {
                      intentState.displayReadyCapability = new _util.PromiseCapability();
                      intentState.operatorList = {
                        fnArray: [],
                        argsArray: [],
                        lastChunk: false,
                        separateAnnots: null
                      };
                      this._stats?.time("Page Request");
                      this._pumpOperatorList(intentArgs);
                    }
                    const complete = (error) => {
                      intentState.renderTasks.delete(internalRenderTask);
                      if (this._maybeCleanupAfterRender || intentPrint) {
                        this.#pendingCleanup = true;
                      }
                      this.#tryCleanup(!intentPrint);
                      if (error) {
                        internalRenderTask.capability.reject(error);
                        this._abortOperatorList({
                          intentState,
                          reason: error instanceof Error ? error : new Error(error)
                        });
                      } else {
                        internalRenderTask.capability.resolve();
                      }
                      this._stats?.timeEnd("Rendering");
                      this._stats?.timeEnd("Overall");
                    };
                    const internalRenderTask = new InternalRenderTask({
                      callback: complete,
                      params: {
                        canvasContext,
                        viewport,
                        transform,
                        background
                      },
                      objs: this.objs,
                      commonObjs: this.commonObjs,
                      annotationCanvasMap,
                      operatorList: intentState.operatorList,
                      pageIndex: this._pageIndex,
                      canvasFactory: this._transport.canvasFactory,
                      filterFactory: this._transport.filterFactory,
                      useRequestAnimationFrame: !intentPrint,
                      pdfBug: this._pdfBug,
                      pageColors
                    });
                    (intentState.renderTasks ||= /* @__PURE__ */ new Set()).add(internalRenderTask);
                    const renderTask = internalRenderTask.task;
                    Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {
                      if (this.destroyed) {
                        complete();
                        return;
                      }
                      this._stats?.time("Rendering");
                      internalRenderTask.initializeGraphics({
                        transparency,
                        optionalContentConfig
                      });
                      internalRenderTask.operatorListChanged();
                    }).catch(complete);
                    return renderTask;
                  }
                  getOperatorList({
                    intent = "display",
                    annotationMode = _util.AnnotationMode.ENABLE,
                    printAnnotationStorage = null
                  } = {}) {
                    function operatorListChanged() {
                      if (intentState.operatorList.lastChunk) {
                        intentState.opListReadCapability.resolve(intentState.operatorList);
                        intentState.renderTasks.delete(opListTask);
                      }
                    }
                    const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, true);
                    let intentState = this._intentStates.get(intentArgs.cacheKey);
                    if (!intentState) {
                      intentState = /* @__PURE__ */ Object.create(null);
                      this._intentStates.set(intentArgs.cacheKey, intentState);
                    }
                    let opListTask;
                    if (!intentState.opListReadCapability) {
                      opListTask = /* @__PURE__ */ Object.create(null);
                      opListTask.operatorListChanged = operatorListChanged;
                      intentState.opListReadCapability = new _util.PromiseCapability();
                      (intentState.renderTasks ||= /* @__PURE__ */ new Set()).add(opListTask);
                      intentState.operatorList = {
                        fnArray: [],
                        argsArray: [],
                        lastChunk: false,
                        separateAnnots: null
                      };
                      this._stats?.time("Page Request");
                      this._pumpOperatorList(intentArgs);
                    }
                    return intentState.opListReadCapability.promise;
                  }
                  streamTextContent({
                    includeMarkedContent = false,
                    disableNormalization = false
                  } = {}) {
                    const TEXT_CONTENT_CHUNK_SIZE = 100;
                    return this._transport.messageHandler.sendWithStream("GetTextContent", {
                      pageIndex: this._pageIndex,
                      includeMarkedContent: includeMarkedContent === true,
                      disableNormalization: disableNormalization === true
                    }, {
                      highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
                      size(textContent) {
                        return textContent.items.length;
                      }
                    });
                  }
                  getTextContent(params = {}) {
                    if (this._transport._htmlForXfa) {
                      return this.getXfa().then((xfa) => {
                        return _xfa_text.XfaText.textContent(xfa);
                      });
                    }
                    const readableStream = this.streamTextContent(params);
                    return new Promise(function(resolve, reject) {
                      function pump() {
                        reader.read().then(function({
                          value,
                          done
                        }) {
                          if (done) {
                            resolve(textContent);
                            return;
                          }
                          Object.assign(textContent.styles, value.styles);
                          textContent.items.push(...value.items);
                          pump();
                        }, reject);
                      }
                      const reader = readableStream.getReader();
                      const textContent = {
                        items: [],
                        styles: /* @__PURE__ */ Object.create(null)
                      };
                      pump();
                    });
                  }
                  getStructTree() {
                    return this._transport.getStructTree(this._pageIndex);
                  }
                  _destroy() {
                    this.destroyed = true;
                    const waitOn = [];
                    for (const intentState of this._intentStates.values()) {
                      this._abortOperatorList({
                        intentState,
                        reason: new Error("Page was destroyed."),
                        force: true
                      });
                      if (intentState.opListReadCapability) {
                        continue;
                      }
                      for (const internalRenderTask of intentState.renderTasks) {
                        waitOn.push(internalRenderTask.completed);
                        internalRenderTask.cancel();
                      }
                    }
                    this.objs.clear();
                    this.#pendingCleanup = false;
                    this.#abortDelayedCleanup();
                    return Promise.all(waitOn);
                  }
                  cleanup(resetStats = false) {
                    this.#pendingCleanup = true;
                    const success = this.#tryCleanup(false);
                    if (resetStats && success) {
                      this._stats &&= new _display_utils.StatTimer();
                    }
                    return success;
                  }
                  #tryCleanup(delayed = false) {
                    this.#abortDelayedCleanup();
                    if (!this.#pendingCleanup || this.destroyed) {
                      return false;
                    }
                    if (delayed) {
                      this.#delayedCleanupTimeout = setTimeout(() => {
                        this.#delayedCleanupTimeout = null;
                        this.#tryCleanup(false);
                      }, DELAYED_CLEANUP_TIMEOUT);
                      return false;
                    }
                    for (const {
                      renderTasks,
                      operatorList
                    } of this._intentStates.values()) {
                      if (renderTasks.size > 0 || !operatorList.lastChunk) {
                        return false;
                      }
                    }
                    this._intentStates.clear();
                    this.objs.clear();
                    this.#pendingCleanup = false;
                    return true;
                  }
                  #abortDelayedCleanup() {
                    if (this.#delayedCleanupTimeout) {
                      clearTimeout(this.#delayedCleanupTimeout);
                      this.#delayedCleanupTimeout = null;
                    }
                  }
                  _startRenderPage(transparency, cacheKey) {
                    const intentState = this._intentStates.get(cacheKey);
                    if (!intentState) {
                      return;
                    }
                    this._stats?.timeEnd("Page Request");
                    intentState.displayReadyCapability?.resolve(transparency);
                  }
                  _renderPageChunk(operatorListChunk, intentState) {
                    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {
                      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
                      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
                    }
                    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
                    intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;
                    for (const internalRenderTask of intentState.renderTasks) {
                      internalRenderTask.operatorListChanged();
                    }
                    if (operatorListChunk.lastChunk) {
                      this.#tryCleanup(true);
                    }
                  }
                  _pumpOperatorList({
                    renderingIntent,
                    cacheKey,
                    annotationStorageSerializable
                  }) {
                    const {
                      map,
                      transfers
                    } = annotationStorageSerializable;
                    const readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", {
                      pageIndex: this._pageIndex,
                      intent: renderingIntent,
                      cacheKey,
                      annotationStorage: map
                    }, transfers);
                    const reader = readableStream.getReader();
                    const intentState = this._intentStates.get(cacheKey);
                    intentState.streamReader = reader;
                    const pump = () => {
                      reader.read().then(({
                        value,
                        done
                      }) => {
                        if (done) {
                          intentState.streamReader = null;
                          return;
                        }
                        if (this._transport.destroyed) {
                          return;
                        }
                        this._renderPageChunk(value, intentState);
                        pump();
                      }, (reason) => {
                        intentState.streamReader = null;
                        if (this._transport.destroyed) {
                          return;
                        }
                        if (intentState.operatorList) {
                          intentState.operatorList.lastChunk = true;
                          for (const internalRenderTask of intentState.renderTasks) {
                            internalRenderTask.operatorListChanged();
                          }
                          this.#tryCleanup(true);
                        }
                        if (intentState.displayReadyCapability) {
                          intentState.displayReadyCapability.reject(reason);
                        } else if (intentState.opListReadCapability) {
                          intentState.opListReadCapability.reject(reason);
                        } else {
                          throw reason;
                        }
                      });
                    };
                    pump();
                  }
                  _abortOperatorList({
                    intentState,
                    reason,
                    force = false
                  }) {
                    if (!intentState.streamReader) {
                      return;
                    }
                    if (intentState.streamReaderCancelTimeout) {
                      clearTimeout(intentState.streamReaderCancelTimeout);
                      intentState.streamReaderCancelTimeout = null;
                    }
                    if (!force) {
                      if (intentState.renderTasks.size > 0) {
                        return;
                      }
                      if (reason instanceof _display_utils.RenderingCancelledException) {
                        let delay = RENDERING_CANCELLED_TIMEOUT;
                        if (reason.extraDelay > 0 && reason.extraDelay < 1e3) {
                          delay += reason.extraDelay;
                        }
                        intentState.streamReaderCancelTimeout = setTimeout(() => {
                          intentState.streamReaderCancelTimeout = null;
                          this._abortOperatorList({
                            intentState,
                            reason,
                            force: true
                          });
                        }, delay);
                        return;
                      }
                    }
                    intentState.streamReader.cancel(new _util.AbortException(reason.message)).catch(() => {
                    });
                    intentState.streamReader = null;
                    if (this._transport.destroyed) {
                      return;
                    }
                    for (const [curCacheKey, curIntentState] of this._intentStates) {
                      if (curIntentState === intentState) {
                        this._intentStates.delete(curCacheKey);
                        break;
                      }
                    }
                    this.cleanup();
                  }
                  get stats() {
                    return this._stats;
                  }
                }
                exports.PDFPageProxy = PDFPageProxy;
                class LoopbackPort {
                  #listeners = /* @__PURE__ */ new Set();
                  #deferred = Promise.resolve();
                  postMessage(obj, transfer) {
                    const event = {
                      data: structuredClone(obj, transfer ? {
                        transfer
                      } : null)
                    };
                    this.#deferred.then(() => {
                      for (const listener of this.#listeners) {
                        listener.call(this, event);
                      }
                    });
                  }
                  addEventListener(name, listener) {
                    this.#listeners.add(listener);
                  }
                  removeEventListener(name, listener) {
                    this.#listeners.delete(listener);
                  }
                  terminate() {
                    this.#listeners.clear();
                  }
                }
                exports.LoopbackPort = LoopbackPort;
                const PDFWorkerUtil = {
                  isWorkerDisabled: false,
                  fallbackWorkerSrc: null,
                  fakeWorkerId: 0
                };
                exports.PDFWorkerUtil = PDFWorkerUtil;
                {
                  if (_util.isNodeJS && typeof __require === "function") {
                    PDFWorkerUtil.isWorkerDisabled = true;
                    PDFWorkerUtil.fallbackWorkerSrc = "./pdf.worker.js";
                  } else if (typeof document === "object") {
                    const pdfjsFilePath = document?.currentScript?.src;
                    if (pdfjsFilePath) {
                      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2");
                    }
                  }
                  PDFWorkerUtil.isSameOrigin = function(baseUrl, otherUrl) {
                    let base;
                    try {
                      base = new URL(baseUrl);
                      if (!base.origin || base.origin === "null") {
                        return false;
                      }
                    } catch {
                      return false;
                    }
                    const other = new URL(otherUrl, base);
                    return base.origin === other.origin;
                  };
                  PDFWorkerUtil.createCDNWrapper = function(url) {
                    const wrapper = `importScripts("${url}");`;
                    return URL.createObjectURL(new Blob([wrapper]));
                  };
                }
                class PDFWorker {
                  static #workerPorts;
                  constructor({
                    name = null,
                    port = null,
                    verbosity = (0, _util.getVerbosityLevel)()
                  } = {}) {
                    this.name = name;
                    this.destroyed = false;
                    this.verbosity = verbosity;
                    this._readyCapability = new _util.PromiseCapability();
                    this._port = null;
                    this._webWorker = null;
                    this._messageHandler = null;
                    if (port) {
                      if (PDFWorker.#workerPorts?.has(port)) {
                        throw new Error("Cannot use more than one PDFWorker per port.");
                      }
                      (PDFWorker.#workerPorts ||= /* @__PURE__ */ new WeakMap()).set(port, this);
                      this._initializeFromPort(port);
                      return;
                    }
                    this._initialize();
                  }
                  get promise() {
                    return this._readyCapability.promise;
                  }
                  get port() {
                    return this._port;
                  }
                  get messageHandler() {
                    return this._messageHandler;
                  }
                  _initializeFromPort(port) {
                    this._port = port;
                    this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);
                    this._messageHandler.on("ready", function() {
                    });
                    this._readyCapability.resolve();
                    this._messageHandler.send("configure", {
                      verbosity: this.verbosity
                    });
                  }
                  _initialize() {
                    if (!PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {
                      let {
                        workerSrc
                      } = PDFWorker;
                      try {
                        if (!PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)) {
                          workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);
                        }
                        const worker2 = new Worker(workerSrc);
                        const messageHandler = new _message_handler.MessageHandler("main", "worker", worker2);
                        const terminateEarly = () => {
                          worker2.removeEventListener("error", onWorkerError);
                          messageHandler.destroy();
                          worker2.terminate();
                          if (this.destroyed) {
                            this._readyCapability.reject(new Error("Worker was destroyed"));
                          } else {
                            this._setupFakeWorker();
                          }
                        };
                        const onWorkerError = () => {
                          if (!this._webWorker) {
                            terminateEarly();
                          }
                        };
                        worker2.addEventListener("error", onWorkerError);
                        messageHandler.on("test", (data) => {
                          worker2.removeEventListener("error", onWorkerError);
                          if (this.destroyed) {
                            terminateEarly();
                            return;
                          }
                          if (data) {
                            this._messageHandler = messageHandler;
                            this._port = worker2;
                            this._webWorker = worker2;
                            this._readyCapability.resolve();
                            messageHandler.send("configure", {
                              verbosity: this.verbosity
                            });
                          } else {
                            this._setupFakeWorker();
                            messageHandler.destroy();
                            worker2.terminate();
                          }
                        });
                        messageHandler.on("ready", (data) => {
                          worker2.removeEventListener("error", onWorkerError);
                          if (this.destroyed) {
                            terminateEarly();
                            return;
                          }
                          try {
                            sendTest();
                          } catch {
                            this._setupFakeWorker();
                          }
                        });
                        const sendTest = () => {
                          const testObj = new Uint8Array();
                          messageHandler.send("test", testObj, [testObj.buffer]);
                        };
                        sendTest();
                        return;
                      } catch {
                        (0, _util.info)("The worker has been disabled.");
                      }
                    }
                    this._setupFakeWorker();
                  }
                  _setupFakeWorker() {
                    if (!PDFWorkerUtil.isWorkerDisabled) {
                      (0, _util.warn)("Setting up fake worker.");
                      PDFWorkerUtil.isWorkerDisabled = true;
                    }
                    PDFWorker._setupFakeWorkerGlobal.then((WorkerMessageHandler) => {
                      if (this.destroyed) {
                        this._readyCapability.reject(new Error("Worker was destroyed"));
                        return;
                      }
                      const port = new LoopbackPort();
                      this._port = port;
                      const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;
                      const workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);
                      WorkerMessageHandler.setup(workerHandler, port);
                      const messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);
                      this._messageHandler = messageHandler;
                      this._readyCapability.resolve();
                      messageHandler.send("configure", {
                        verbosity: this.verbosity
                      });
                    }).catch((reason) => {
                      this._readyCapability.reject(new Error(`Setting up fake worker failed: "${reason.message}".`));
                    });
                  }
                  destroy() {
                    this.destroyed = true;
                    if (this._webWorker) {
                      this._webWorker.terminate();
                      this._webWorker = null;
                    }
                    PDFWorker.#workerPorts?.delete(this._port);
                    this._port = null;
                    if (this._messageHandler) {
                      this._messageHandler.destroy();
                      this._messageHandler = null;
                    }
                  }
                  static fromPort(params) {
                    if (!params?.port) {
                      throw new Error("PDFWorker.fromPort - invalid method signature.");
                    }
                    const cachedPort = this.#workerPorts?.get(params.port);
                    if (cachedPort) {
                      if (cachedPort._pendingDestroy) {
                        throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");
                      }
                      return cachedPort;
                    }
                    return new PDFWorker(params);
                  }
                  static get workerSrc() {
                    if (_worker_options.GlobalWorkerOptions.workerSrc) {
                      return _worker_options.GlobalWorkerOptions.workerSrc;
                    }
                    if (PDFWorkerUtil.fallbackWorkerSrc !== null) {
                      if (!_util.isNodeJS) {
                        (0, _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.');
                      }
                      return PDFWorkerUtil.fallbackWorkerSrc;
                    }
                    throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
                  }
                  static get _mainThreadWorkerMessageHandler() {
                    try {
                      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;
                    } catch {
                      return null;
                    }
                  }
                  static get _setupFakeWorkerGlobal() {
                    const loader = async () => {
                      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;
                      if (mainWorkerMessageHandler) {
                        return mainWorkerMessageHandler;
                      }
                      if (_util.isNodeJS && typeof __require === "function") {
                        const worker = eval("require")(this.workerSrc);
                        return worker.WorkerMessageHandler;
                      }
                      await (0, _display_utils.loadScript)(this.workerSrc);
                      return window.pdfjsWorker.WorkerMessageHandler;
                    };
                    return (0, _util.shadow)(this, "_setupFakeWorkerGlobal", loader());
                  }
                }
                exports.PDFWorker = PDFWorker;
                class WorkerTransport {
                  #methodPromises = /* @__PURE__ */ new Map();
                  #pageCache = /* @__PURE__ */ new Map();
                  #pagePromises = /* @__PURE__ */ new Map();
                  #passwordCapability = null;
                  constructor(messageHandler, loadingTask, networkStream, params, factory) {
                    this.messageHandler = messageHandler;
                    this.loadingTask = loadingTask;
                    this.commonObjs = new PDFObjects();
                    this.fontLoader = new _font_loader.FontLoader({
                      ownerDocument: params.ownerDocument,
                      styleElement: params.styleElement
                    });
                    this._params = params;
                    this.canvasFactory = factory.canvasFactory;
                    this.filterFactory = factory.filterFactory;
                    this.cMapReaderFactory = factory.cMapReaderFactory;
                    this.standardFontDataFactory = factory.standardFontDataFactory;
                    this.destroyed = false;
                    this.destroyCapability = null;
                    this._networkStream = networkStream;
                    this._fullReader = null;
                    this._lastProgress = null;
                    this.downloadInfoCapability = new _util.PromiseCapability();
                    this.setupMessageHandler();
                  }
                  #cacheSimpleMethod(name, data = null) {
                    const cachedPromise = this.#methodPromises.get(name);
                    if (cachedPromise) {
                      return cachedPromise;
                    }
                    const promise = this.messageHandler.sendWithPromise(name, data);
                    this.#methodPromises.set(name, promise);
                    return promise;
                  }
                  get annotationStorage() {
                    return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());
                  }
                  getRenderingIntent(intent, annotationMode = _util.AnnotationMode.ENABLE, printAnnotationStorage = null, isOpList = false) {
                    let renderingIntent = _util.RenderingIntentFlag.DISPLAY;
                    let annotationStorageSerializable = _annotation_storage.SerializableEmpty;
                    switch (intent) {
                      case "any":
                        renderingIntent = _util.RenderingIntentFlag.ANY;
                        break;
                      case "display":
                        break;
                      case "print":
                        renderingIntent = _util.RenderingIntentFlag.PRINT;
                        break;
                      default:
                        (0, _util.warn)(`getRenderingIntent - invalid intent: ${intent}`);
                    }
                    switch (annotationMode) {
                      case _util.AnnotationMode.DISABLE:
                        renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;
                        break;
                      case _util.AnnotationMode.ENABLE:
                        break;
                      case _util.AnnotationMode.ENABLE_FORMS:
                        renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;
                        break;
                      case _util.AnnotationMode.ENABLE_STORAGE:
                        renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;
                        const annotationStorage = renderingIntent & _util.RenderingIntentFlag.PRINT && printAnnotationStorage instanceof _annotation_storage.PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;
                        annotationStorageSerializable = annotationStorage.serializable;
                        break;
                      default:
                        (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);
                    }
                    if (isOpList) {
                      renderingIntent += _util.RenderingIntentFlag.OPLIST;
                    }
                    return {
                      renderingIntent,
                      cacheKey: `${renderingIntent}_${annotationStorageSerializable.hash}`,
                      annotationStorageSerializable
                    };
                  }
                  destroy() {
                    if (this.destroyCapability) {
                      return this.destroyCapability.promise;
                    }
                    this.destroyed = true;
                    this.destroyCapability = new _util.PromiseCapability();
                    this.#passwordCapability?.reject(new Error("Worker was destroyed during onPassword callback"));
                    const waitOn = [];
                    for (const page of this.#pageCache.values()) {
                      waitOn.push(page._destroy());
                    }
                    this.#pageCache.clear();
                    this.#pagePromises.clear();
                    if (this.hasOwnProperty("annotationStorage")) {
                      this.annotationStorage.resetModified();
                    }
                    const terminated = this.messageHandler.sendWithPromise("Terminate", null);
                    waitOn.push(terminated);
                    Promise.all(waitOn).then(() => {
                      this.commonObjs.clear();
                      this.fontLoader.clear();
                      this.#methodPromises.clear();
                      this.filterFactory.destroy();
                      this._networkStream?.cancelAllRequests(new _util.AbortException("Worker was terminated."));
                      if (this.messageHandler) {
                        this.messageHandler.destroy();
                        this.messageHandler = null;
                      }
                      this.destroyCapability.resolve();
                    }, this.destroyCapability.reject);
                    return this.destroyCapability.promise;
                  }
                  setupMessageHandler() {
                    const {
                      messageHandler,
                      loadingTask
                    } = this;
                    messageHandler.on("GetReader", (data, sink) => {
                      (0, _util.assert)(this._networkStream, "GetReader - no `IPDFStream` instance available.");
                      this._fullReader = this._networkStream.getFullReader();
                      this._fullReader.onProgress = (evt) => {
                        this._lastProgress = {
                          loaded: evt.loaded,
                          total: evt.total
                        };
                      };
                      sink.onPull = () => {
                        this._fullReader.read().then(function({
                          value,
                          done
                        }) {
                          if (done) {
                            sink.close();
                            return;
                          }
                          (0, _util.assert)(value instanceof ArrayBuffer, "GetReader - expected an ArrayBuffer.");
                          sink.enqueue(new Uint8Array(value), 1, [value]);
                        }).catch((reason) => {
                          sink.error(reason);
                        });
                      };
                      sink.onCancel = (reason) => {
                        this._fullReader.cancel(reason);
                        sink.ready.catch((readyReason) => {
                          if (this.destroyed) {
                            return;
                          }
                          throw readyReason;
                        });
                      };
                    });
                    messageHandler.on("ReaderHeadersReady", (data) => {
                      const headersCapability = new _util.PromiseCapability();
                      const fullReader = this._fullReader;
                      fullReader.headersReady.then(() => {
                        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                          if (this._lastProgress) {
                            loadingTask.onProgress?.(this._lastProgress);
                          }
                          fullReader.onProgress = (evt) => {
                            loadingTask.onProgress?.({
                              loaded: evt.loaded,
                              total: evt.total
                            });
                          };
                        }
                        headersCapability.resolve({
                          isStreamingSupported: fullReader.isStreamingSupported,
                          isRangeSupported: fullReader.isRangeSupported,
                          contentLength: fullReader.contentLength
                        });
                      }, headersCapability.reject);
                      return headersCapability.promise;
                    });
                    messageHandler.on("GetRangeReader", (data, sink) => {
                      (0, _util.assert)(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
                      const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);
                      if (!rangeReader) {
                        sink.close();
                        return;
                      }
                      sink.onPull = () => {
                        rangeReader.read().then(function({
                          value,
                          done
                        }) {
                          if (done) {
                            sink.close();
                            return;
                          }
                          (0, _util.assert)(value instanceof ArrayBuffer, "GetRangeReader - expected an ArrayBuffer.");
                          sink.enqueue(new Uint8Array(value), 1, [value]);
                        }).catch((reason) => {
                          sink.error(reason);
                        });
                      };
                      sink.onCancel = (reason) => {
                        rangeReader.cancel(reason);
                        sink.ready.catch((readyReason) => {
                          if (this.destroyed) {
                            return;
                          }
                          throw readyReason;
                        });
                      };
                    });
                    messageHandler.on("GetDoc", ({
                      pdfInfo
                    }) => {
                      this._numPages = pdfInfo.numPages;
                      this._htmlForXfa = pdfInfo.htmlForXfa;
                      delete pdfInfo.htmlForXfa;
                      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));
                    });
                    messageHandler.on("DocException", function(ex) {
                      let reason;
                      switch (ex.name) {
                        case "PasswordException":
                          reason = new _util.PasswordException(ex.message, ex.code);
                          break;
                        case "InvalidPDFException":
                          reason = new _util.InvalidPDFException(ex.message);
                          break;
                        case "MissingPDFException":
                          reason = new _util.MissingPDFException(ex.message);
                          break;
                        case "UnexpectedResponseException":
                          reason = new _util.UnexpectedResponseException(ex.message, ex.status);
                          break;
                        case "UnknownErrorException":
                          reason = new _util.UnknownErrorException(ex.message, ex.details);
                          break;
                        default:
                          (0, _util.unreachable)("DocException - expected a valid Error.");
                      }
                      loadingTask._capability.reject(reason);
                    });
                    messageHandler.on("PasswordRequest", (exception) => {
                      this.#passwordCapability = new _util.PromiseCapability();
                      if (loadingTask.onPassword) {
                        const updatePassword = (password) => {
                          if (password instanceof Error) {
                            this.#passwordCapability.reject(password);
                          } else {
                            this.#passwordCapability.resolve({
                              password
                            });
                          }
                        };
                        try {
                          loadingTask.onPassword(updatePassword, exception.code);
                        } catch (ex) {
                          this.#passwordCapability.reject(ex);
                        }
                      } else {
                        this.#passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
                      }
                      return this.#passwordCapability.promise;
                    });
                    messageHandler.on("DataLoaded", (data) => {
                      loadingTask.onProgress?.({
                        loaded: data.length,
                        total: data.length
                      });
                      this.downloadInfoCapability.resolve(data);
                    });
                    messageHandler.on("StartRenderPage", (data) => {
                      if (this.destroyed) {
                        return;
                      }
                      const page = this.#pageCache.get(data.pageIndex);
                      page._startRenderPage(data.transparency, data.cacheKey);
                    });
                    messageHandler.on("commonobj", ([id, type, exportedData]) => {
                      if (this.destroyed) {
                        return;
                      }
                      if (this.commonObjs.has(id)) {
                        return;
                      }
                      switch (type) {
                        case "Font":
                          const params = this._params;
                          if ("error" in exportedData) {
                            const exportedError = exportedData.error;
                            (0, _util.warn)(`Error during font loading: ${exportedError}`);
                            this.commonObjs.resolve(id, exportedError);
                            break;
                          }
                          const inspectFont = params.pdfBug && globalThis.FontInspector?.enabled ? (font2, url) => globalThis.FontInspector.fontAdded(font2, url) : null;
                          const font = new _font_loader.FontFaceObject(exportedData, {
                            isEvalSupported: params.isEvalSupported,
                            disableFontFace: params.disableFontFace,
                            ignoreErrors: params.ignoreErrors,
                            inspectFont
                          });
                          this.fontLoader.bind(font).catch((reason) => {
                            return messageHandler.sendWithPromise("FontFallback", {
                              id
                            });
                          }).finally(() => {
                            if (!params.fontExtraProperties && font.data) {
                              font.data = null;
                            }
                            this.commonObjs.resolve(id, font);
                          });
                          break;
                        case "FontPath":
                        case "Image":
                        case "Pattern":
                          this.commonObjs.resolve(id, exportedData);
                          break;
                        default:
                          throw new Error(`Got unknown common object type ${type}`);
                      }
                    });
                    messageHandler.on("obj", ([id, pageIndex, type, imageData]) => {
                      if (this.destroyed) {
                        return;
                      }
                      const pageProxy = this.#pageCache.get(pageIndex);
                      if (pageProxy.objs.has(id)) {
                        return;
                      }
                      switch (type) {
                        case "Image":
                          pageProxy.objs.resolve(id, imageData);
                          if (imageData) {
                            let length;
                            if (imageData.bitmap) {
                              const {
                                width,
                                height
                              } = imageData;
                              length = width * height * 4;
                            } else {
                              length = imageData.data?.length || 0;
                            }
                            if (length > _util.MAX_IMAGE_SIZE_TO_CACHE) {
                              pageProxy._maybeCleanupAfterRender = true;
                            }
                          }
                          break;
                        case "Pattern":
                          pageProxy.objs.resolve(id, imageData);
                          break;
                        default:
                          throw new Error(`Got unknown object type ${type}`);
                      }
                    });
                    messageHandler.on("DocProgress", (data) => {
                      if (this.destroyed) {
                        return;
                      }
                      loadingTask.onProgress?.({
                        loaded: data.loaded,
                        total: data.total
                      });
                    });
                    messageHandler.on("FetchBuiltInCMap", (data) => {
                      if (this.destroyed) {
                        return Promise.reject(new Error("Worker was destroyed."));
                      }
                      if (!this.cMapReaderFactory) {
                        return Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."));
                      }
                      return this.cMapReaderFactory.fetch(data);
                    });
                    messageHandler.on("FetchStandardFontData", (data) => {
                      if (this.destroyed) {
                        return Promise.reject(new Error("Worker was destroyed."));
                      }
                      if (!this.standardFontDataFactory) {
                        return Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."));
                      }
                      return this.standardFontDataFactory.fetch(data);
                    });
                  }
                  getData() {
                    return this.messageHandler.sendWithPromise("GetData", null);
                  }
                  saveDocument() {
                    if (this.annotationStorage.size <= 0) {
                      (0, _util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");
                    }
                    const {
                      map,
                      transfers
                    } = this.annotationStorage.serializable;
                    return this.messageHandler.sendWithPromise("SaveDocument", {
                      isPureXfa: !!this._htmlForXfa,
                      numPages: this._numPages,
                      annotationStorage: map,
                      filename: this._fullReader?.filename ?? null
                    }, transfers).finally(() => {
                      this.annotationStorage.resetModified();
                    });
                  }
                  getPage(pageNumber) {
                    if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
                      return Promise.reject(new Error("Invalid page request."));
                    }
                    const pageIndex = pageNumber - 1, cachedPromise = this.#pagePromises.get(pageIndex);
                    if (cachedPromise) {
                      return cachedPromise;
                    }
                    const promise = this.messageHandler.sendWithPromise("GetPage", {
                      pageIndex
                    }).then((pageInfo) => {
                      if (this.destroyed) {
                        throw new Error("Transport destroyed");
                      }
                      const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.pdfBug);
                      this.#pageCache.set(pageIndex, page);
                      return page;
                    });
                    this.#pagePromises.set(pageIndex, promise);
                    return promise;
                  }
                  getPageIndex(ref) {
                    if (typeof ref !== "object" || ref === null || !Number.isInteger(ref.num) || ref.num < 0 || !Number.isInteger(ref.gen) || ref.gen < 0) {
                      return Promise.reject(new Error("Invalid pageIndex request."));
                    }
                    return this.messageHandler.sendWithPromise("GetPageIndex", {
                      num: ref.num,
                      gen: ref.gen
                    });
                  }
                  getAnnotations(pageIndex, intent) {
                    return this.messageHandler.sendWithPromise("GetAnnotations", {
                      pageIndex,
                      intent
                    });
                  }
                  getFieldObjects() {
                    return this.#cacheSimpleMethod("GetFieldObjects");
                  }
                  hasJSActions() {
                    return this.#cacheSimpleMethod("HasJSActions");
                  }
                  getCalculationOrderIds() {
                    return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
                  }
                  getDestinations() {
                    return this.messageHandler.sendWithPromise("GetDestinations", null);
                  }
                  getDestination(id) {
                    if (typeof id !== "string") {
                      return Promise.reject(new Error("Invalid destination request."));
                    }
                    return this.messageHandler.sendWithPromise("GetDestination", {
                      id
                    });
                  }
                  getPageLabels() {
                    return this.messageHandler.sendWithPromise("GetPageLabels", null);
                  }
                  getPageLayout() {
                    return this.messageHandler.sendWithPromise("GetPageLayout", null);
                  }
                  getPageMode() {
                    return this.messageHandler.sendWithPromise("GetPageMode", null);
                  }
                  getViewerPreferences() {
                    return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
                  }
                  getOpenAction() {
                    return this.messageHandler.sendWithPromise("GetOpenAction", null);
                  }
                  getAttachments() {
                    return this.messageHandler.sendWithPromise("GetAttachments", null);
                  }
                  getDocJSActions() {
                    return this.#cacheSimpleMethod("GetDocJSActions");
                  }
                  getPageJSActions(pageIndex) {
                    return this.messageHandler.sendWithPromise("GetPageJSActions", {
                      pageIndex
                    });
                  }
                  getStructTree(pageIndex) {
                    return this.messageHandler.sendWithPromise("GetStructTree", {
                      pageIndex
                    });
                  }
                  getOutline() {
                    return this.messageHandler.sendWithPromise("GetOutline", null);
                  }
                  getOptionalContentConfig() {
                    return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then((results) => {
                      return new _optional_content_config.OptionalContentConfig(results);
                    });
                  }
                  getPermissions() {
                    return this.messageHandler.sendWithPromise("GetPermissions", null);
                  }
                  getMetadata() {
                    const name = "GetMetadata", cachedPromise = this.#methodPromises.get(name);
                    if (cachedPromise) {
                      return cachedPromise;
                    }
                    const promise = this.messageHandler.sendWithPromise(name, null).then((results) => {
                      return {
                        info: results[0],
                        metadata: results[1] ? new _metadata.Metadata(results[1]) : null,
                        contentDispositionFilename: this._fullReader?.filename ?? null,
                        contentLength: this._fullReader?.contentLength ?? null
                      };
                    });
                    this.#methodPromises.set(name, promise);
                    return promise;
                  }
                  getMarkInfo() {
                    return this.messageHandler.sendWithPromise("GetMarkInfo", null);
                  }
                  async startCleanup(keepLoadedFonts = false) {
                    if (this.destroyed) {
                      return;
                    }
                    await this.messageHandler.sendWithPromise("Cleanup", null);
                    for (const page of this.#pageCache.values()) {
                      const cleanupSuccessful = page.cleanup();
                      if (!cleanupSuccessful) {
                        throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);
                      }
                    }
                    this.commonObjs.clear();
                    if (!keepLoadedFonts) {
                      this.fontLoader.clear();
                    }
                    this.#methodPromises.clear();
                    this.filterFactory.destroy(true);
                  }
                  get loadingParams() {
                    const {
                      disableAutoFetch,
                      enableXfa
                    } = this._params;
                    return (0, _util.shadow)(this, "loadingParams", {
                      disableAutoFetch,
                      enableXfa
                    });
                  }
                }
                class PDFObjects {
                  #objs = /* @__PURE__ */ Object.create(null);
                  #ensureObj(objId) {
                    return this.#objs[objId] ||= {
                      capability: new _util.PromiseCapability(),
                      data: null
                    };
                  }
                  get(objId, callback = null) {
                    if (callback) {
                      const obj2 = this.#ensureObj(objId);
                      obj2.capability.promise.then(() => callback(obj2.data));
                      return null;
                    }
                    const obj = this.#objs[objId];
                    if (!obj?.capability.settled) {
                      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);
                    }
                    return obj.data;
                  }
                  has(objId) {
                    const obj = this.#objs[objId];
                    return obj?.capability.settled || false;
                  }
                  resolve(objId, data = null) {
                    const obj = this.#ensureObj(objId);
                    obj.data = data;
                    obj.capability.resolve();
                  }
                  clear() {
                    for (const objId in this.#objs) {
                      const {
                        data
                      } = this.#objs[objId];
                      data?.bitmap?.close();
                    }
                    this.#objs = /* @__PURE__ */ Object.create(null);
                  }
                }
                class RenderTask {
                  #internalRenderTask = null;
                  constructor(internalRenderTask) {
                    this.#internalRenderTask = internalRenderTask;
                    this.onContinue = null;
                  }
                  get promise() {
                    return this.#internalRenderTask.capability.promise;
                  }
                  cancel(extraDelay = 0) {
                    this.#internalRenderTask.cancel(null, extraDelay);
                  }
                  get separateAnnots() {
                    const {
                      separateAnnots
                    } = this.#internalRenderTask.operatorList;
                    if (!separateAnnots) {
                      return false;
                    }
                    const {
                      annotationCanvasMap
                    } = this.#internalRenderTask;
                    return separateAnnots.form || separateAnnots.canvas && annotationCanvasMap?.size > 0;
                  }
                }
                exports.RenderTask = RenderTask;
                class InternalRenderTask {
                  static #canvasInUse = /* @__PURE__ */ new WeakSet();
                  constructor({
                    callback,
                    params,
                    objs,
                    commonObjs,
                    annotationCanvasMap,
                    operatorList,
                    pageIndex,
                    canvasFactory,
                    filterFactory,
                    useRequestAnimationFrame = false,
                    pdfBug = false,
                    pageColors = null
                  }) {
                    this.callback = callback;
                    this.params = params;
                    this.objs = objs;
                    this.commonObjs = commonObjs;
                    this.annotationCanvasMap = annotationCanvasMap;
                    this.operatorListIdx = null;
                    this.operatorList = operatorList;
                    this._pageIndex = pageIndex;
                    this.canvasFactory = canvasFactory;
                    this.filterFactory = filterFactory;
                    this._pdfBug = pdfBug;
                    this.pageColors = pageColors;
                    this.running = false;
                    this.graphicsReadyCallback = null;
                    this.graphicsReady = false;
                    this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
                    this.cancelled = false;
                    this.capability = new _util.PromiseCapability();
                    this.task = new RenderTask(this);
                    this._cancelBound = this.cancel.bind(this);
                    this._continueBound = this._continue.bind(this);
                    this._scheduleNextBound = this._scheduleNext.bind(this);
                    this._nextBound = this._next.bind(this);
                    this._canvas = params.canvasContext.canvas;
                  }
                  get completed() {
                    return this.capability.promise.catch(function() {
                    });
                  }
                  initializeGraphics({
                    transparency = false,
                    optionalContentConfig
                  }) {
                    if (this.cancelled) {
                      return;
                    }
                    if (this._canvas) {
                      if (InternalRenderTask.#canvasInUse.has(this._canvas)) {
                        throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
                      }
                      InternalRenderTask.#canvasInUse.add(this._canvas);
                    }
                    if (this._pdfBug && globalThis.StepperManager?.enabled) {
                      this.stepper = globalThis.StepperManager.create(this._pageIndex);
                      this.stepper.init(this.operatorList);
                      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
                    }
                    const {
                      canvasContext,
                      viewport,
                      transform,
                      background
                    } = this.params;
                    this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
                      optionalContentConfig
                    }, this.annotationCanvasMap, this.pageColors);
                    this.gfx.beginDrawing({
                      transform,
                      viewport,
                      transparency,
                      background
                    });
                    this.operatorListIdx = 0;
                    this.graphicsReady = true;
                    this.graphicsReadyCallback?.();
                  }
                  cancel(error = null, extraDelay = 0) {
                    this.running = false;
                    this.cancelled = true;
                    this.gfx?.endDrawing();
                    InternalRenderTask.#canvasInUse.delete(this._canvas);
                    this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay));
                  }
                  operatorListChanged() {
                    if (!this.graphicsReady) {
                      this.graphicsReadyCallback ||= this._continueBound;
                      return;
                    }
                    this.stepper?.updateOperatorList(this.operatorList);
                    if (this.running) {
                      return;
                    }
                    this._continue();
                  }
                  _continue() {
                    this.running = true;
                    if (this.cancelled) {
                      return;
                    }
                    if (this.task.onContinue) {
                      this.task.onContinue(this._scheduleNextBound);
                    } else {
                      this._scheduleNext();
                    }
                  }
                  _scheduleNext() {
                    if (this._useRequestAnimationFrame) {
                      window.requestAnimationFrame(() => {
                        this._nextBound().catch(this._cancelBound);
                      });
                    } else {
                      Promise.resolve().then(this._nextBound).catch(this._cancelBound);
                    }
                  }
                  async _next() {
                    if (this.cancelled) {
                      return;
                    }
                    this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);
                    if (this.operatorListIdx === this.operatorList.argsArray.length) {
                      this.running = false;
                      if (this.operatorList.lastChunk) {
                        this.gfx.endDrawing();
                        InternalRenderTask.#canvasInUse.delete(this._canvas);
                        this.callback();
                      }
                    }
                  }
                }
                const version = "3.11.174";
                exports.version = version;
                const build = "ce8716743";
                exports.build = build;
              },
              /* 3 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.SerializableEmpty = exports2.PrintAnnotationStorage = exports2.AnnotationStorage = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _editor = __w_pdfjs_require__2(4);
                var _murmurhash = __w_pdfjs_require__2(8);
                const SerializableEmpty = Object.freeze({
                  map: null,
                  hash: "",
                  transfers: void 0
                });
                exports2.SerializableEmpty = SerializableEmpty;
                class AnnotationStorage {
                  #modified = false;
                  #storage = /* @__PURE__ */ new Map();
                  constructor() {
                    this.onSetModified = null;
                    this.onResetModified = null;
                    this.onAnnotationEditor = null;
                  }
                  getValue(key, defaultValue) {
                    const value = this.#storage.get(key);
                    if (value === void 0) {
                      return defaultValue;
                    }
                    return Object.assign(defaultValue, value);
                  }
                  getRawValue(key) {
                    return this.#storage.get(key);
                  }
                  remove(key) {
                    this.#storage.delete(key);
                    if (this.#storage.size === 0) {
                      this.resetModified();
                    }
                    if (typeof this.onAnnotationEditor === "function") {
                      for (const value of this.#storage.values()) {
                        if (value instanceof _editor.AnnotationEditor) {
                          return;
                        }
                      }
                      this.onAnnotationEditor(null);
                    }
                  }
                  setValue(key, value) {
                    const obj = this.#storage.get(key);
                    let modified = false;
                    if (obj !== void 0) {
                      for (const [entry, val] of Object.entries(value)) {
                        if (obj[entry] !== val) {
                          modified = true;
                          obj[entry] = val;
                        }
                      }
                    } else {
                      modified = true;
                      this.#storage.set(key, value);
                    }
                    if (modified) {
                      this.#setModified();
                    }
                    if (value instanceof _editor.AnnotationEditor && typeof this.onAnnotationEditor === "function") {
                      this.onAnnotationEditor(value.constructor._type);
                    }
                  }
                  has(key) {
                    return this.#storage.has(key);
                  }
                  getAll() {
                    return this.#storage.size > 0 ? (0, _util2.objectFromMap)(this.#storage) : null;
                  }
                  setAll(obj) {
                    for (const [key, val] of Object.entries(obj)) {
                      this.setValue(key, val);
                    }
                  }
                  get size() {
                    return this.#storage.size;
                  }
                  #setModified() {
                    if (!this.#modified) {
                      this.#modified = true;
                      if (typeof this.onSetModified === "function") {
                        this.onSetModified();
                      }
                    }
                  }
                  resetModified() {
                    if (this.#modified) {
                      this.#modified = false;
                      if (typeof this.onResetModified === "function") {
                        this.onResetModified();
                      }
                    }
                  }
                  get print() {
                    return new PrintAnnotationStorage(this);
                  }
                  get serializable() {
                    if (this.#storage.size === 0) {
                      return SerializableEmpty;
                    }
                    const map = /* @__PURE__ */ new Map(), hash = new _murmurhash.MurmurHash3_64(), transfers = [];
                    const context = /* @__PURE__ */ Object.create(null);
                    let hasBitmap = false;
                    for (const [key, val] of this.#storage) {
                      const serialized = val instanceof _editor.AnnotationEditor ? val.serialize(false, context) : val;
                      if (serialized) {
                        map.set(key, serialized);
                        hash.update(`${key}:${JSON.stringify(serialized)}`);
                        hasBitmap ||= !!serialized.bitmap;
                      }
                    }
                    if (hasBitmap) {
                      for (const value of map.values()) {
                        if (value.bitmap) {
                          transfers.push(value.bitmap);
                        }
                      }
                    }
                    return map.size > 0 ? {
                      map,
                      hash: hash.hexdigest(),
                      transfers
                    } : SerializableEmpty;
                  }
                }
                exports2.AnnotationStorage = AnnotationStorage;
                class PrintAnnotationStorage extends AnnotationStorage {
                  #serializable;
                  constructor(parent) {
                    super();
                    const {
                      map,
                      hash,
                      transfers
                    } = parent.serializable;
                    const clone = structuredClone(map, transfers ? {
                      transfer: transfers
                    } : null);
                    this.#serializable = {
                      map: clone,
                      hash,
                      transfers
                    };
                  }
                  get print() {
                    (0, _util2.unreachable)("Should not call PrintAnnotationStorage.print");
                  }
                  get serializable() {
                    return this.#serializable;
                  }
                }
                exports2.PrintAnnotationStorage = PrintAnnotationStorage;
              },
              /* 4 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.AnnotationEditor = void 0;
                var _tools = __w_pdfjs_require__2(5);
                var _util2 = __w_pdfjs_require__2(1);
                var _display_utils2 = __w_pdfjs_require__2(6);
                class AnnotationEditor {
                  #altText = "";
                  #altTextDecorative = false;
                  #altTextButton = null;
                  #altTextTooltip = null;
                  #altTextTooltipTimeout = null;
                  #keepAspectRatio = false;
                  #resizersDiv = null;
                  #boundFocusin = this.focusin.bind(this);
                  #boundFocusout = this.focusout.bind(this);
                  #hasBeenClicked = false;
                  #isEditing = false;
                  #isInEditMode = false;
                  _initialOptions = /* @__PURE__ */ Object.create(null);
                  _uiManager = null;
                  _focusEventsAllowed = true;
                  _l10nPromise = null;
                  #isDraggable = false;
                  #zIndex = AnnotationEditor._zIndex++;
                  static _borderLineWidth = -1;
                  static _colorManager = new _tools.ColorManager();
                  static _zIndex = 1;
                  static SMALL_EDITOR_SIZE = 0;
                  constructor(parameters) {
                    if (this.constructor === AnnotationEditor) {
                      (0, _util2.unreachable)("Cannot initialize AnnotationEditor.");
                    }
                    this.parent = parameters.parent;
                    this.id = parameters.id;
                    this.width = this.height = null;
                    this.pageIndex = parameters.parent.pageIndex;
                    this.name = parameters.name;
                    this.div = null;
                    this._uiManager = parameters.uiManager;
                    this.annotationElementId = null;
                    this._willKeepAspectRatio = false;
                    this._initialOptions.isCentered = parameters.isCentered;
                    this._structTreeParentId = null;
                    const {
                      rotation,
                      rawDims: {
                        pageWidth,
                        pageHeight,
                        pageX,
                        pageY
                      }
                    } = this.parent.viewport;
                    this.rotation = rotation;
                    this.pageRotation = (360 + rotation - this._uiManager.viewParameters.rotation) % 360;
                    this.pageDimensions = [pageWidth, pageHeight];
                    this.pageTranslation = [pageX, pageY];
                    const [width, height] = this.parentDimensions;
                    this.x = parameters.x / width;
                    this.y = parameters.y / height;
                    this.isAttachedToDOM = false;
                    this.deleted = false;
                  }
                  get editorType() {
                    return Object.getPrototypeOf(this).constructor._type;
                  }
                  static get _defaultLineColor() {
                    return (0, _util2.shadow)(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"));
                  }
                  static deleteAnnotationElement(editor) {
                    const fakeEditor = new FakeEditor({
                      id: editor.parent.getNextId(),
                      parent: editor.parent,
                      uiManager: editor._uiManager
                    });
                    fakeEditor.annotationElementId = editor.annotationElementId;
                    fakeEditor.deleted = true;
                    fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);
                  }
                  static initialize(l10n, options = null) {
                    AnnotationEditor._l10nPromise ||= new Map(["editor_alt_text_button_label", "editor_alt_text_edit_button_label", "editor_alt_text_decorative_tooltip"].map((str) => [str, l10n.get(str)]));
                    if (options?.strings) {
                      for (const str of options.strings) {
                        AnnotationEditor._l10nPromise.set(str, l10n.get(str));
                      }
                    }
                    if (AnnotationEditor._borderLineWidth !== -1) {
                      return;
                    }
                    const style = getComputedStyle(document.documentElement);
                    AnnotationEditor._borderLineWidth = parseFloat(style.getPropertyValue("--outline-width")) || 0;
                  }
                  static updateDefaultParams(_type, _value) {
                  }
                  static get defaultPropertiesToUpdate() {
                    return [];
                  }
                  static isHandlingMimeForPasting(mime) {
                    return false;
                  }
                  static paste(item, parent) {
                    (0, _util2.unreachable)("Not implemented");
                  }
                  get propertiesToUpdate() {
                    return [];
                  }
                  get _isDraggable() {
                    return this.#isDraggable;
                  }
                  set _isDraggable(value) {
                    this.#isDraggable = value;
                    this.div?.classList.toggle("draggable", value);
                  }
                  center() {
                    const [pageWidth, pageHeight] = this.pageDimensions;
                    switch (this.parentRotation) {
                      case 90:
                        this.x -= this.height * pageHeight / (pageWidth * 2);
                        this.y += this.width * pageWidth / (pageHeight * 2);
                        break;
                      case 180:
                        this.x += this.width / 2;
                        this.y += this.height / 2;
                        break;
                      case 270:
                        this.x += this.height * pageHeight / (pageWidth * 2);
                        this.y -= this.width * pageWidth / (pageHeight * 2);
                        break;
                      default:
                        this.x -= this.width / 2;
                        this.y -= this.height / 2;
                        break;
                    }
                    this.fixAndSetPosition();
                  }
                  addCommands(params) {
                    this._uiManager.addCommands(params);
                  }
                  get currentLayer() {
                    return this._uiManager.currentLayer;
                  }
                  setInBackground() {
                    this.div.style.zIndex = 0;
                  }
                  setInForeground() {
                    this.div.style.zIndex = this.#zIndex;
                  }
                  setParent(parent) {
                    if (parent !== null) {
                      this.pageIndex = parent.pageIndex;
                      this.pageDimensions = parent.pageDimensions;
                    }
                    this.parent = parent;
                  }
                  focusin(event) {
                    if (!this._focusEventsAllowed) {
                      return;
                    }
                    if (!this.#hasBeenClicked) {
                      this.parent.setSelected(this);
                    } else {
                      this.#hasBeenClicked = false;
                    }
                  }
                  focusout(event) {
                    if (!this._focusEventsAllowed) {
                      return;
                    }
                    if (!this.isAttachedToDOM) {
                      return;
                    }
                    const target = event.relatedTarget;
                    if (target?.closest(`#${this.id}`)) {
                      return;
                    }
                    event.preventDefault();
                    if (!this.parent?.isMultipleSelection) {
                      this.commitOrRemove();
                    }
                  }
                  commitOrRemove() {
                    if (this.isEmpty()) {
                      this.remove();
                    } else {
                      this.commit();
                    }
                  }
                  commit() {
                    this.addToAnnotationStorage();
                  }
                  addToAnnotationStorage() {
                    this._uiManager.addToAnnotationStorage(this);
                  }
                  setAt(x, y, tx, ty) {
                    const [width, height] = this.parentDimensions;
                    [tx, ty] = this.screenToPageTranslation(tx, ty);
                    this.x = (x + tx) / width;
                    this.y = (y + ty) / height;
                    this.fixAndSetPosition();
                  }
                  #translate([width, height], x, y) {
                    [x, y] = this.screenToPageTranslation(x, y);
                    this.x += x / width;
                    this.y += y / height;
                    this.fixAndSetPosition();
                  }
                  translate(x, y) {
                    this.#translate(this.parentDimensions, x, y);
                  }
                  translateInPage(x, y) {
                    this.#translate(this.pageDimensions, x, y);
                    this.div.scrollIntoView({
                      block: "nearest"
                    });
                  }
                  drag(tx, ty) {
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    this.x += tx / parentWidth;
                    this.y += ty / parentHeight;
                    if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {
                      const {
                        x: x2,
                        y: y2
                      } = this.div.getBoundingClientRect();
                      if (this.parent.findNewParent(this, x2, y2)) {
                        this.x -= Math.floor(this.x);
                        this.y -= Math.floor(this.y);
                      }
                    }
                    let {
                      x,
                      y
                    } = this;
                    const [bx, by] = this.#getBaseTranslation();
                    x += bx;
                    y += by;
                    this.div.style.left = `${(100 * x).toFixed(2)}%`;
                    this.div.style.top = `${(100 * y).toFixed(2)}%`;
                    this.div.scrollIntoView({
                      block: "nearest"
                    });
                  }
                  #getBaseTranslation() {
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    const {
                      _borderLineWidth
                    } = AnnotationEditor;
                    const x = _borderLineWidth / parentWidth;
                    const y = _borderLineWidth / parentHeight;
                    switch (this.rotation) {
                      case 90:
                        return [-x, y];
                      case 180:
                        return [x, y];
                      case 270:
                        return [x, -y];
                      default:
                        return [-x, -y];
                    }
                  }
                  fixAndSetPosition() {
                    const [pageWidth, pageHeight] = this.pageDimensions;
                    let {
                      x,
                      y,
                      width,
                      height
                    } = this;
                    width *= pageWidth;
                    height *= pageHeight;
                    x *= pageWidth;
                    y *= pageHeight;
                    switch (this.rotation) {
                      case 0:
                        x = Math.max(0, Math.min(pageWidth - width, x));
                        y = Math.max(0, Math.min(pageHeight - height, y));
                        break;
                      case 90:
                        x = Math.max(0, Math.min(pageWidth - height, x));
                        y = Math.min(pageHeight, Math.max(width, y));
                        break;
                      case 180:
                        x = Math.min(pageWidth, Math.max(width, x));
                        y = Math.min(pageHeight, Math.max(height, y));
                        break;
                      case 270:
                        x = Math.min(pageWidth, Math.max(height, x));
                        y = Math.max(0, Math.min(pageHeight - width, y));
                        break;
                    }
                    this.x = x /= pageWidth;
                    this.y = y /= pageHeight;
                    const [bx, by] = this.#getBaseTranslation();
                    x += bx;
                    y += by;
                    const {
                      style
                    } = this.div;
                    style.left = `${(100 * x).toFixed(2)}%`;
                    style.top = `${(100 * y).toFixed(2)}%`;
                    this.moveInDOM();
                  }
                  static #rotatePoint(x, y, angle) {
                    switch (angle) {
                      case 90:
                        return [y, -x];
                      case 180:
                        return [-x, -y];
                      case 270:
                        return [-y, x];
                      default:
                        return [x, y];
                    }
                  }
                  screenToPageTranslation(x, y) {
                    return AnnotationEditor.#rotatePoint(x, y, this.parentRotation);
                  }
                  pageTranslationToScreen(x, y) {
                    return AnnotationEditor.#rotatePoint(x, y, 360 - this.parentRotation);
                  }
                  #getRotationMatrix(rotation) {
                    switch (rotation) {
                      case 90: {
                        const [pageWidth, pageHeight] = this.pageDimensions;
                        return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];
                      }
                      case 180:
                        return [-1, 0, 0, -1];
                      case 270: {
                        const [pageWidth, pageHeight] = this.pageDimensions;
                        return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];
                      }
                      default:
                        return [1, 0, 0, 1];
                    }
                  }
                  get parentScale() {
                    return this._uiManager.viewParameters.realScale;
                  }
                  get parentRotation() {
                    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;
                  }
                  get parentDimensions() {
                    const {
                      parentScale,
                      pageDimensions: [pageWidth, pageHeight]
                    } = this;
                    const scaledWidth = pageWidth * parentScale;
                    const scaledHeight = pageHeight * parentScale;
                    return _util2.FeatureTest.isCSSRoundSupported ? [Math.round(scaledWidth), Math.round(scaledHeight)] : [scaledWidth, scaledHeight];
                  }
                  setDims(width, height) {
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    this.div.style.width = `${(100 * width / parentWidth).toFixed(2)}%`;
                    if (!this.#keepAspectRatio) {
                      this.div.style.height = `${(100 * height / parentHeight).toFixed(2)}%`;
                    }
                    this.#altTextButton?.classList.toggle("small", width < AnnotationEditor.SMALL_EDITOR_SIZE || height < AnnotationEditor.SMALL_EDITOR_SIZE);
                  }
                  fixDims() {
                    const {
                      style
                    } = this.div;
                    const {
                      height,
                      width
                    } = style;
                    const widthPercent = width.endsWith("%");
                    const heightPercent = !this.#keepAspectRatio && height.endsWith("%");
                    if (widthPercent && heightPercent) {
                      return;
                    }
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    if (!widthPercent) {
                      style.width = `${(100 * parseFloat(width) / parentWidth).toFixed(2)}%`;
                    }
                    if (!this.#keepAspectRatio && !heightPercent) {
                      style.height = `${(100 * parseFloat(height) / parentHeight).toFixed(2)}%`;
                    }
                  }
                  getInitialTranslation() {
                    return [0, 0];
                  }
                  #createResizers() {
                    if (this.#resizersDiv) {
                      return;
                    }
                    this.#resizersDiv = document.createElement("div");
                    this.#resizersDiv.classList.add("resizers");
                    const classes = ["topLeft", "topRight", "bottomRight", "bottomLeft"];
                    if (!this._willKeepAspectRatio) {
                      classes.push("topMiddle", "middleRight", "bottomMiddle", "middleLeft");
                    }
                    for (const name of classes) {
                      const div = document.createElement("div");
                      this.#resizersDiv.append(div);
                      div.classList.add("resizer", name);
                      div.addEventListener("pointerdown", this.#resizerPointerdown.bind(this, name));
                      div.addEventListener("contextmenu", _display_utils2.noContextMenu);
                    }
                    this.div.prepend(this.#resizersDiv);
                  }
                  #resizerPointerdown(name, event) {
                    event.preventDefault();
                    const {
                      isMac
                    } = _util2.FeatureTest.platform;
                    if (event.button !== 0 || event.ctrlKey && isMac) {
                      return;
                    }
                    const boundResizerPointermove = this.#resizerPointermove.bind(this, name);
                    const savedDraggable = this._isDraggable;
                    this._isDraggable = false;
                    const pointerMoveOptions = {
                      passive: true,
                      capture: true
                    };
                    window.addEventListener("pointermove", boundResizerPointermove, pointerMoveOptions);
                    const savedX = this.x;
                    const savedY = this.y;
                    const savedWidth = this.width;
                    const savedHeight = this.height;
                    const savedParentCursor = this.parent.div.style.cursor;
                    const savedCursor = this.div.style.cursor;
                    this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event.target).cursor;
                    const pointerUpCallback = () => {
                      this._isDraggable = savedDraggable;
                      window.removeEventListener("pointerup", pointerUpCallback);
                      window.removeEventListener("blur", pointerUpCallback);
                      window.removeEventListener("pointermove", boundResizerPointermove, pointerMoveOptions);
                      this.parent.div.style.cursor = savedParentCursor;
                      this.div.style.cursor = savedCursor;
                      const newX = this.x;
                      const newY = this.y;
                      const newWidth = this.width;
                      const newHeight = this.height;
                      if (newX === savedX && newY === savedY && newWidth === savedWidth && newHeight === savedHeight) {
                        return;
                      }
                      this.addCommands({
                        cmd: () => {
                          this.width = newWidth;
                          this.height = newHeight;
                          this.x = newX;
                          this.y = newY;
                          const [parentWidth, parentHeight] = this.parentDimensions;
                          this.setDims(parentWidth * newWidth, parentHeight * newHeight);
                          this.fixAndSetPosition();
                        },
                        undo: () => {
                          this.width = savedWidth;
                          this.height = savedHeight;
                          this.x = savedX;
                          this.y = savedY;
                          const [parentWidth, parentHeight] = this.parentDimensions;
                          this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);
                          this.fixAndSetPosition();
                        },
                        mustExec: true
                      });
                    };
                    window.addEventListener("pointerup", pointerUpCallback);
                    window.addEventListener("blur", pointerUpCallback);
                  }
                  #resizerPointermove(name, event) {
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    const savedX = this.x;
                    const savedY = this.y;
                    const savedWidth = this.width;
                    const savedHeight = this.height;
                    const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;
                    const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;
                    const round = (x) => Math.round(x * 1e4) / 1e4;
                    const rotationMatrix = this.#getRotationMatrix(this.rotation);
                    const transf = (x, y) => [rotationMatrix[0] * x + rotationMatrix[2] * y, rotationMatrix[1] * x + rotationMatrix[3] * y];
                    const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);
                    const invTransf = (x, y) => [invRotationMatrix[0] * x + invRotationMatrix[2] * y, invRotationMatrix[1] * x + invRotationMatrix[3] * y];
                    let getPoint;
                    let getOpposite;
                    let isDiagonal = false;
                    let isHorizontal = false;
                    switch (name) {
                      case "topLeft":
                        isDiagonal = true;
                        getPoint = (w, h) => [0, 0];
                        getOpposite = (w, h) => [w, h];
                        break;
                      case "topMiddle":
                        getPoint = (w, h) => [w / 2, 0];
                        getOpposite = (w, h) => [w / 2, h];
                        break;
                      case "topRight":
                        isDiagonal = true;
                        getPoint = (w, h) => [w, 0];
                        getOpposite = (w, h) => [0, h];
                        break;
                      case "middleRight":
                        isHorizontal = true;
                        getPoint = (w, h) => [w, h / 2];
                        getOpposite = (w, h) => [0, h / 2];
                        break;
                      case "bottomRight":
                        isDiagonal = true;
                        getPoint = (w, h) => [w, h];
                        getOpposite = (w, h) => [0, 0];
                        break;
                      case "bottomMiddle":
                        getPoint = (w, h) => [w / 2, h];
                        getOpposite = (w, h) => [w / 2, 0];
                        break;
                      case "bottomLeft":
                        isDiagonal = true;
                        getPoint = (w, h) => [0, h];
                        getOpposite = (w, h) => [w, 0];
                        break;
                      case "middleLeft":
                        isHorizontal = true;
                        getPoint = (w, h) => [0, h / 2];
                        getOpposite = (w, h) => [w, h / 2];
                        break;
                    }
                    const point = getPoint(savedWidth, savedHeight);
                    const oppositePoint = getOpposite(savedWidth, savedHeight);
                    let transfOppositePoint = transf(...oppositePoint);
                    const oppositeX = round(savedX + transfOppositePoint[0]);
                    const oppositeY = round(savedY + transfOppositePoint[1]);
                    let ratioX = 1;
                    let ratioY = 1;
                    let [deltaX, deltaY] = this.screenToPageTranslation(event.movementX, event.movementY);
                    [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);
                    if (isDiagonal) {
                      const oldDiag = Math.hypot(savedWidth, savedHeight);
                      ratioX = ratioY = Math.max(Math.min(Math.hypot(oppositePoint[0] - point[0] - deltaX, oppositePoint[1] - point[1] - deltaY) / oldDiag, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);
                    } else if (isHorizontal) {
                      ratioX = Math.max(minWidth, Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))) / savedWidth;
                    } else {
                      ratioY = Math.max(minHeight, Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))) / savedHeight;
                    }
                    const newWidth = round(savedWidth * ratioX);
                    const newHeight = round(savedHeight * ratioY);
                    transfOppositePoint = transf(...getOpposite(newWidth, newHeight));
                    const newX = oppositeX - transfOppositePoint[0];
                    const newY = oppositeY - transfOppositePoint[1];
                    this.width = newWidth;
                    this.height = newHeight;
                    this.x = newX;
                    this.y = newY;
                    this.setDims(parentWidth * newWidth, parentHeight * newHeight);
                    this.fixAndSetPosition();
                  }
                  async addAltTextButton() {
                    if (this.#altTextButton) {
                      return;
                    }
                    const altText = this.#altTextButton = document.createElement("button");
                    altText.className = "altText";
                    const msg = await AnnotationEditor._l10nPromise.get("editor_alt_text_button_label");
                    altText.textContent = msg;
                    altText.setAttribute("aria-label", msg);
                    altText.tabIndex = "0";
                    altText.addEventListener("contextmenu", _display_utils2.noContextMenu);
                    altText.addEventListener("pointerdown", (event) => event.stopPropagation());
                    altText.addEventListener("click", (event) => {
                      event.preventDefault();
                      this._uiManager.editAltText(this);
                    }, {
                      capture: true
                    });
                    altText.addEventListener("keydown", (event) => {
                      if (event.target === altText && event.key === "Enter") {
                        event.preventDefault();
                        this._uiManager.editAltText(this);
                      }
                    });
                    this.#setAltTextButtonState();
                    this.div.append(altText);
                    if (!AnnotationEditor.SMALL_EDITOR_SIZE) {
                      const PERCENT = 40;
                      AnnotationEditor.SMALL_EDITOR_SIZE = Math.min(128, Math.round(altText.getBoundingClientRect().width * (1 + PERCENT / 100)));
                    }
                  }
                  async #setAltTextButtonState() {
                    const button = this.#altTextButton;
                    if (!button) {
                      return;
                    }
                    if (!this.#altText && !this.#altTextDecorative) {
                      button.classList.remove("done");
                      this.#altTextTooltip?.remove();
                      return;
                    }
                    AnnotationEditor._l10nPromise.get("editor_alt_text_edit_button_label").then((msg) => {
                      button.setAttribute("aria-label", msg);
                    });
                    let tooltip = this.#altTextTooltip;
                    if (!tooltip) {
                      this.#altTextTooltip = tooltip = document.createElement("span");
                      tooltip.className = "tooltip";
                      tooltip.setAttribute("role", "tooltip");
                      const id = tooltip.id = `alt-text-tooltip-${this.id}`;
                      button.setAttribute("aria-describedby", id);
                      const DELAY_TO_SHOW_TOOLTIP = 100;
                      button.addEventListener("mouseenter", () => {
                        this.#altTextTooltipTimeout = setTimeout(() => {
                          this.#altTextTooltipTimeout = null;
                          this.#altTextTooltip.classList.add("show");
                          this._uiManager._eventBus.dispatch("reporttelemetry", {
                            source: this,
                            details: {
                              type: "editing",
                              subtype: this.editorType,
                              data: {
                                action: "alt_text_tooltip"
                              }
                            }
                          });
                        }, DELAY_TO_SHOW_TOOLTIP);
                      });
                      button.addEventListener("mouseleave", () => {
                        clearTimeout(this.#altTextTooltipTimeout);
                        this.#altTextTooltipTimeout = null;
                        this.#altTextTooltip?.classList.remove("show");
                      });
                    }
                    button.classList.add("done");
                    tooltip.innerText = this.#altTextDecorative ? await AnnotationEditor._l10nPromise.get("editor_alt_text_decorative_tooltip") : this.#altText;
                    if (!tooltip.parentNode) {
                      button.append(tooltip);
                    }
                  }
                  getClientDimensions() {
                    return this.div.getBoundingClientRect();
                  }
                  get altTextData() {
                    return {
                      altText: this.#altText,
                      decorative: this.#altTextDecorative
                    };
                  }
                  set altTextData({
                    altText,
                    decorative
                  }) {
                    if (this.#altText === altText && this.#altTextDecorative === decorative) {
                      return;
                    }
                    this.#altText = altText;
                    this.#altTextDecorative = decorative;
                    this.#setAltTextButtonState();
                  }
                  render() {
                    this.div = document.createElement("div");
                    this.div.setAttribute("data-editor-rotation", (360 - this.rotation) % 360);
                    this.div.className = this.name;
                    this.div.setAttribute("id", this.id);
                    this.div.setAttribute("tabIndex", 0);
                    this.setInForeground();
                    this.div.addEventListener("focusin", this.#boundFocusin);
                    this.div.addEventListener("focusout", this.#boundFocusout);
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    if (this.parentRotation % 180 !== 0) {
                      this.div.style.maxWidth = `${(100 * parentHeight / parentWidth).toFixed(2)}%`;
                      this.div.style.maxHeight = `${(100 * parentWidth / parentHeight).toFixed(2)}%`;
                    }
                    const [tx, ty] = this.getInitialTranslation();
                    this.translate(tx, ty);
                    (0, _tools.bindEvents)(this, this.div, ["pointerdown"]);
                    return this.div;
                  }
                  pointerdown(event) {
                    const {
                      isMac
                    } = _util2.FeatureTest.platform;
                    if (event.button !== 0 || event.ctrlKey && isMac) {
                      event.preventDefault();
                      return;
                    }
                    this.#hasBeenClicked = true;
                    this.#setUpDragSession(event);
                  }
                  #setUpDragSession(event) {
                    if (!this._isDraggable) {
                      return;
                    }
                    const isSelected = this._uiManager.isSelected(this);
                    this._uiManager.setUpDragSession();
                    let pointerMoveOptions, pointerMoveCallback;
                    if (isSelected) {
                      pointerMoveOptions = {
                        passive: true,
                        capture: true
                      };
                      pointerMoveCallback = (e) => {
                        const [tx, ty] = this.screenToPageTranslation(e.movementX, e.movementY);
                        this._uiManager.dragSelectedEditors(tx, ty);
                      };
                      window.addEventListener("pointermove", pointerMoveCallback, pointerMoveOptions);
                    }
                    const pointerUpCallback = () => {
                      window.removeEventListener("pointerup", pointerUpCallback);
                      window.removeEventListener("blur", pointerUpCallback);
                      if (isSelected) {
                        window.removeEventListener("pointermove", pointerMoveCallback, pointerMoveOptions);
                      }
                      this.#hasBeenClicked = false;
                      if (!this._uiManager.endDragSession()) {
                        const {
                          isMac
                        } = _util2.FeatureTest.platform;
                        if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {
                          this.parent.toggleSelected(this);
                        } else {
                          this.parent.setSelected(this);
                        }
                      }
                    };
                    window.addEventListener("pointerup", pointerUpCallback);
                    window.addEventListener("blur", pointerUpCallback);
                  }
                  moveInDOM() {
                    this.parent?.moveEditorInDOM(this);
                  }
                  _setParentAndPosition(parent, x, y) {
                    parent.changeParent(this);
                    this.x = x;
                    this.y = y;
                    this.fixAndSetPosition();
                  }
                  getRect(tx, ty) {
                    const scale = this.parentScale;
                    const [pageWidth, pageHeight] = this.pageDimensions;
                    const [pageX, pageY] = this.pageTranslation;
                    const shiftX = tx / scale;
                    const shiftY = ty / scale;
                    const x = this.x * pageWidth;
                    const y = this.y * pageHeight;
                    const width = this.width * pageWidth;
                    const height = this.height * pageHeight;
                    switch (this.rotation) {
                      case 0:
                        return [x + shiftX + pageX, pageHeight - y - shiftY - height + pageY, x + shiftX + width + pageX, pageHeight - y - shiftY + pageY];
                      case 90:
                        return [x + shiftY + pageX, pageHeight - y + shiftX + pageY, x + shiftY + height + pageX, pageHeight - y + shiftX + width + pageY];
                      case 180:
                        return [x - shiftX - width + pageX, pageHeight - y + shiftY + pageY, x - shiftX + pageX, pageHeight - y + shiftY + height + pageY];
                      case 270:
                        return [x - shiftY - height + pageX, pageHeight - y - shiftX - width + pageY, x - shiftY + pageX, pageHeight - y - shiftX + pageY];
                      default:
                        throw new Error("Invalid rotation");
                    }
                  }
                  getRectInCurrentCoords(rect, pageHeight) {
                    const [x1, y1, x2, y2] = rect;
                    const width = x2 - x1;
                    const height = y2 - y1;
                    switch (this.rotation) {
                      case 0:
                        return [x1, pageHeight - y2, width, height];
                      case 90:
                        return [x1, pageHeight - y1, height, width];
                      case 180:
                        return [x2, pageHeight - y1, width, height];
                      case 270:
                        return [x2, pageHeight - y2, height, width];
                      default:
                        throw new Error("Invalid rotation");
                    }
                  }
                  onceAdded() {
                  }
                  isEmpty() {
                    return false;
                  }
                  enableEditMode() {
                    this.#isInEditMode = true;
                  }
                  disableEditMode() {
                    this.#isInEditMode = false;
                  }
                  isInEditMode() {
                    return this.#isInEditMode;
                  }
                  shouldGetKeyboardEvents() {
                    return false;
                  }
                  needsToBeRebuilt() {
                    return this.div && !this.isAttachedToDOM;
                  }
                  rebuild() {
                    this.div?.addEventListener("focusin", this.#boundFocusin);
                    this.div?.addEventListener("focusout", this.#boundFocusout);
                  }
                  serialize(isForCopying = false, context = null) {
                    (0, _util2.unreachable)("An editor must be serializable");
                  }
                  static deserialize(data, parent, uiManager) {
                    const editor = new this.prototype.constructor({
                      parent,
                      id: parent.getNextId(),
                      uiManager
                    });
                    editor.rotation = data.rotation;
                    const [pageWidth, pageHeight] = editor.pageDimensions;
                    const [x, y, width, height] = editor.getRectInCurrentCoords(data.rect, pageHeight);
                    editor.x = x / pageWidth;
                    editor.y = y / pageHeight;
                    editor.width = width / pageWidth;
                    editor.height = height / pageHeight;
                    return editor;
                  }
                  remove() {
                    this.div.removeEventListener("focusin", this.#boundFocusin);
                    this.div.removeEventListener("focusout", this.#boundFocusout);
                    if (!this.isEmpty()) {
                      this.commit();
                    }
                    if (this.parent) {
                      this.parent.remove(this);
                    } else {
                      this._uiManager.removeEditor(this);
                    }
                    this.#altTextButton?.remove();
                    this.#altTextButton = null;
                    this.#altTextTooltip = null;
                  }
                  get isResizable() {
                    return false;
                  }
                  makeResizable() {
                    if (this.isResizable) {
                      this.#createResizers();
                      this.#resizersDiv.classList.remove("hidden");
                    }
                  }
                  select() {
                    this.makeResizable();
                    this.div?.classList.add("selectedEditor");
                  }
                  unselect() {
                    this.#resizersDiv?.classList.add("hidden");
                    this.div?.classList.remove("selectedEditor");
                    if (this.div?.contains(document.activeElement)) {
                      this._uiManager.currentLayer.div.focus();
                    }
                  }
                  updateParams(type, value) {
                  }
                  disableEditing() {
                    if (this.#altTextButton) {
                      this.#altTextButton.hidden = true;
                    }
                  }
                  enableEditing() {
                    if (this.#altTextButton) {
                      this.#altTextButton.hidden = false;
                    }
                  }
                  enterInEditMode() {
                  }
                  get contentDiv() {
                    return this.div;
                  }
                  get isEditing() {
                    return this.#isEditing;
                  }
                  set isEditing(value) {
                    this.#isEditing = value;
                    if (!this.parent) {
                      return;
                    }
                    if (value) {
                      this.parent.setSelected(this);
                      this.parent.setActiveEditor(this);
                    } else {
                      this.parent.setActiveEditor(null);
                    }
                  }
                  setAspectRatio(width, height) {
                    this.#keepAspectRatio = true;
                    const aspectRatio = width / height;
                    const {
                      style
                    } = this.div;
                    style.aspectRatio = aspectRatio;
                    style.height = "auto";
                  }
                  static get MIN_SIZE() {
                    return 16;
                  }
                }
                exports2.AnnotationEditor = AnnotationEditor;
                class FakeEditor extends AnnotationEditor {
                  constructor(params) {
                    super(params);
                    this.annotationElementId = params.annotationElementId;
                    this.deleted = true;
                  }
                  serialize() {
                    return {
                      id: this.annotationElementId,
                      deleted: true,
                      pageIndex: this.pageIndex
                    };
                  }
                }
              },
              /* 5 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.KeyboardManager = exports2.CommandManager = exports2.ColorManager = exports2.AnnotationEditorUIManager = void 0;
                exports2.bindEvents = bindEvents;
                exports2.opacityToHex = opacityToHex;
                var _util2 = __w_pdfjs_require__2(1);
                var _display_utils2 = __w_pdfjs_require__2(6);
                function bindEvents(obj, element, names) {
                  for (const name of names) {
                    element.addEventListener(name, obj[name].bind(obj));
                  }
                }
                function opacityToHex(opacity) {
                  return Math.round(Math.min(255, Math.max(1, 255 * opacity))).toString(16).padStart(2, "0");
                }
                class IdManager {
                  #id = 0;
                  getId() {
                    return `${_util2.AnnotationEditorPrefix}${this.#id++}`;
                  }
                }
                class ImageManager {
                  #baseId = (0, _util2.getUuid)();
                  #id = 0;
                  #cache = null;
                  static get _isSVGFittingCanvas() {
                    const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>`;
                    const canvas = new OffscreenCanvas(1, 3);
                    const ctx = canvas.getContext("2d");
                    const image = new Image();
                    image.src = svg;
                    const promise = image.decode().then(() => {
                      ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);
                      return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;
                    });
                    return (0, _util2.shadow)(this, "_isSVGFittingCanvas", promise);
                  }
                  async #get(key, rawData) {
                    this.#cache ||= /* @__PURE__ */ new Map();
                    let data = this.#cache.get(key);
                    if (data === null) {
                      return null;
                    }
                    if (data?.bitmap) {
                      data.refCounter += 1;
                      return data;
                    }
                    try {
                      data ||= {
                        bitmap: null,
                        id: `image_${this.#baseId}_${this.#id++}`,
                        refCounter: 0,
                        isSvg: false
                      };
                      let image;
                      if (typeof rawData === "string") {
                        data.url = rawData;
                        const response = await fetch(rawData);
                        if (!response.ok) {
                          throw new Error(response.statusText);
                        }
                        image = await response.blob();
                      } else {
                        image = data.file = rawData;
                      }
                      if (image.type === "image/svg+xml") {
                        const mustRemoveAspectRatioPromise = ImageManager._isSVGFittingCanvas;
                        const fileReader = new FileReader();
                        const imageElement = new Image();
                        const imagePromise = new Promise((resolve, reject) => {
                          imageElement.onload = () => {
                            data.bitmap = imageElement;
                            data.isSvg = true;
                            resolve();
                          };
                          fileReader.onload = async () => {
                            const url = data.svgUrl = fileReader.result;
                            imageElement.src = await mustRemoveAspectRatioPromise ? `${url}#svgView(preserveAspectRatio(none))` : url;
                          };
                          imageElement.onerror = fileReader.onerror = reject;
                        });
                        fileReader.readAsDataURL(image);
                        await imagePromise;
                      } else {
                        data.bitmap = await createImageBitmap(image);
                      }
                      data.refCounter = 1;
                    } catch (e) {
                      console.error(e);
                      data = null;
                    }
                    this.#cache.set(key, data);
                    if (data) {
                      this.#cache.set(data.id, data);
                    }
                    return data;
                  }
                  async getFromFile(file) {
                    const {
                      lastModified,
                      name,
                      size,
                      type
                    } = file;
                    return this.#get(`${lastModified}_${name}_${size}_${type}`, file);
                  }
                  async getFromUrl(url) {
                    return this.#get(url, url);
                  }
                  async getFromId(id) {
                    this.#cache ||= /* @__PURE__ */ new Map();
                    const data = this.#cache.get(id);
                    if (!data) {
                      return null;
                    }
                    if (data.bitmap) {
                      data.refCounter += 1;
                      return data;
                    }
                    if (data.file) {
                      return this.getFromFile(data.file);
                    }
                    return this.getFromUrl(data.url);
                  }
                  getSvgUrl(id) {
                    const data = this.#cache.get(id);
                    if (!data?.isSvg) {
                      return null;
                    }
                    return data.svgUrl;
                  }
                  deleteId(id) {
                    this.#cache ||= /* @__PURE__ */ new Map();
                    const data = this.#cache.get(id);
                    if (!data) {
                      return;
                    }
                    data.refCounter -= 1;
                    if (data.refCounter !== 0) {
                      return;
                    }
                    data.bitmap = null;
                  }
                  isValidId(id) {
                    return id.startsWith(`image_${this.#baseId}_`);
                  }
                }
                class CommandManager {
                  #commands = [];
                  #locked = false;
                  #maxSize;
                  #position = -1;
                  constructor(maxSize = 128) {
                    this.#maxSize = maxSize;
                  }
                  add({
                    cmd,
                    undo,
                    mustExec,
                    type = NaN,
                    overwriteIfSameType = false,
                    keepUndo = false
                  }) {
                    if (mustExec) {
                      cmd();
                    }
                    if (this.#locked) {
                      return;
                    }
                    const save = {
                      cmd,
                      undo,
                      type
                    };
                    if (this.#position === -1) {
                      if (this.#commands.length > 0) {
                        this.#commands.length = 0;
                      }
                      this.#position = 0;
                      this.#commands.push(save);
                      return;
                    }
                    if (overwriteIfSameType && this.#commands[this.#position].type === type) {
                      if (keepUndo) {
                        save.undo = this.#commands[this.#position].undo;
                      }
                      this.#commands[this.#position] = save;
                      return;
                    }
                    const next = this.#position + 1;
                    if (next === this.#maxSize) {
                      this.#commands.splice(0, 1);
                    } else {
                      this.#position = next;
                      if (next < this.#commands.length) {
                        this.#commands.splice(next);
                      }
                    }
                    this.#commands.push(save);
                  }
                  undo() {
                    if (this.#position === -1) {
                      return;
                    }
                    this.#locked = true;
                    this.#commands[this.#position].undo();
                    this.#locked = false;
                    this.#position -= 1;
                  }
                  redo() {
                    if (this.#position < this.#commands.length - 1) {
                      this.#position += 1;
                      this.#locked = true;
                      this.#commands[this.#position].cmd();
                      this.#locked = false;
                    }
                  }
                  hasSomethingToUndo() {
                    return this.#position !== -1;
                  }
                  hasSomethingToRedo() {
                    return this.#position < this.#commands.length - 1;
                  }
                  destroy() {
                    this.#commands = null;
                  }
                }
                exports2.CommandManager = CommandManager;
                class KeyboardManager {
                  constructor(callbacks) {
                    this.buffer = [];
                    this.callbacks = /* @__PURE__ */ new Map();
                    this.allKeys = /* @__PURE__ */ new Set();
                    const {
                      isMac
                    } = _util2.FeatureTest.platform;
                    for (const [keys, callback, options = {}] of callbacks) {
                      for (const key of keys) {
                        const isMacKey = key.startsWith("mac+");
                        if (isMac && isMacKey) {
                          this.callbacks.set(key.slice(4), {
                            callback,
                            options
                          });
                          this.allKeys.add(key.split("+").at(-1));
                        } else if (!isMac && !isMacKey) {
                          this.callbacks.set(key, {
                            callback,
                            options
                          });
                          this.allKeys.add(key.split("+").at(-1));
                        }
                      }
                    }
                  }
                  #serialize(event) {
                    if (event.altKey) {
                      this.buffer.push("alt");
                    }
                    if (event.ctrlKey) {
                      this.buffer.push("ctrl");
                    }
                    if (event.metaKey) {
                      this.buffer.push("meta");
                    }
                    if (event.shiftKey) {
                      this.buffer.push("shift");
                    }
                    this.buffer.push(event.key);
                    const str = this.buffer.join("+");
                    this.buffer.length = 0;
                    return str;
                  }
                  exec(self, event) {
                    if (!this.allKeys.has(event.key)) {
                      return;
                    }
                    const info = this.callbacks.get(this.#serialize(event));
                    if (!info) {
                      return;
                    }
                    const {
                      callback,
                      options: {
                        bubbles = false,
                        args = [],
                        checker = null
                      }
                    } = info;
                    if (checker && !checker(self, event)) {
                      return;
                    }
                    callback.bind(self, ...args)();
                    if (!bubbles) {
                      event.stopPropagation();
                      event.preventDefault();
                    }
                  }
                }
                exports2.KeyboardManager = KeyboardManager;
                class ColorManager {
                  static _colorsMapping = /* @__PURE__ */ new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]);
                  get _colors() {
                    const colors = /* @__PURE__ */ new Map([["CanvasText", null], ["Canvas", null]]);
                    (0, _display_utils2.getColorValues)(colors);
                    return (0, _util2.shadow)(this, "_colors", colors);
                  }
                  convert(color) {
                    const rgb = (0, _display_utils2.getRGB)(color);
                    if (!window.matchMedia("(forced-colors: active)").matches) {
                      return rgb;
                    }
                    for (const [name, RGB] of this._colors) {
                      if (RGB.every((x, i) => x === rgb[i])) {
                        return ColorManager._colorsMapping.get(name);
                      }
                    }
                    return rgb;
                  }
                  getHexCode(name) {
                    const rgb = this._colors.get(name);
                    if (!rgb) {
                      return name;
                    }
                    return _util2.Util.makeHexColor(...rgb);
                  }
                }
                exports2.ColorManager = ColorManager;
                class AnnotationEditorUIManager {
                  #activeEditor = null;
                  #allEditors = /* @__PURE__ */ new Map();
                  #allLayers = /* @__PURE__ */ new Map();
                  #altTextManager = null;
                  #annotationStorage = null;
                  #commandManager = new CommandManager();
                  #currentPageIndex = 0;
                  #deletedAnnotationsElementIds = /* @__PURE__ */ new Set();
                  #draggingEditors = null;
                  #editorTypes = null;
                  #editorsToRescale = /* @__PURE__ */ new Set();
                  #filterFactory = null;
                  #idManager = new IdManager();
                  #isEnabled = false;
                  #isWaiting = false;
                  #lastActiveElement = null;
                  #mode = _util2.AnnotationEditorType.NONE;
                  #selectedEditors = /* @__PURE__ */ new Set();
                  #pageColors = null;
                  #boundBlur = this.blur.bind(this);
                  #boundFocus = this.focus.bind(this);
                  #boundCopy = this.copy.bind(this);
                  #boundCut = this.cut.bind(this);
                  #boundPaste = this.paste.bind(this);
                  #boundKeydown = this.keydown.bind(this);
                  #boundOnEditingAction = this.onEditingAction.bind(this);
                  #boundOnPageChanging = this.onPageChanging.bind(this);
                  #boundOnScaleChanging = this.onScaleChanging.bind(this);
                  #boundOnRotationChanging = this.onRotationChanging.bind(this);
                  #previousStates = {
                    isEditing: false,
                    isEmpty: true,
                    hasSomethingToUndo: false,
                    hasSomethingToRedo: false,
                    hasSelectedEditor: false
                  };
                  #translation = [0, 0];
                  #translationTimeoutId = null;
                  #container = null;
                  #viewer = null;
                  static TRANSLATE_SMALL = 1;
                  static TRANSLATE_BIG = 10;
                  static get _keyboardManager() {
                    const proto = AnnotationEditorUIManager.prototype;
                    const arrowChecker = (self) => {
                      const {
                        activeElement
                      } = document;
                      return activeElement && self.#container.contains(activeElement) && self.hasSomethingToControl();
                    };
                    const small = this.TRANSLATE_SMALL;
                    const big = this.TRANSLATE_BIG;
                    return (0, _util2.shadow)(this, "_keyboardManager", new KeyboardManager([[["ctrl+a", "mac+meta+a"], proto.selectAll], [["ctrl+z", "mac+meta+z"], proto.undo], [["ctrl+y", "ctrl+shift+z", "mac+meta+shift+z", "ctrl+shift+Z", "mac+meta+shift+Z"], proto.redo], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete", "mac+Delete"], proto.delete], [["Escape", "mac+Escape"], proto.unselectAll], [["ArrowLeft", "mac+ArrowLeft"], proto.translateSelectedEditors, {
                      args: [-small, 0],
                      checker: arrowChecker
                    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], proto.translateSelectedEditors, {
                      args: [-big, 0],
                      checker: arrowChecker
                    }], [["ArrowRight", "mac+ArrowRight"], proto.translateSelectedEditors, {
                      args: [small, 0],
                      checker: arrowChecker
                    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], proto.translateSelectedEditors, {
                      args: [big, 0],
                      checker: arrowChecker
                    }], [["ArrowUp", "mac+ArrowUp"], proto.translateSelectedEditors, {
                      args: [0, -small],
                      checker: arrowChecker
                    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], proto.translateSelectedEditors, {
                      args: [0, -big],
                      checker: arrowChecker
                    }], [["ArrowDown", "mac+ArrowDown"], proto.translateSelectedEditors, {
                      args: [0, small],
                      checker: arrowChecker
                    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], proto.translateSelectedEditors, {
                      args: [0, big],
                      checker: arrowChecker
                    }]]));
                  }
                  constructor(container, viewer, altTextManager, eventBus, pdfDocument, pageColors) {
                    this.#container = container;
                    this.#viewer = viewer;
                    this.#altTextManager = altTextManager;
                    this._eventBus = eventBus;
                    this._eventBus._on("editingaction", this.#boundOnEditingAction);
                    this._eventBus._on("pagechanging", this.#boundOnPageChanging);
                    this._eventBus._on("scalechanging", this.#boundOnScaleChanging);
                    this._eventBus._on("rotationchanging", this.#boundOnRotationChanging);
                    this.#annotationStorage = pdfDocument.annotationStorage;
                    this.#filterFactory = pdfDocument.filterFactory;
                    this.#pageColors = pageColors;
                    this.viewParameters = {
                      realScale: _display_utils2.PixelsPerInch.PDF_TO_CSS_UNITS,
                      rotation: 0
                    };
                  }
                  destroy() {
                    this.#removeKeyboardManager();
                    this.#removeFocusManager();
                    this._eventBus._off("editingaction", this.#boundOnEditingAction);
                    this._eventBus._off("pagechanging", this.#boundOnPageChanging);
                    this._eventBus._off("scalechanging", this.#boundOnScaleChanging);
                    this._eventBus._off("rotationchanging", this.#boundOnRotationChanging);
                    for (const layer of this.#allLayers.values()) {
                      layer.destroy();
                    }
                    this.#allLayers.clear();
                    this.#allEditors.clear();
                    this.#editorsToRescale.clear();
                    this.#activeEditor = null;
                    this.#selectedEditors.clear();
                    this.#commandManager.destroy();
                    this.#altTextManager.destroy();
                  }
                  get hcmFilter() {
                    return (0, _util2.shadow)(this, "hcmFilter", this.#pageColors ? this.#filterFactory.addHCMFilter(this.#pageColors.foreground, this.#pageColors.background) : "none");
                  }
                  get direction() {
                    return (0, _util2.shadow)(this, "direction", getComputedStyle(this.#container).direction);
                  }
                  editAltText(editor) {
                    this.#altTextManager?.editAltText(this, editor);
                  }
                  onPageChanging({
                    pageNumber
                  }) {
                    this.#currentPageIndex = pageNumber - 1;
                  }
                  focusMainContainer() {
                    this.#container.focus();
                  }
                  findParent(x, y) {
                    for (const layer of this.#allLayers.values()) {
                      const {
                        x: layerX,
                        y: layerY,
                        width,
                        height
                      } = layer.div.getBoundingClientRect();
                      if (x >= layerX && x <= layerX + width && y >= layerY && y <= layerY + height) {
                        return layer;
                      }
                    }
                    return null;
                  }
                  disableUserSelect(value = false) {
                    this.#viewer.classList.toggle("noUserSelect", value);
                  }
                  addShouldRescale(editor) {
                    this.#editorsToRescale.add(editor);
                  }
                  removeShouldRescale(editor) {
                    this.#editorsToRescale.delete(editor);
                  }
                  onScaleChanging({
                    scale
                  }) {
                    this.commitOrRemove();
                    this.viewParameters.realScale = scale * _display_utils2.PixelsPerInch.PDF_TO_CSS_UNITS;
                    for (const editor of this.#editorsToRescale) {
                      editor.onScaleChanging();
                    }
                  }
                  onRotationChanging({
                    pagesRotation
                  }) {
                    this.commitOrRemove();
                    this.viewParameters.rotation = pagesRotation;
                  }
                  addToAnnotationStorage(editor) {
                    if (!editor.isEmpty() && this.#annotationStorage && !this.#annotationStorage.has(editor.id)) {
                      this.#annotationStorage.setValue(editor.id, editor);
                    }
                  }
                  #addFocusManager() {
                    window.addEventListener("focus", this.#boundFocus);
                    window.addEventListener("blur", this.#boundBlur);
                  }
                  #removeFocusManager() {
                    window.removeEventListener("focus", this.#boundFocus);
                    window.removeEventListener("blur", this.#boundBlur);
                  }
                  blur() {
                    if (!this.hasSelection) {
                      return;
                    }
                    const {
                      activeElement
                    } = document;
                    for (const editor of this.#selectedEditors) {
                      if (editor.div.contains(activeElement)) {
                        this.#lastActiveElement = [editor, activeElement];
                        editor._focusEventsAllowed = false;
                        break;
                      }
                    }
                  }
                  focus() {
                    if (!this.#lastActiveElement) {
                      return;
                    }
                    const [lastEditor, lastActiveElement] = this.#lastActiveElement;
                    this.#lastActiveElement = null;
                    lastActiveElement.addEventListener("focusin", () => {
                      lastEditor._focusEventsAllowed = true;
                    }, {
                      once: true
                    });
                    lastActiveElement.focus();
                  }
                  #addKeyboardManager() {
                    window.addEventListener("keydown", this.#boundKeydown, {
                      capture: true
                    });
                  }
                  #removeKeyboardManager() {
                    window.removeEventListener("keydown", this.#boundKeydown, {
                      capture: true
                    });
                  }
                  #addCopyPasteListeners() {
                    document.addEventListener("copy", this.#boundCopy);
                    document.addEventListener("cut", this.#boundCut);
                    document.addEventListener("paste", this.#boundPaste);
                  }
                  #removeCopyPasteListeners() {
                    document.removeEventListener("copy", this.#boundCopy);
                    document.removeEventListener("cut", this.#boundCut);
                    document.removeEventListener("paste", this.#boundPaste);
                  }
                  addEditListeners() {
                    this.#addKeyboardManager();
                    this.#addCopyPasteListeners();
                  }
                  removeEditListeners() {
                    this.#removeKeyboardManager();
                    this.#removeCopyPasteListeners();
                  }
                  copy(event) {
                    event.preventDefault();
                    this.#activeEditor?.commitOrRemove();
                    if (!this.hasSelection) {
                      return;
                    }
                    const editors = [];
                    for (const editor of this.#selectedEditors) {
                      const serialized = editor.serialize(true);
                      if (serialized) {
                        editors.push(serialized);
                      }
                    }
                    if (editors.length === 0) {
                      return;
                    }
                    event.clipboardData.setData("application/pdfjs", JSON.stringify(editors));
                  }
                  cut(event) {
                    this.copy(event);
                    this.delete();
                  }
                  paste(event) {
                    event.preventDefault();
                    const {
                      clipboardData
                    } = event;
                    for (const item of clipboardData.items) {
                      for (const editorType of this.#editorTypes) {
                        if (editorType.isHandlingMimeForPasting(item.type)) {
                          editorType.paste(item, this.currentLayer);
                          return;
                        }
                      }
                    }
                    let data = clipboardData.getData("application/pdfjs");
                    if (!data) {
                      return;
                    }
                    try {
                      data = JSON.parse(data);
                    } catch (ex) {
                      (0, _util2.warn)(`paste: "${ex.message}".`);
                      return;
                    }
                    if (!Array.isArray(data)) {
                      return;
                    }
                    this.unselectAll();
                    const layer = this.currentLayer;
                    try {
                      const newEditors = [];
                      for (const editor of data) {
                        const deserializedEditor = layer.deserialize(editor);
                        if (!deserializedEditor) {
                          return;
                        }
                        newEditors.push(deserializedEditor);
                      }
                      const cmd = () => {
                        for (const editor of newEditors) {
                          this.#addEditorToLayer(editor);
                        }
                        this.#selectEditors(newEditors);
                      };
                      const undo = () => {
                        for (const editor of newEditors) {
                          editor.remove();
                        }
                      };
                      this.addCommands({
                        cmd,
                        undo,
                        mustExec: true
                      });
                    } catch (ex) {
                      (0, _util2.warn)(`paste: "${ex.message}".`);
                    }
                  }
                  keydown(event) {
                    if (!this.getActive()?.shouldGetKeyboardEvents()) {
                      AnnotationEditorUIManager._keyboardManager.exec(this, event);
                    }
                  }
                  onEditingAction(details) {
                    if (["undo", "redo", "delete", "selectAll"].includes(details.name)) {
                      this[details.name]();
                    }
                  }
                  #dispatchUpdateStates(details) {
                    const hasChanged = Object.entries(details).some(([key, value]) => this.#previousStates[key] !== value);
                    if (hasChanged) {
                      this._eventBus.dispatch("annotationeditorstateschanged", {
                        source: this,
                        details: Object.assign(this.#previousStates, details)
                      });
                    }
                  }
                  #dispatchUpdateUI(details) {
                    this._eventBus.dispatch("annotationeditorparamschanged", {
                      source: this,
                      details
                    });
                  }
                  setEditingState(isEditing) {
                    if (isEditing) {
                      this.#addFocusManager();
                      this.#addKeyboardManager();
                      this.#addCopyPasteListeners();
                      this.#dispatchUpdateStates({
                        isEditing: this.#mode !== _util2.AnnotationEditorType.NONE,
                        isEmpty: this.#isEmpty(),
                        hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),
                        hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),
                        hasSelectedEditor: false
                      });
                    } else {
                      this.#removeFocusManager();
                      this.#removeKeyboardManager();
                      this.#removeCopyPasteListeners();
                      this.#dispatchUpdateStates({
                        isEditing: false
                      });
                      this.disableUserSelect(false);
                    }
                  }
                  registerEditorTypes(types) {
                    if (this.#editorTypes) {
                      return;
                    }
                    this.#editorTypes = types;
                    for (const editorType of this.#editorTypes) {
                      this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);
                    }
                  }
                  getId() {
                    return this.#idManager.getId();
                  }
                  get currentLayer() {
                    return this.#allLayers.get(this.#currentPageIndex);
                  }
                  getLayer(pageIndex) {
                    return this.#allLayers.get(pageIndex);
                  }
                  get currentPageIndex() {
                    return this.#currentPageIndex;
                  }
                  addLayer(layer) {
                    this.#allLayers.set(layer.pageIndex, layer);
                    if (this.#isEnabled) {
                      layer.enable();
                    } else {
                      layer.disable();
                    }
                  }
                  removeLayer(layer) {
                    this.#allLayers.delete(layer.pageIndex);
                  }
                  updateMode(mode, editId = null) {
                    if (this.#mode === mode) {
                      return;
                    }
                    this.#mode = mode;
                    if (mode === _util2.AnnotationEditorType.NONE) {
                      this.setEditingState(false);
                      this.#disableAll();
                      return;
                    }
                    this.setEditingState(true);
                    this.#enableAll();
                    this.unselectAll();
                    for (const layer of this.#allLayers.values()) {
                      layer.updateMode(mode);
                    }
                    if (!editId) {
                      return;
                    }
                    for (const editor of this.#allEditors.values()) {
                      if (editor.annotationElementId === editId) {
                        this.setSelected(editor);
                        editor.enterInEditMode();
                        break;
                      }
                    }
                  }
                  updateToolbar(mode) {
                    if (mode === this.#mode) {
                      return;
                    }
                    this._eventBus.dispatch("switchannotationeditormode", {
                      source: this,
                      mode
                    });
                  }
                  updateParams(type, value) {
                    if (!this.#editorTypes) {
                      return;
                    }
                    if (type === _util2.AnnotationEditorParamsType.CREATE) {
                      this.currentLayer.addNewEditor(type);
                      return;
                    }
                    for (const editor of this.#selectedEditors) {
                      editor.updateParams(type, value);
                    }
                    for (const editorType of this.#editorTypes) {
                      editorType.updateDefaultParams(type, value);
                    }
                  }
                  enableWaiting(mustWait = false) {
                    if (this.#isWaiting === mustWait) {
                      return;
                    }
                    this.#isWaiting = mustWait;
                    for (const layer of this.#allLayers.values()) {
                      if (mustWait) {
                        layer.disableClick();
                      } else {
                        layer.enableClick();
                      }
                      layer.div.classList.toggle("waiting", mustWait);
                    }
                  }
                  #enableAll() {
                    if (!this.#isEnabled) {
                      this.#isEnabled = true;
                      for (const layer of this.#allLayers.values()) {
                        layer.enable();
                      }
                    }
                  }
                  #disableAll() {
                    this.unselectAll();
                    if (this.#isEnabled) {
                      this.#isEnabled = false;
                      for (const layer of this.#allLayers.values()) {
                        layer.disable();
                      }
                    }
                  }
                  getEditors(pageIndex) {
                    const editors = [];
                    for (const editor of this.#allEditors.values()) {
                      if (editor.pageIndex === pageIndex) {
                        editors.push(editor);
                      }
                    }
                    return editors;
                  }
                  getEditor(id) {
                    return this.#allEditors.get(id);
                  }
                  addEditor(editor) {
                    this.#allEditors.set(editor.id, editor);
                  }
                  removeEditor(editor) {
                    this.#allEditors.delete(editor.id);
                    this.unselect(editor);
                    if (!editor.annotationElementId || !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)) {
                      this.#annotationStorage?.remove(editor.id);
                    }
                  }
                  addDeletedAnnotationElement(editor) {
                    this.#deletedAnnotationsElementIds.add(editor.annotationElementId);
                    editor.deleted = true;
                  }
                  isDeletedAnnotationElement(annotationElementId) {
                    return this.#deletedAnnotationsElementIds.has(annotationElementId);
                  }
                  removeDeletedAnnotationElement(editor) {
                    this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);
                    editor.deleted = false;
                  }
                  #addEditorToLayer(editor) {
                    const layer = this.#allLayers.get(editor.pageIndex);
                    if (layer) {
                      layer.addOrRebuild(editor);
                    } else {
                      this.addEditor(editor);
                    }
                  }
                  setActiveEditor(editor) {
                    if (this.#activeEditor === editor) {
                      return;
                    }
                    this.#activeEditor = editor;
                    if (editor) {
                      this.#dispatchUpdateUI(editor.propertiesToUpdate);
                    }
                  }
                  toggleSelected(editor) {
                    if (this.#selectedEditors.has(editor)) {
                      this.#selectedEditors.delete(editor);
                      editor.unselect();
                      this.#dispatchUpdateStates({
                        hasSelectedEditor: this.hasSelection
                      });
                      return;
                    }
                    this.#selectedEditors.add(editor);
                    editor.select();
                    this.#dispatchUpdateUI(editor.propertiesToUpdate);
                    this.#dispatchUpdateStates({
                      hasSelectedEditor: true
                    });
                  }
                  setSelected(editor) {
                    for (const ed of this.#selectedEditors) {
                      if (ed !== editor) {
                        ed.unselect();
                      }
                    }
                    this.#selectedEditors.clear();
                    this.#selectedEditors.add(editor);
                    editor.select();
                    this.#dispatchUpdateUI(editor.propertiesToUpdate);
                    this.#dispatchUpdateStates({
                      hasSelectedEditor: true
                    });
                  }
                  isSelected(editor) {
                    return this.#selectedEditors.has(editor);
                  }
                  unselect(editor) {
                    editor.unselect();
                    this.#selectedEditors.delete(editor);
                    this.#dispatchUpdateStates({
                      hasSelectedEditor: this.hasSelection
                    });
                  }
                  get hasSelection() {
                    return this.#selectedEditors.size !== 0;
                  }
                  undo() {
                    this.#commandManager.undo();
                    this.#dispatchUpdateStates({
                      hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),
                      hasSomethingToRedo: true,
                      isEmpty: this.#isEmpty()
                    });
                  }
                  redo() {
                    this.#commandManager.redo();
                    this.#dispatchUpdateStates({
                      hasSomethingToUndo: true,
                      hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),
                      isEmpty: this.#isEmpty()
                    });
                  }
                  addCommands(params) {
                    this.#commandManager.add(params);
                    this.#dispatchUpdateStates({
                      hasSomethingToUndo: true,
                      hasSomethingToRedo: false,
                      isEmpty: this.#isEmpty()
                    });
                  }
                  #isEmpty() {
                    if (this.#allEditors.size === 0) {
                      return true;
                    }
                    if (this.#allEditors.size === 1) {
                      for (const editor of this.#allEditors.values()) {
                        return editor.isEmpty();
                      }
                    }
                    return false;
                  }
                  delete() {
                    this.commitOrRemove();
                    if (!this.hasSelection) {
                      return;
                    }
                    const editors = [...this.#selectedEditors];
                    const cmd = () => {
                      for (const editor of editors) {
                        editor.remove();
                      }
                    };
                    const undo = () => {
                      for (const editor of editors) {
                        this.#addEditorToLayer(editor);
                      }
                    };
                    this.addCommands({
                      cmd,
                      undo,
                      mustExec: true
                    });
                  }
                  commitOrRemove() {
                    this.#activeEditor?.commitOrRemove();
                  }
                  hasSomethingToControl() {
                    return this.#activeEditor || this.hasSelection;
                  }
                  #selectEditors(editors) {
                    this.#selectedEditors.clear();
                    for (const editor of editors) {
                      if (editor.isEmpty()) {
                        continue;
                      }
                      this.#selectedEditors.add(editor);
                      editor.select();
                    }
                    this.#dispatchUpdateStates({
                      hasSelectedEditor: true
                    });
                  }
                  selectAll() {
                    for (const editor of this.#selectedEditors) {
                      editor.commit();
                    }
                    this.#selectEditors(this.#allEditors.values());
                  }
                  unselectAll() {
                    if (this.#activeEditor) {
                      this.#activeEditor.commitOrRemove();
                      return;
                    }
                    if (!this.hasSelection) {
                      return;
                    }
                    for (const editor of this.#selectedEditors) {
                      editor.unselect();
                    }
                    this.#selectedEditors.clear();
                    this.#dispatchUpdateStates({
                      hasSelectedEditor: false
                    });
                  }
                  translateSelectedEditors(x, y, noCommit = false) {
                    if (!noCommit) {
                      this.commitOrRemove();
                    }
                    if (!this.hasSelection) {
                      return;
                    }
                    this.#translation[0] += x;
                    this.#translation[1] += y;
                    const [totalX, totalY] = this.#translation;
                    const editors = [...this.#selectedEditors];
                    const TIME_TO_WAIT = 1e3;
                    if (this.#translationTimeoutId) {
                      clearTimeout(this.#translationTimeoutId);
                    }
                    this.#translationTimeoutId = setTimeout(() => {
                      this.#translationTimeoutId = null;
                      this.#translation[0] = this.#translation[1] = 0;
                      this.addCommands({
                        cmd: () => {
                          for (const editor of editors) {
                            if (this.#allEditors.has(editor.id)) {
                              editor.translateInPage(totalX, totalY);
                            }
                          }
                        },
                        undo: () => {
                          for (const editor of editors) {
                            if (this.#allEditors.has(editor.id)) {
                              editor.translateInPage(-totalX, -totalY);
                            }
                          }
                        },
                        mustExec: false
                      });
                    }, TIME_TO_WAIT);
                    for (const editor of editors) {
                      editor.translateInPage(x, y);
                    }
                  }
                  setUpDragSession() {
                    if (!this.hasSelection) {
                      return;
                    }
                    this.disableUserSelect(true);
                    this.#draggingEditors = /* @__PURE__ */ new Map();
                    for (const editor of this.#selectedEditors) {
                      this.#draggingEditors.set(editor, {
                        savedX: editor.x,
                        savedY: editor.y,
                        savedPageIndex: editor.pageIndex,
                        newX: 0,
                        newY: 0,
                        newPageIndex: -1
                      });
                    }
                  }
                  endDragSession() {
                    if (!this.#draggingEditors) {
                      return false;
                    }
                    this.disableUserSelect(false);
                    const map = this.#draggingEditors;
                    this.#draggingEditors = null;
                    let mustBeAddedInUndoStack = false;
                    for (const [{
                      x,
                      y,
                      pageIndex
                    }, value] of map) {
                      value.newX = x;
                      value.newY = y;
                      value.newPageIndex = pageIndex;
                      mustBeAddedInUndoStack ||= x !== value.savedX || y !== value.savedY || pageIndex !== value.savedPageIndex;
                    }
                    if (!mustBeAddedInUndoStack) {
                      return false;
                    }
                    const move = (editor, x, y, pageIndex) => {
                      if (this.#allEditors.has(editor.id)) {
                        const parent = this.#allLayers.get(pageIndex);
                        if (parent) {
                          editor._setParentAndPosition(parent, x, y);
                        } else {
                          editor.pageIndex = pageIndex;
                          editor.x = x;
                          editor.y = y;
                        }
                      }
                    };
                    this.addCommands({
                      cmd: () => {
                        for (const [editor, {
                          newX,
                          newY,
                          newPageIndex
                        }] of map) {
                          move(editor, newX, newY, newPageIndex);
                        }
                      },
                      undo: () => {
                        for (const [editor, {
                          savedX,
                          savedY,
                          savedPageIndex
                        }] of map) {
                          move(editor, savedX, savedY, savedPageIndex);
                        }
                      },
                      mustExec: true
                    });
                    return true;
                  }
                  dragSelectedEditors(tx, ty) {
                    if (!this.#draggingEditors) {
                      return;
                    }
                    for (const editor of this.#draggingEditors.keys()) {
                      editor.drag(tx, ty);
                    }
                  }
                  rebuild(editor) {
                    if (editor.parent === null) {
                      const parent = this.getLayer(editor.pageIndex);
                      if (parent) {
                        parent.changeParent(editor);
                        parent.addOrRebuild(editor);
                      } else {
                        this.addEditor(editor);
                        this.addToAnnotationStorage(editor);
                        editor.rebuild();
                      }
                    } else {
                      editor.parent.addOrRebuild(editor);
                    }
                  }
                  isActive(editor) {
                    return this.#activeEditor === editor;
                  }
                  getActive() {
                    return this.#activeEditor;
                  }
                  getMode() {
                    return this.#mode;
                  }
                  get imageManager() {
                    return (0, _util2.shadow)(this, "imageManager", new ImageManager());
                  }
                }
                exports2.AnnotationEditorUIManager = AnnotationEditorUIManager;
              },
              /* 6 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.StatTimer = exports2.RenderingCancelledException = exports2.PixelsPerInch = exports2.PageViewport = exports2.PDFDateString = exports2.DOMStandardFontDataFactory = exports2.DOMSVGFactory = exports2.DOMFilterFactory = exports2.DOMCanvasFactory = exports2.DOMCMapReaderFactory = void 0;
                exports2.deprecated = deprecated;
                exports2.getColorValues = getColorValues;
                exports2.getCurrentTransform = getCurrentTransform;
                exports2.getCurrentTransformInverse = getCurrentTransformInverse;
                exports2.getFilenameFromUrl = getFilenameFromUrl;
                exports2.getPdfFilenameFromUrl = getPdfFilenameFromUrl;
                exports2.getRGB = getRGB;
                exports2.getXfaPageViewport = getXfaPageViewport;
                exports2.isDataScheme = isDataScheme;
                exports2.isPdfFile = isPdfFile;
                exports2.isValidFetchUrl = isValidFetchUrl;
                exports2.loadScript = loadScript;
                exports2.noContextMenu = noContextMenu;
                exports2.setLayerDimensions = setLayerDimensions;
                var _base_factory = __w_pdfjs_require__2(7);
                var _util2 = __w_pdfjs_require__2(1);
                const SVG_NS = "http://www.w3.org/2000/svg";
                class PixelsPerInch {
                  static CSS = 96;
                  static PDF = 72;
                  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;
                }
                exports2.PixelsPerInch = PixelsPerInch;
                class DOMFilterFactory extends _base_factory.BaseFilterFactory {
                  #_cache;
                  #_defs;
                  #docId;
                  #document;
                  #hcmFilter;
                  #hcmKey;
                  #hcmUrl;
                  #hcmHighlightFilter;
                  #hcmHighlightKey;
                  #hcmHighlightUrl;
                  #id = 0;
                  constructor({
                    docId,
                    ownerDocument = globalThis.document
                  } = {}) {
                    super();
                    this.#docId = docId;
                    this.#document = ownerDocument;
                  }
                  get #cache() {
                    return this.#_cache ||= /* @__PURE__ */ new Map();
                  }
                  get #defs() {
                    if (!this.#_defs) {
                      const div = this.#document.createElement("div");
                      const {
                        style
                      } = div;
                      style.visibility = "hidden";
                      style.contain = "strict";
                      style.width = style.height = 0;
                      style.position = "absolute";
                      style.top = style.left = 0;
                      style.zIndex = -1;
                      const svg = this.#document.createElementNS(SVG_NS, "svg");
                      svg.setAttribute("width", 0);
                      svg.setAttribute("height", 0);
                      this.#_defs = this.#document.createElementNS(SVG_NS, "defs");
                      div.append(svg);
                      svg.append(this.#_defs);
                      this.#document.body.append(div);
                    }
                    return this.#_defs;
                  }
                  addFilter(maps) {
                    if (!maps) {
                      return "none";
                    }
                    let value = this.#cache.get(maps);
                    if (value) {
                      return value;
                    }
                    let tableR, tableG, tableB, key;
                    if (maps.length === 1) {
                      const mapR = maps[0];
                      const buffer = new Array(256);
                      for (let i = 0; i < 256; i++) {
                        buffer[i] = mapR[i] / 255;
                      }
                      key = tableR = tableG = tableB = buffer.join(",");
                    } else {
                      const [mapR, mapG, mapB] = maps;
                      const bufferR = new Array(256);
                      const bufferG = new Array(256);
                      const bufferB = new Array(256);
                      for (let i = 0; i < 256; i++) {
                        bufferR[i] = mapR[i] / 255;
                        bufferG[i] = mapG[i] / 255;
                        bufferB[i] = mapB[i] / 255;
                      }
                      tableR = bufferR.join(",");
                      tableG = bufferG.join(",");
                      tableB = bufferB.join(",");
                      key = `${tableR}${tableG}${tableB}`;
                    }
                    value = this.#cache.get(key);
                    if (value) {
                      this.#cache.set(maps, value);
                      return value;
                    }
                    const id = `g_${this.#docId}_transfer_map_${this.#id++}`;
                    const url = `url(#${id})`;
                    this.#cache.set(maps, url);
                    this.#cache.set(key, url);
                    const filter = this.#createFilter(id);
                    this.#addTransferMapConversion(tableR, tableG, tableB, filter);
                    return url;
                  }
                  addHCMFilter(fgColor, bgColor) {
                    const key = `${fgColor}-${bgColor}`;
                    if (this.#hcmKey === key) {
                      return this.#hcmUrl;
                    }
                    this.#hcmKey = key;
                    this.#hcmUrl = "none";
                    this.#hcmFilter?.remove();
                    if (!fgColor || !bgColor) {
                      return this.#hcmUrl;
                    }
                    const fgRGB = this.#getRGB(fgColor);
                    fgColor = _util2.Util.makeHexColor(...fgRGB);
                    const bgRGB = this.#getRGB(bgColor);
                    bgColor = _util2.Util.makeHexColor(...bgRGB);
                    this.#defs.style.color = "";
                    if (fgColor === "#000000" && bgColor === "#ffffff" || fgColor === bgColor) {
                      return this.#hcmUrl;
                    }
                    const map = new Array(256);
                    for (let i = 0; i <= 255; i++) {
                      const x = i / 255;
                      map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;
                    }
                    const table = map.join(",");
                    const id = `g_${this.#docId}_hcm_filter`;
                    const filter = this.#hcmHighlightFilter = this.#createFilter(id);
                    this.#addTransferMapConversion(table, table, table, filter);
                    this.#addGrayConversion(filter);
                    const getSteps = (c, n) => {
                      const start = fgRGB[c] / 255;
                      const end = bgRGB[c] / 255;
                      const arr = new Array(n + 1);
                      for (let i = 0; i <= n; i++) {
                        arr[i] = start + i / n * (end - start);
                      }
                      return arr.join(",");
                    };
                    this.#addTransferMapConversion(getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter);
                    this.#hcmUrl = `url(#${id})`;
                    return this.#hcmUrl;
                  }
                  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {
                    const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;
                    if (this.#hcmHighlightKey === key) {
                      return this.#hcmHighlightUrl;
                    }
                    this.#hcmHighlightKey = key;
                    this.#hcmHighlightUrl = "none";
                    this.#hcmHighlightFilter?.remove();
                    if (!fgColor || !bgColor) {
                      return this.#hcmHighlightUrl;
                    }
                    const [fgRGB, bgRGB] = [fgColor, bgColor].map(this.#getRGB.bind(this));
                    let fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);
                    let bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);
                    let [newFgRGB, newBgRGB] = [newFgColor, newBgColor].map(this.#getRGB.bind(this));
                    if (bgGray < fgGray) {
                      [fgGray, bgGray, newFgRGB, newBgRGB] = [bgGray, fgGray, newBgRGB, newFgRGB];
                    }
                    this.#defs.style.color = "";
                    const getSteps = (fg, bg, n) => {
                      const arr = new Array(256);
                      const step = (bgGray - fgGray) / n;
                      const newStart = fg / 255;
                      const newStep = (bg - fg) / (255 * n);
                      let prev = 0;
                      for (let i = 0; i <= n; i++) {
                        const k = Math.round(fgGray + i * step);
                        const value = newStart + i * newStep;
                        for (let j = prev; j <= k; j++) {
                          arr[j] = value;
                        }
                        prev = k + 1;
                      }
                      for (let i = prev; i < 256; i++) {
                        arr[i] = arr[prev - 1];
                      }
                      return arr.join(",");
                    };
                    const id = `g_${this.#docId}_hcm_highlight_filter`;
                    const filter = this.#hcmHighlightFilter = this.#createFilter(id);
                    this.#addGrayConversion(filter);
                    this.#addTransferMapConversion(getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter);
                    this.#hcmHighlightUrl = `url(#${id})`;
                    return this.#hcmHighlightUrl;
                  }
                  destroy(keepHCM = false) {
                    if (keepHCM && (this.#hcmUrl || this.#hcmHighlightUrl)) {
                      return;
                    }
                    if (this.#_defs) {
                      this.#_defs.parentNode.parentNode.remove();
                      this.#_defs = null;
                    }
                    if (this.#_cache) {
                      this.#_cache.clear();
                      this.#_cache = null;
                    }
                    this.#id = 0;
                  }
                  #addGrayConversion(filter) {
                    const feColorMatrix = this.#document.createElementNS(SVG_NS, "feColorMatrix");
                    feColorMatrix.setAttribute("type", "matrix");
                    feColorMatrix.setAttribute("values", "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0");
                    filter.append(feColorMatrix);
                  }
                  #createFilter(id) {
                    const filter = this.#document.createElementNS(SVG_NS, "filter");
                    filter.setAttribute("color-interpolation-filters", "sRGB");
                    filter.setAttribute("id", id);
                    this.#defs.append(filter);
                    return filter;
                  }
                  #appendFeFunc(feComponentTransfer, func, table) {
                    const feFunc = this.#document.createElementNS(SVG_NS, func);
                    feFunc.setAttribute("type", "discrete");
                    feFunc.setAttribute("tableValues", table);
                    feComponentTransfer.append(feFunc);
                  }
                  #addTransferMapConversion(rTable, gTable, bTable, filter) {
                    const feComponentTransfer = this.#document.createElementNS(SVG_NS, "feComponentTransfer");
                    filter.append(feComponentTransfer);
                    this.#appendFeFunc(feComponentTransfer, "feFuncR", rTable);
                    this.#appendFeFunc(feComponentTransfer, "feFuncG", gTable);
                    this.#appendFeFunc(feComponentTransfer, "feFuncB", bTable);
                  }
                  #getRGB(color) {
                    this.#defs.style.color = color;
                    return getRGB(getComputedStyle(this.#defs).getPropertyValue("color"));
                  }
                }
                exports2.DOMFilterFactory = DOMFilterFactory;
                class DOMCanvasFactory extends _base_factory.BaseCanvasFactory {
                  constructor({
                    ownerDocument = globalThis.document
                  } = {}) {
                    super();
                    this._document = ownerDocument;
                  }
                  _createCanvas(width, height) {
                    const canvas = this._document.createElement("canvas");
                    canvas.width = width;
                    canvas.height = height;
                    return canvas;
                  }
                }
                exports2.DOMCanvasFactory = DOMCanvasFactory;
                async function fetchData(url, asTypedArray = false) {
                  if (isValidFetchUrl(url, document.baseURI)) {
                    const response = await fetch(url);
                    if (!response.ok) {
                      throw new Error(response.statusText);
                    }
                    return asTypedArray ? new Uint8Array(await response.arrayBuffer()) : (0, _util2.stringToBytes)(await response.text());
                  }
                  return new Promise((resolve, reject) => {
                    const request = new XMLHttpRequest();
                    request.open("GET", url, true);
                    if (asTypedArray) {
                      request.responseType = "arraybuffer";
                    }
                    request.onreadystatechange = () => {
                      if (request.readyState !== XMLHttpRequest.DONE) {
                        return;
                      }
                      if (request.status === 200 || request.status === 0) {
                        let data;
                        if (asTypedArray && request.response) {
                          data = new Uint8Array(request.response);
                        } else if (!asTypedArray && request.responseText) {
                          data = (0, _util2.stringToBytes)(request.responseText);
                        }
                        if (data) {
                          resolve(data);
                          return;
                        }
                      }
                      reject(new Error(request.statusText));
                    };
                    request.send(null);
                  });
                }
                class DOMCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {
                  _fetchData(url, compressionType) {
                    return fetchData(url, this.isCompressed).then((data) => {
                      return {
                        cMapData: data,
                        compressionType
                      };
                    });
                  }
                }
                exports2.DOMCMapReaderFactory = DOMCMapReaderFactory;
                class DOMStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {
                  _fetchData(url) {
                    return fetchData(url, true);
                  }
                }
                exports2.DOMStandardFontDataFactory = DOMStandardFontDataFactory;
                class DOMSVGFactory extends _base_factory.BaseSVGFactory {
                  _createSVG(type) {
                    return document.createElementNS(SVG_NS, type);
                  }
                }
                exports2.DOMSVGFactory = DOMSVGFactory;
                class PageViewport {
                  constructor({
                    viewBox,
                    scale,
                    rotation,
                    offsetX = 0,
                    offsetY = 0,
                    dontFlip = false
                  }) {
                    this.viewBox = viewBox;
                    this.scale = scale;
                    this.rotation = rotation;
                    this.offsetX = offsetX;
                    this.offsetY = offsetY;
                    const centerX = (viewBox[2] + viewBox[0]) / 2;
                    const centerY = (viewBox[3] + viewBox[1]) / 2;
                    let rotateA, rotateB, rotateC, rotateD;
                    rotation %= 360;
                    if (rotation < 0) {
                      rotation += 360;
                    }
                    switch (rotation) {
                      case 180:
                        rotateA = -1;
                        rotateB = 0;
                        rotateC = 0;
                        rotateD = 1;
                        break;
                      case 90:
                        rotateA = 0;
                        rotateB = 1;
                        rotateC = 1;
                        rotateD = 0;
                        break;
                      case 270:
                        rotateA = 0;
                        rotateB = -1;
                        rotateC = -1;
                        rotateD = 0;
                        break;
                      case 0:
                        rotateA = 1;
                        rotateB = 0;
                        rotateC = 0;
                        rotateD = -1;
                        break;
                      default:
                        throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
                    }
                    if (dontFlip) {
                      rotateC = -rotateC;
                      rotateD = -rotateD;
                    }
                    let offsetCanvasX, offsetCanvasY;
                    let width, height;
                    if (rotateA === 0) {
                      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
                      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
                      width = (viewBox[3] - viewBox[1]) * scale;
                      height = (viewBox[2] - viewBox[0]) * scale;
                    } else {
                      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
                      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
                      width = (viewBox[2] - viewBox[0]) * scale;
                      height = (viewBox[3] - viewBox[1]) * scale;
                    }
                    this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
                    this.width = width;
                    this.height = height;
                  }
                  get rawDims() {
                    const {
                      viewBox
                    } = this;
                    return (0, _util2.shadow)(this, "rawDims", {
                      pageWidth: viewBox[2] - viewBox[0],
                      pageHeight: viewBox[3] - viewBox[1],
                      pageX: viewBox[0],
                      pageY: viewBox[1]
                    });
                  }
                  clone({
                    scale = this.scale,
                    rotation = this.rotation,
                    offsetX = this.offsetX,
                    offsetY = this.offsetY,
                    dontFlip = false
                  } = {}) {
                    return new PageViewport({
                      viewBox: this.viewBox.slice(),
                      scale,
                      rotation,
                      offsetX,
                      offsetY,
                      dontFlip
                    });
                  }
                  convertToViewportPoint(x, y) {
                    return _util2.Util.applyTransform([x, y], this.transform);
                  }
                  convertToViewportRectangle(rect) {
                    const topLeft = _util2.Util.applyTransform([rect[0], rect[1]], this.transform);
                    const bottomRight = _util2.Util.applyTransform([rect[2], rect[3]], this.transform);
                    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];
                  }
                  convertToPdfPoint(x, y) {
                    return _util2.Util.applyInverseTransform([x, y], this.transform);
                  }
                }
                exports2.PageViewport = PageViewport;
                class RenderingCancelledException extends _util2.BaseException {
                  constructor(msg, extraDelay = 0) {
                    super(msg, "RenderingCancelledException");
                    this.extraDelay = extraDelay;
                  }
                }
                exports2.RenderingCancelledException = RenderingCancelledException;
                function isDataScheme(url) {
                  const ii = url.length;
                  let i = 0;
                  while (i < ii && url[i].trim() === "") {
                    i++;
                  }
                  return url.substring(i, i + 5).toLowerCase() === "data:";
                }
                function isPdfFile(filename) {
                  return typeof filename === "string" && /\.pdf$/i.test(filename);
                }
                function getFilenameFromUrl(url, onlyStripPath = false) {
                  if (!onlyStripPath) {
                    [url] = url.split(/[#?]/, 1);
                  }
                  return url.substring(url.lastIndexOf("/") + 1);
                }
                function getPdfFilenameFromUrl(url, defaultFilename = "document.pdf") {
                  if (typeof url !== "string") {
                    return defaultFilename;
                  }
                  if (isDataScheme(url)) {
                    (0, _util2.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.');
                    return defaultFilename;
                  }
                  const reURI = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
                  const reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
                  const splitURI = reURI.exec(url);
                  let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);
                  if (suggestedFilename) {
                    suggestedFilename = suggestedFilename[0];
                    if (suggestedFilename.includes("%")) {
                      try {
                        suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];
                      } catch {
                      }
                    }
                  }
                  return suggestedFilename || defaultFilename;
                }
                class StatTimer {
                  started = /* @__PURE__ */ Object.create(null);
                  times = [];
                  time(name) {
                    if (name in this.started) {
                      (0, _util2.warn)(`Timer is already running for ${name}`);
                    }
                    this.started[name] = Date.now();
                  }
                  timeEnd(name) {
                    if (!(name in this.started)) {
                      (0, _util2.warn)(`Timer has not been started for ${name}`);
                    }
                    this.times.push({
                      name,
                      start: this.started[name],
                      end: Date.now()
                    });
                    delete this.started[name];
                  }
                  toString() {
                    const outBuf = [];
                    let longest = 0;
                    for (const {
                      name
                    } of this.times) {
                      longest = Math.max(name.length, longest);
                    }
                    for (const {
                      name,
                      start,
                      end
                    } of this.times) {
                      outBuf.push(`${name.padEnd(longest)} ${end - start}ms
`);
                    }
                    return outBuf.join("");
                  }
                }
                exports2.StatTimer = StatTimer;
                function isValidFetchUrl(url, baseUrl) {
                  try {
                    const {
                      protocol
                    } = baseUrl ? new URL(url, baseUrl) : new URL(url);
                    return protocol === "http:" || protocol === "https:";
                  } catch {
                    return false;
                  }
                }
                function noContextMenu(e) {
                  e.preventDefault();
                }
                function loadScript(src, removeScriptElement = false) {
                  return new Promise((resolve, reject) => {
                    const script = document.createElement("script");
                    script.src = src;
                    script.onload = function(evt) {
                      if (removeScriptElement) {
                        script.remove();
                      }
                      resolve(evt);
                    };
                    script.onerror = function() {
                      reject(new Error(`Cannot load script at: ${script.src}`));
                    };
                    (document.head || document.documentElement).append(script);
                  });
                }
                function deprecated(details) {
                  console.log("Deprecated API usage: " + details);
                }
                let pdfDateStringRegex;
                class PDFDateString {
                  static toDateObject(input) {
                    if (!input || typeof input !== "string") {
                      return null;
                    }
                    pdfDateStringRegex ||= new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
                    const matches = pdfDateStringRegex.exec(input);
                    if (!matches) {
                      return null;
                    }
                    const year = parseInt(matches[1], 10);
                    let month = parseInt(matches[2], 10);
                    month = month >= 1 && month <= 12 ? month - 1 : 0;
                    let day = parseInt(matches[3], 10);
                    day = day >= 1 && day <= 31 ? day : 1;
                    let hour = parseInt(matches[4], 10);
                    hour = hour >= 0 && hour <= 23 ? hour : 0;
                    let minute = parseInt(matches[5], 10);
                    minute = minute >= 0 && minute <= 59 ? minute : 0;
                    let second = parseInt(matches[6], 10);
                    second = second >= 0 && second <= 59 ? second : 0;
                    const universalTimeRelation = matches[7] || "Z";
                    let offsetHour = parseInt(matches[8], 10);
                    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
                    let offsetMinute = parseInt(matches[9], 10) || 0;
                    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;
                    if (universalTimeRelation === "-") {
                      hour += offsetHour;
                      minute += offsetMinute;
                    } else if (universalTimeRelation === "+") {
                      hour -= offsetHour;
                      minute -= offsetMinute;
                    }
                    return new Date(Date.UTC(year, month, day, hour, minute, second));
                  }
                }
                exports2.PDFDateString = PDFDateString;
                function getXfaPageViewport(xfaPage, {
                  scale = 1,
                  rotation = 0
                }) {
                  const {
                    width,
                    height
                  } = xfaPage.attributes.style;
                  const viewBox = [0, 0, parseInt(width), parseInt(height)];
                  return new PageViewport({
                    viewBox,
                    scale,
                    rotation
                  });
                }
                function getRGB(color) {
                  if (color.startsWith("#")) {
                    const colorRGB = parseInt(color.slice(1), 16);
                    return [(colorRGB & 16711680) >> 16, (colorRGB & 65280) >> 8, colorRGB & 255];
                  }
                  if (color.startsWith("rgb(")) {
                    return color.slice(4, -1).split(",").map((x) => parseInt(x));
                  }
                  if (color.startsWith("rgba(")) {
                    return color.slice(5, -1).split(",").map((x) => parseInt(x)).slice(0, 3);
                  }
                  (0, _util2.warn)(`Not a valid color format: "${color}"`);
                  return [0, 0, 0];
                }
                function getColorValues(colors) {
                  const span = document.createElement("span");
                  span.style.visibility = "hidden";
                  document.body.append(span);
                  for (const name of colors.keys()) {
                    span.style.color = name;
                    const computedColor = window.getComputedStyle(span).color;
                    colors.set(name, getRGB(computedColor));
                  }
                  span.remove();
                }
                function getCurrentTransform(ctx) {
                  const {
                    a,
                    b,
                    c,
                    d,
                    e,
                    f
                  } = ctx.getTransform();
                  return [a, b, c, d, e, f];
                }
                function getCurrentTransformInverse(ctx) {
                  const {
                    a,
                    b,
                    c,
                    d,
                    e,
                    f
                  } = ctx.getTransform().invertSelf();
                  return [a, b, c, d, e, f];
                }
                function setLayerDimensions(div, viewport, mustFlip = false, mustRotate = true) {
                  if (viewport instanceof PageViewport) {
                    const {
                      pageWidth,
                      pageHeight
                    } = viewport.rawDims;
                    const {
                      style
                    } = div;
                    const useRound = _util2.FeatureTest.isCSSRoundSupported;
                    const w = `var(--scale-factor) * ${pageWidth}px`, h = `var(--scale-factor) * ${pageHeight}px`;
                    const widthStr = useRound ? `round(${w}, 1px)` : `calc(${w})`, heightStr = useRound ? `round(${h}, 1px)` : `calc(${h})`;
                    if (!mustFlip || viewport.rotation % 180 === 0) {
                      style.width = widthStr;
                      style.height = heightStr;
                    } else {
                      style.width = heightStr;
                      style.height = widthStr;
                    }
                  }
                  if (mustRotate) {
                    div.setAttribute("data-main-rotation", viewport.rotation);
                  }
                }
              },
              /* 7 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.BaseStandardFontDataFactory = exports2.BaseSVGFactory = exports2.BaseFilterFactory = exports2.BaseCanvasFactory = exports2.BaseCMapReaderFactory = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                class BaseFilterFactory {
                  constructor() {
                    if (this.constructor === BaseFilterFactory) {
                      (0, _util2.unreachable)("Cannot initialize BaseFilterFactory.");
                    }
                  }
                  addFilter(maps) {
                    return "none";
                  }
                  addHCMFilter(fgColor, bgColor) {
                    return "none";
                  }
                  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {
                    return "none";
                  }
                  destroy(keepHCM = false) {
                  }
                }
                exports2.BaseFilterFactory = BaseFilterFactory;
                class BaseCanvasFactory {
                  constructor() {
                    if (this.constructor === BaseCanvasFactory) {
                      (0, _util2.unreachable)("Cannot initialize BaseCanvasFactory.");
                    }
                  }
                  create(width, height) {
                    if (width <= 0 || height <= 0) {
                      throw new Error("Invalid canvas size");
                    }
                    const canvas = this._createCanvas(width, height);
                    return {
                      canvas,
                      context: canvas.getContext("2d")
                    };
                  }
                  reset(canvasAndContext, width, height) {
                    if (!canvasAndContext.canvas) {
                      throw new Error("Canvas is not specified");
                    }
                    if (width <= 0 || height <= 0) {
                      throw new Error("Invalid canvas size");
                    }
                    canvasAndContext.canvas.width = width;
                    canvasAndContext.canvas.height = height;
                  }
                  destroy(canvasAndContext) {
                    if (!canvasAndContext.canvas) {
                      throw new Error("Canvas is not specified");
                    }
                    canvasAndContext.canvas.width = 0;
                    canvasAndContext.canvas.height = 0;
                    canvasAndContext.canvas = null;
                    canvasAndContext.context = null;
                  }
                  _createCanvas(width, height) {
                    (0, _util2.unreachable)("Abstract method `_createCanvas` called.");
                  }
                }
                exports2.BaseCanvasFactory = BaseCanvasFactory;
                class BaseCMapReaderFactory {
                  constructor({
                    baseUrl = null,
                    isCompressed = true
                  }) {
                    if (this.constructor === BaseCMapReaderFactory) {
                      (0, _util2.unreachable)("Cannot initialize BaseCMapReaderFactory.");
                    }
                    this.baseUrl = baseUrl;
                    this.isCompressed = isCompressed;
                  }
                  async fetch({
                    name
                  }) {
                    if (!this.baseUrl) {
                      throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');
                    }
                    if (!name) {
                      throw new Error("CMap name must be specified.");
                    }
                    const url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");
                    const compressionType = this.isCompressed ? _util2.CMapCompressionType.BINARY : _util2.CMapCompressionType.NONE;
                    return this._fetchData(url, compressionType).catch((reason) => {
                      throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${url}`);
                    });
                  }
                  _fetchData(url, compressionType) {
                    (0, _util2.unreachable)("Abstract method `_fetchData` called.");
                  }
                }
                exports2.BaseCMapReaderFactory = BaseCMapReaderFactory;
                class BaseStandardFontDataFactory {
                  constructor({
                    baseUrl = null
                  }) {
                    if (this.constructor === BaseStandardFontDataFactory) {
                      (0, _util2.unreachable)("Cannot initialize BaseStandardFontDataFactory.");
                    }
                    this.baseUrl = baseUrl;
                  }
                  async fetch({
                    filename
                  }) {
                    if (!this.baseUrl) {
                      throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');
                    }
                    if (!filename) {
                      throw new Error("Font filename must be specified.");
                    }
                    const url = `${this.baseUrl}${filename}`;
                    return this._fetchData(url).catch((reason) => {
                      throw new Error(`Unable to load font data at: ${url}`);
                    });
                  }
                  _fetchData(url) {
                    (0, _util2.unreachable)("Abstract method `_fetchData` called.");
                  }
                }
                exports2.BaseStandardFontDataFactory = BaseStandardFontDataFactory;
                class BaseSVGFactory {
                  constructor() {
                    if (this.constructor === BaseSVGFactory) {
                      (0, _util2.unreachable)("Cannot initialize BaseSVGFactory.");
                    }
                  }
                  create(width, height, skipDimensions = false) {
                    if (width <= 0 || height <= 0) {
                      throw new Error("Invalid SVG dimensions");
                    }
                    const svg = this._createSVG("svg:svg");
                    svg.setAttribute("version", "1.1");
                    if (!skipDimensions) {
                      svg.setAttribute("width", `${width}px`);
                      svg.setAttribute("height", `${height}px`);
                    }
                    svg.setAttribute("preserveAspectRatio", "none");
                    svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
                    return svg;
                  }
                  createElement(type) {
                    if (typeof type !== "string") {
                      throw new Error("Invalid SVG element type");
                    }
                    return this._createSVG(type);
                  }
                  _createSVG(type) {
                    (0, _util2.unreachable)("Abstract method `_createSVG` called.");
                  }
                }
                exports2.BaseSVGFactory = BaseSVGFactory;
              },
              /* 8 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.MurmurHash3_64 = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                const SEED = 3285377520;
                const MASK_HIGH = 4294901760;
                const MASK_LOW = 65535;
                class MurmurHash3_64 {
                  constructor(seed) {
                    this.h1 = seed ? seed & 4294967295 : SEED;
                    this.h2 = seed ? seed & 4294967295 : SEED;
                  }
                  update(input) {
                    let data, length;
                    if (typeof input === "string") {
                      data = new Uint8Array(input.length * 2);
                      length = 0;
                      for (let i = 0, ii = input.length; i < ii; i++) {
                        const code = input.charCodeAt(i);
                        if (code <= 255) {
                          data[length++] = code;
                        } else {
                          data[length++] = code >>> 8;
                          data[length++] = code & 255;
                        }
                      }
                    } else if ((0, _util2.isArrayBuffer)(input)) {
                      data = input.slice();
                      length = data.byteLength;
                    } else {
                      throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");
                    }
                    const blockCounts = length >> 2;
                    const tailLength = length - blockCounts * 4;
                    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);
                    let k1 = 0, k2 = 0;
                    let h1 = this.h1, h2 = this.h2;
                    const C1 = 3432918353, C2 = 461845907;
                    const C1_LOW = C1 & MASK_LOW, C2_LOW = C2 & MASK_LOW;
                    for (let i = 0; i < blockCounts; i++) {
                      if (i & 1) {
                        k1 = dataUint32[i];
                        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                        k1 = k1 << 15 | k1 >>> 17;
                        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
                        h1 ^= k1;
                        h1 = h1 << 13 | h1 >>> 19;
                        h1 = h1 * 5 + 3864292196;
                      } else {
                        k2 = dataUint32[i];
                        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;
                        k2 = k2 << 15 | k2 >>> 17;
                        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;
                        h2 ^= k2;
                        h2 = h2 << 13 | h2 >>> 19;
                        h2 = h2 * 5 + 3864292196;
                      }
                    }
                    k1 = 0;
                    switch (tailLength) {
                      case 3:
                        k1 ^= data[blockCounts * 4 + 2] << 16;
                      case 2:
                        k1 ^= data[blockCounts * 4 + 1] << 8;
                      case 1:
                        k1 ^= data[blockCounts * 4];
                        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                        k1 = k1 << 15 | k1 >>> 17;
                        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
                        if (blockCounts & 1) {
                          h1 ^= k1;
                        } else {
                          h2 ^= k1;
                        }
                    }
                    this.h1 = h1;
                    this.h2 = h2;
                  }
                  hexdigest() {
                    let h1 = this.h1, h2 = this.h2;
                    h1 ^= h2 >>> 1;
                    h1 = h1 * 3981806797 & MASK_HIGH | h1 * 36045 & MASK_LOW;
                    h2 = h2 * 4283543511 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 2950163797 & MASK_HIGH) >>> 16;
                    h1 ^= h2 >>> 1;
                    h1 = h1 * 444984403 & MASK_HIGH | h1 * 60499 & MASK_LOW;
                    h2 = h2 * 3301882366 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 3120437893 & MASK_HIGH) >>> 16;
                    h1 ^= h2 >>> 1;
                    return (h1 >>> 0).toString(16).padStart(8, "0") + (h2 >>> 0).toString(16).padStart(8, "0");
                  }
                }
                exports2.MurmurHash3_64 = MurmurHash3_64;
              },
              /* 9 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.FontLoader = exports2.FontFaceObject = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                class FontLoader {
                  #systemFonts = /* @__PURE__ */ new Set();
                  constructor({
                    ownerDocument = globalThis.document,
                    styleElement = null
                  }) {
                    this._document = ownerDocument;
                    this.nativeFontFaces = /* @__PURE__ */ new Set();
                    this.styleElement = null;
                    this.loadingRequests = [];
                    this.loadTestFontId = 0;
                  }
                  addNativeFontFace(nativeFontFace) {
                    this.nativeFontFaces.add(nativeFontFace);
                    this._document.fonts.add(nativeFontFace);
                  }
                  removeNativeFontFace(nativeFontFace) {
                    this.nativeFontFaces.delete(nativeFontFace);
                    this._document.fonts.delete(nativeFontFace);
                  }
                  insertRule(rule) {
                    if (!this.styleElement) {
                      this.styleElement = this._document.createElement("style");
                      this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement);
                    }
                    const styleSheet = this.styleElement.sheet;
                    styleSheet.insertRule(rule, styleSheet.cssRules.length);
                  }
                  clear() {
                    for (const nativeFontFace of this.nativeFontFaces) {
                      this._document.fonts.delete(nativeFontFace);
                    }
                    this.nativeFontFaces.clear();
                    this.#systemFonts.clear();
                    if (this.styleElement) {
                      this.styleElement.remove();
                      this.styleElement = null;
                    }
                  }
                  async loadSystemFont(info) {
                    if (!info || this.#systemFonts.has(info.loadedName)) {
                      return;
                    }
                    (0, _util2.assert)(!this.disableFontFace, "loadSystemFont shouldn't be called when `disableFontFace` is set.");
                    if (this.isFontLoadingAPISupported) {
                      const {
                        loadedName,
                        src,
                        style
                      } = info;
                      const fontFace = new FontFace(loadedName, src, style);
                      this.addNativeFontFace(fontFace);
                      try {
                        await fontFace.load();
                        this.#systemFonts.add(loadedName);
                      } catch {
                        (0, _util2.warn)(`Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`);
                        this.removeNativeFontFace(fontFace);
                      }
                      return;
                    }
                    (0, _util2.unreachable)("Not implemented: loadSystemFont without the Font Loading API.");
                  }
                  async bind(font) {
                    if (font.attached || font.missingFile && !font.systemFontInfo) {
                      return;
                    }
                    font.attached = true;
                    if (font.systemFontInfo) {
                      await this.loadSystemFont(font.systemFontInfo);
                      return;
                    }
                    if (this.isFontLoadingAPISupported) {
                      const nativeFontFace = font.createNativeFontFace();
                      if (nativeFontFace) {
                        this.addNativeFontFace(nativeFontFace);
                        try {
                          await nativeFontFace.loaded;
                        } catch (ex) {
                          (0, _util2.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);
                          font.disableFontFace = true;
                          throw ex;
                        }
                      }
                      return;
                    }
                    const rule = font.createFontFaceRule();
                    if (rule) {
                      this.insertRule(rule);
                      if (this.isSyncFontLoadingSupported) {
                        return;
                      }
                      await new Promise((resolve) => {
                        const request = this._queueLoadingCallback(resolve);
                        this._prepareFontLoadEvent(font, request);
                      });
                    }
                  }
                  get isFontLoadingAPISupported() {
                    const hasFonts = !!this._document?.fonts;
                    return (0, _util2.shadow)(this, "isFontLoadingAPISupported", hasFonts);
                  }
                  get isSyncFontLoadingSupported() {
                    let supported = false;
                    if (_util2.isNodeJS) {
                      supported = true;
                    } else if (typeof navigator !== "undefined" && /Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent)) {
                      supported = true;
                    }
                    return (0, _util2.shadow)(this, "isSyncFontLoadingSupported", supported);
                  }
                  _queueLoadingCallback(callback) {
                    function completeRequest() {
                      (0, _util2.assert)(!request.done, "completeRequest() cannot be called twice.");
                      request.done = true;
                      while (loadingRequests.length > 0 && loadingRequests[0].done) {
                        const otherRequest = loadingRequests.shift();
                        setTimeout(otherRequest.callback, 0);
                      }
                    }
                    const {
                      loadingRequests
                    } = this;
                    const request = {
                      done: false,
                      complete: completeRequest,
                      callback
                    };
                    loadingRequests.push(request);
                    return request;
                  }
                  get _loadTestFont() {
                    const testFont = atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
                    return (0, _util2.shadow)(this, "_loadTestFont", testFont);
                  }
                  _prepareFontLoadEvent(font, request) {
                    function int32(data2, offset) {
                      return data2.charCodeAt(offset) << 24 | data2.charCodeAt(offset + 1) << 16 | data2.charCodeAt(offset + 2) << 8 | data2.charCodeAt(offset + 3) & 255;
                    }
                    function spliceString(s, offset, remove, insert) {
                      const chunk1 = s.substring(0, offset);
                      const chunk2 = s.substring(offset + remove);
                      return chunk1 + insert + chunk2;
                    }
                    let i, ii;
                    const canvas = this._document.createElement("canvas");
                    canvas.width = 1;
                    canvas.height = 1;
                    const ctx = canvas.getContext("2d");
                    let called = 0;
                    function isFontReady(name, callback) {
                      if (++called > 30) {
                        (0, _util2.warn)("Load test font never loaded.");
                        callback();
                        return;
                      }
                      ctx.font = "30px " + name;
                      ctx.fillText(".", 0, 20);
                      const imageData = ctx.getImageData(0, 0, 1, 1);
                      if (imageData.data[3] > 0) {
                        callback();
                        return;
                      }
                      setTimeout(isFontReady.bind(null, name, callback));
                    }
                    const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;
                    let data = this._loadTestFont;
                    const COMMENT_OFFSET = 976;
                    data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
                    const CFF_CHECKSUM_OFFSET = 16;
                    const XXXX_VALUE = 1482184792;
                    let checksum = int32(data, CFF_CHECKSUM_OFFSET);
                    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
                      checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
                    }
                    if (i < loadTestFontId.length) {
                      checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
                    }
                    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util2.string32)(checksum));
                    const url = `url(data:font/opentype;base64,${btoa(data)});`;
                    const rule = `@font-face {font-family:"${loadTestFontId}";src:${url}}`;
                    this.insertRule(rule);
                    const div = this._document.createElement("div");
                    div.style.visibility = "hidden";
                    div.style.width = div.style.height = "10px";
                    div.style.position = "absolute";
                    div.style.top = div.style.left = "0px";
                    for (const name of [font.loadedName, loadTestFontId]) {
                      const span = this._document.createElement("span");
                      span.textContent = "Hi";
                      span.style.fontFamily = name;
                      div.append(span);
                    }
                    this._document.body.append(div);
                    isFontReady(loadTestFontId, () => {
                      div.remove();
                      request.complete();
                    });
                  }
                }
                exports2.FontLoader = FontLoader;
                class FontFaceObject {
                  constructor(translatedData, {
                    isEvalSupported = true,
                    disableFontFace = false,
                    ignoreErrors = false,
                    inspectFont = null
                  }) {
                    this.compiledGlyphs = /* @__PURE__ */ Object.create(null);
                    for (const i in translatedData) {
                      this[i] = translatedData[i];
                    }
                    this.isEvalSupported = isEvalSupported !== false;
                    this.disableFontFace = disableFontFace === true;
                    this.ignoreErrors = ignoreErrors === true;
                    this._inspectFont = inspectFont;
                  }
                  createNativeFontFace() {
                    if (!this.data || this.disableFontFace) {
                      return null;
                    }
                    let nativeFontFace;
                    if (!this.cssFontInfo) {
                      nativeFontFace = new FontFace(this.loadedName, this.data, {});
                    } else {
                      const css = {
                        weight: this.cssFontInfo.fontWeight
                      };
                      if (this.cssFontInfo.italicAngle) {
                        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;
                      }
                      nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);
                    }
                    this._inspectFont?.(this);
                    return nativeFontFace;
                  }
                  createFontFaceRule() {
                    if (!this.data || this.disableFontFace) {
                      return null;
                    }
                    const data = (0, _util2.bytesToString)(this.data);
                    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;
                    let rule;
                    if (!this.cssFontInfo) {
                      rule = `@font-face {font-family:"${this.loadedName}";src:${url}}`;
                    } else {
                      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;
                      if (this.cssFontInfo.italicAngle) {
                        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;
                      }
                      rule = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${css}src:${url}}`;
                    }
                    this._inspectFont?.(this, url);
                    return rule;
                  }
                  getPathGenerator(objs, character) {
                    if (this.compiledGlyphs[character] !== void 0) {
                      return this.compiledGlyphs[character];
                    }
                    let cmds;
                    try {
                      cmds = objs.get(this.loadedName + "_path_" + character);
                    } catch (ex) {
                      if (!this.ignoreErrors) {
                        throw ex;
                      }
                      (0, _util2.warn)(`getPathGenerator - ignoring character: "${ex}".`);
                      return this.compiledGlyphs[character] = function(c, size) {
                      };
                    }
                    if (this.isEvalSupported && _util2.FeatureTest.isEvalSupported) {
                      const jsBuf = [];
                      for (const current of cmds) {
                        const args = current.args !== void 0 ? current.args.join(",") : "";
                        jsBuf.push("c.", current.cmd, "(", args, ");\n");
                      }
                      return this.compiledGlyphs[character] = new Function("c", "size", jsBuf.join(""));
                    }
                    return this.compiledGlyphs[character] = function(c, size) {
                      for (const current of cmds) {
                        if (current.cmd === "scale") {
                          current.args = [size, -size];
                        }
                        c[current.cmd].apply(c, current.args);
                      }
                    };
                  }
                }
                exports2.FontFaceObject = FontFaceObject;
              },
              /* 10 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.NodeStandardFontDataFactory = exports2.NodeFilterFactory = exports2.NodeCanvasFactory = exports2.NodeCMapReaderFactory = void 0;
                var _base_factory = __w_pdfjs_require__2(7);
                var _util2 = __w_pdfjs_require__2(1);
                ;
                ;
                const fetchData = function(url) {
                  return new Promise((resolve, reject) => {
                    const fs = require_fs();
                    fs.readFile(url, (error, data) => {
                      if (error || !data) {
                        reject(new Error(error));
                        return;
                      }
                      resolve(new Uint8Array(data));
                    });
                  });
                };
                class NodeFilterFactory extends _base_factory.BaseFilterFactory {
                }
                exports2.NodeFilterFactory = NodeFilterFactory;
                class NodeCanvasFactory extends _base_factory.BaseCanvasFactory {
                  _createCanvas(width, height) {
                    const Canvas = require_browser();
                    return Canvas.createCanvas(width, height);
                  }
                }
                exports2.NodeCanvasFactory = NodeCanvasFactory;
                class NodeCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {
                  _fetchData(url, compressionType) {
                    return fetchData(url).then((data) => {
                      return {
                        cMapData: data,
                        compressionType
                      };
                    });
                  }
                }
                exports2.NodeCMapReaderFactory = NodeCMapReaderFactory;
                class NodeStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {
                  _fetchData(url) {
                    return fetchData(url);
                  }
                }
                exports2.NodeStandardFontDataFactory = NodeStandardFontDataFactory;
              },
              /* 11 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.CanvasGraphics = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _display_utils2 = __w_pdfjs_require__2(6);
                var _pattern_helper = __w_pdfjs_require__2(12);
                var _image_utils = __w_pdfjs_require__2(13);
                const MIN_FONT_SIZE = 16;
                const MAX_FONT_SIZE = 100;
                const MAX_GROUP_SIZE = 4096;
                const EXECUTION_TIME = 15;
                const EXECUTION_STEPS = 10;
                const MAX_SIZE_TO_COMPILE = 1e3;
                const FULL_CHUNK_HEIGHT = 16;
                function mirrorContextOperations(ctx, destCtx) {
                  if (ctx._removeMirroring) {
                    throw new Error("Context is already forwarding operations.");
                  }
                  ctx.__originalSave = ctx.save;
                  ctx.__originalRestore = ctx.restore;
                  ctx.__originalRotate = ctx.rotate;
                  ctx.__originalScale = ctx.scale;
                  ctx.__originalTranslate = ctx.translate;
                  ctx.__originalTransform = ctx.transform;
                  ctx.__originalSetTransform = ctx.setTransform;
                  ctx.__originalResetTransform = ctx.resetTransform;
                  ctx.__originalClip = ctx.clip;
                  ctx.__originalMoveTo = ctx.moveTo;
                  ctx.__originalLineTo = ctx.lineTo;
                  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;
                  ctx.__originalRect = ctx.rect;
                  ctx.__originalClosePath = ctx.closePath;
                  ctx.__originalBeginPath = ctx.beginPath;
                  ctx._removeMirroring = () => {
                    ctx.save = ctx.__originalSave;
                    ctx.restore = ctx.__originalRestore;
                    ctx.rotate = ctx.__originalRotate;
                    ctx.scale = ctx.__originalScale;
                    ctx.translate = ctx.__originalTranslate;
                    ctx.transform = ctx.__originalTransform;
                    ctx.setTransform = ctx.__originalSetTransform;
                    ctx.resetTransform = ctx.__originalResetTransform;
                    ctx.clip = ctx.__originalClip;
                    ctx.moveTo = ctx.__originalMoveTo;
                    ctx.lineTo = ctx.__originalLineTo;
                    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;
                    ctx.rect = ctx.__originalRect;
                    ctx.closePath = ctx.__originalClosePath;
                    ctx.beginPath = ctx.__originalBeginPath;
                    delete ctx._removeMirroring;
                  };
                  ctx.save = function ctxSave() {
                    destCtx.save();
                    this.__originalSave();
                  };
                  ctx.restore = function ctxRestore() {
                    destCtx.restore();
                    this.__originalRestore();
                  };
                  ctx.translate = function ctxTranslate(x, y) {
                    destCtx.translate(x, y);
                    this.__originalTranslate(x, y);
                  };
                  ctx.scale = function ctxScale(x, y) {
                    destCtx.scale(x, y);
                    this.__originalScale(x, y);
                  };
                  ctx.transform = function ctxTransform(a, b, c, d, e, f) {
                    destCtx.transform(a, b, c, d, e, f);
                    this.__originalTransform(a, b, c, d, e, f);
                  };
                  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
                    destCtx.setTransform(a, b, c, d, e, f);
                    this.__originalSetTransform(a, b, c, d, e, f);
                  };
                  ctx.resetTransform = function ctxResetTransform() {
                    destCtx.resetTransform();
                    this.__originalResetTransform();
                  };
                  ctx.rotate = function ctxRotate(angle) {
                    destCtx.rotate(angle);
                    this.__originalRotate(angle);
                  };
                  ctx.clip = function ctxRotate(rule) {
                    destCtx.clip(rule);
                    this.__originalClip(rule);
                  };
                  ctx.moveTo = function(x, y) {
                    destCtx.moveTo(x, y);
                    this.__originalMoveTo(x, y);
                  };
                  ctx.lineTo = function(x, y) {
                    destCtx.lineTo(x, y);
                    this.__originalLineTo(x, y);
                  };
                  ctx.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
                    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
                    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
                  };
                  ctx.rect = function(x, y, width, height) {
                    destCtx.rect(x, y, width, height);
                    this.__originalRect(x, y, width, height);
                  };
                  ctx.closePath = function() {
                    destCtx.closePath();
                    this.__originalClosePath();
                  };
                  ctx.beginPath = function() {
                    destCtx.beginPath();
                    this.__originalBeginPath();
                  };
                }
                class CachedCanvases {
                  constructor(canvasFactory) {
                    this.canvasFactory = canvasFactory;
                    this.cache = /* @__PURE__ */ Object.create(null);
                  }
                  getCanvas(id, width, height) {
                    let canvasEntry;
                    if (this.cache[id] !== void 0) {
                      canvasEntry = this.cache[id];
                      this.canvasFactory.reset(canvasEntry, width, height);
                    } else {
                      canvasEntry = this.canvasFactory.create(width, height);
                      this.cache[id] = canvasEntry;
                    }
                    return canvasEntry;
                  }
                  delete(id) {
                    delete this.cache[id];
                  }
                  clear() {
                    for (const id in this.cache) {
                      const canvasEntry = this.cache[id];
                      this.canvasFactory.destroy(canvasEntry);
                      delete this.cache[id];
                    }
                  }
                }
                function drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {
                  const [a, b, c, d, tx, ty] = (0, _display_utils2.getCurrentTransform)(ctx);
                  if (b === 0 && c === 0) {
                    const tlX = destX * a + tx;
                    const rTlX = Math.round(tlX);
                    const tlY = destY * d + ty;
                    const rTlY = Math.round(tlY);
                    const brX = (destX + destW) * a + tx;
                    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
                    const brY = (destY + destH) * d + ty;
                    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
                    ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);
                    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);
                    ctx.setTransform(a, b, c, d, tx, ty);
                    return [rWidth, rHeight];
                  }
                  if (a === 0 && d === 0) {
                    const tlX = destY * c + tx;
                    const rTlX = Math.round(tlX);
                    const tlY = destX * b + ty;
                    const rTlY = Math.round(tlY);
                    const brX = (destY + destH) * c + tx;
                    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
                    const brY = (destX + destW) * b + ty;
                    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
                    ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);
                    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);
                    ctx.setTransform(a, b, c, d, tx, ty);
                    return [rHeight, rWidth];
                  }
                  ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);
                  const scaleX = Math.hypot(a, b);
                  const scaleY = Math.hypot(c, d);
                  return [scaleX * destW, scaleY * destH];
                }
                function compileType3Glyph(imgData) {
                  const {
                    width,
                    height
                  } = imgData;
                  if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {
                    return null;
                  }
                  const POINT_TO_PROCESS_LIMIT = 1e3;
                  const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
                  const width1 = width + 1;
                  let points = new Uint8Array(width1 * (height + 1));
                  let i, j, j0;
                  const lineSize = width + 7 & ~7;
                  let data = new Uint8Array(lineSize * height), pos = 0;
                  for (const elem of imgData.data) {
                    let mask = 128;
                    while (mask > 0) {
                      data[pos++] = elem & mask ? 0 : 255;
                      mask >>= 1;
                    }
                  }
                  let count = 0;
                  pos = 0;
                  if (data[pos] !== 0) {
                    points[0] = 1;
                    ++count;
                  }
                  for (j = 1; j < width; j++) {
                    if (data[pos] !== data[pos + 1]) {
                      points[j] = data[pos] ? 2 : 1;
                      ++count;
                    }
                    pos++;
                  }
                  if (data[pos] !== 0) {
                    points[j] = 2;
                    ++count;
                  }
                  for (i = 1; i < height; i++) {
                    pos = i * lineSize;
                    j0 = i * width1;
                    if (data[pos - lineSize] !== data[pos]) {
                      points[j0] = data[pos] ? 1 : 8;
                      ++count;
                    }
                    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
                    for (j = 1; j < width; j++) {
                      sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);
                      if (POINT_TYPES[sum]) {
                        points[j0 + j] = POINT_TYPES[sum];
                        ++count;
                      }
                      pos++;
                    }
                    if (data[pos - lineSize] !== data[pos]) {
                      points[j0 + j] = data[pos] ? 2 : 4;
                      ++count;
                    }
                    if (count > POINT_TO_PROCESS_LIMIT) {
                      return null;
                    }
                  }
                  pos = lineSize * (height - 1);
                  j0 = i * width1;
                  if (data[pos] !== 0) {
                    points[j0] = 8;
                    ++count;
                  }
                  for (j = 1; j < width; j++) {
                    if (data[pos] !== data[pos + 1]) {
                      points[j0 + j] = data[pos] ? 4 : 8;
                      ++count;
                    }
                    pos++;
                  }
                  if (data[pos] !== 0) {
                    points[j0 + j] = 4;
                    ++count;
                  }
                  if (count > POINT_TO_PROCESS_LIMIT) {
                    return null;
                  }
                  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
                  const path = new Path2D();
                  for (i = 0; count && i <= height; i++) {
                    let p = i * width1;
                    const end = p + width;
                    while (p < end && !points[p]) {
                      p++;
                    }
                    if (p === end) {
                      continue;
                    }
                    path.moveTo(p % width1, i);
                    const p0 = p;
                    let type = points[p];
                    do {
                      const step = steps[type];
                      do {
                        p += step;
                      } while (!points[p]);
                      const pp = points[p];
                      if (pp !== 5 && pp !== 10) {
                        type = pp;
                        points[p] = 0;
                      } else {
                        type = pp & 51 * type >> 4;
                        points[p] &= type >> 2 | type << 2;
                      }
                      path.lineTo(p % width1, p / width1 | 0);
                      if (!points[p]) {
                        --count;
                      }
                    } while (p0 !== p);
                    --i;
                  }
                  data = null;
                  points = null;
                  const drawOutline = function(c) {
                    c.save();
                    c.scale(1 / width, -1 / height);
                    c.translate(0, -height);
                    c.fill(path);
                    c.beginPath();
                    c.restore();
                  };
                  return drawOutline;
                }
                class CanvasExtraState {
                  constructor(width, height) {
                    this.alphaIsShape = false;
                    this.fontSize = 0;
                    this.fontSizeScale = 1;
                    this.textMatrix = _util2.IDENTITY_MATRIX;
                    this.textMatrixScale = 1;
                    this.fontMatrix = _util2.FONT_IDENTITY_MATRIX;
                    this.leading = 0;
                    this.x = 0;
                    this.y = 0;
                    this.lineX = 0;
                    this.lineY = 0;
                    this.charSpacing = 0;
                    this.wordSpacing = 0;
                    this.textHScale = 1;
                    this.textRenderingMode = _util2.TextRenderingMode.FILL;
                    this.textRise = 0;
                    this.fillColor = "#000000";
                    this.strokeColor = "#000000";
                    this.patternFill = false;
                    this.fillAlpha = 1;
                    this.strokeAlpha = 1;
                    this.lineWidth = 1;
                    this.activeSMask = null;
                    this.transferMaps = "none";
                    this.startNewPathAndClipBox([0, 0, width, height]);
                  }
                  clone() {
                    const clone = Object.create(this);
                    clone.clipBox = this.clipBox.slice();
                    return clone;
                  }
                  setCurrentPoint(x, y) {
                    this.x = x;
                    this.y = y;
                  }
                  updatePathMinMax(transform, x, y) {
                    [x, y] = _util2.Util.applyTransform([x, y], transform);
                    this.minX = Math.min(this.minX, x);
                    this.minY = Math.min(this.minY, y);
                    this.maxX = Math.max(this.maxX, x);
                    this.maxY = Math.max(this.maxY, y);
                  }
                  updateRectMinMax(transform, rect) {
                    const p1 = _util2.Util.applyTransform(rect, transform);
                    const p2 = _util2.Util.applyTransform(rect.slice(2), transform);
                    this.minX = Math.min(this.minX, p1[0], p2[0]);
                    this.minY = Math.min(this.minY, p1[1], p2[1]);
                    this.maxX = Math.max(this.maxX, p1[0], p2[0]);
                    this.maxY = Math.max(this.maxY, p1[1], p2[1]);
                  }
                  updateScalingPathMinMax(transform, minMax) {
                    _util2.Util.scaleMinMax(transform, minMax);
                    this.minX = Math.min(this.minX, minMax[0]);
                    this.maxX = Math.max(this.maxX, minMax[1]);
                    this.minY = Math.min(this.minY, minMax[2]);
                    this.maxY = Math.max(this.maxY, minMax[3]);
                  }
                  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {
                    const box = _util2.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);
                    if (minMax) {
                      minMax[0] = Math.min(minMax[0], box[0], box[2]);
                      minMax[1] = Math.max(minMax[1], box[0], box[2]);
                      minMax[2] = Math.min(minMax[2], box[1], box[3]);
                      minMax[3] = Math.max(minMax[3], box[1], box[3]);
                      return;
                    }
                    this.updateRectMinMax(transform, box);
                  }
                  getPathBoundingBox(pathType = _pattern_helper.PathType.FILL, transform = null) {
                    const box = [this.minX, this.minY, this.maxX, this.maxY];
                    if (pathType === _pattern_helper.PathType.STROKE) {
                      if (!transform) {
                        (0, _util2.unreachable)("Stroke bounding box must include transform.");
                      }
                      const scale = _util2.Util.singularValueDecompose2dScale(transform);
                      const xStrokePad = scale[0] * this.lineWidth / 2;
                      const yStrokePad = scale[1] * this.lineWidth / 2;
                      box[0] -= xStrokePad;
                      box[1] -= yStrokePad;
                      box[2] += xStrokePad;
                      box[3] += yStrokePad;
                    }
                    return box;
                  }
                  updateClipFromPath() {
                    const intersect = _util2.Util.intersect(this.clipBox, this.getPathBoundingBox());
                    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);
                  }
                  isEmptyClip() {
                    return this.minX === Infinity;
                  }
                  startNewPathAndClipBox(box) {
                    this.clipBox = box;
                    this.minX = Infinity;
                    this.minY = Infinity;
                    this.maxX = 0;
                    this.maxY = 0;
                  }
                  getClippedPathBoundingBox(pathType = _pattern_helper.PathType.FILL, transform = null) {
                    return _util2.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));
                  }
                }
                function putBinaryImageData(ctx, imgData) {
                  if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
                    ctx.putImageData(imgData, 0, 0);
                    return;
                  }
                  const height = imgData.height, width = imgData.width;
                  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
                  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
                  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
                  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
                  let srcPos = 0, destPos;
                  const src = imgData.data;
                  const dest = chunkImgData.data;
                  let i, j, thisChunkHeight, elemsInThisChunk;
                  if (imgData.kind === _util2.ImageKind.GRAYSCALE_1BPP) {
                    const srcLength = src.byteLength;
                    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
                    const dest32DataLength = dest32.length;
                    const fullSrcDiff = width + 7 >> 3;
                    const white = 4294967295;
                    const black = _util2.FeatureTest.isLittleEndian ? 4278190080 : 255;
                    for (i = 0; i < totalChunks; i++) {
                      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                      destPos = 0;
                      for (j = 0; j < thisChunkHeight; j++) {
                        const srcDiff = srcLength - srcPos;
                        let k = 0;
                        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                        const kEndUnrolled = kEnd & ~7;
                        let mask = 0;
                        let srcByte = 0;
                        for (; k < kEndUnrolled; k += 8) {
                          srcByte = src[srcPos++];
                          dest32[destPos++] = srcByte & 128 ? white : black;
                          dest32[destPos++] = srcByte & 64 ? white : black;
                          dest32[destPos++] = srcByte & 32 ? white : black;
                          dest32[destPos++] = srcByte & 16 ? white : black;
                          dest32[destPos++] = srcByte & 8 ? white : black;
                          dest32[destPos++] = srcByte & 4 ? white : black;
                          dest32[destPos++] = srcByte & 2 ? white : black;
                          dest32[destPos++] = srcByte & 1 ? white : black;
                        }
                        for (; k < kEnd; k++) {
                          if (mask === 0) {
                            srcByte = src[srcPos++];
                            mask = 128;
                          }
                          dest32[destPos++] = srcByte & mask ? white : black;
                          mask >>= 1;
                        }
                      }
                      while (destPos < dest32DataLength) {
                        dest32[destPos++] = 0;
                      }
                      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                    }
                  } else if (imgData.kind === _util2.ImageKind.RGBA_32BPP) {
                    j = 0;
                    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
                    for (i = 0; i < fullChunks; i++) {
                      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                      srcPos += elemsInThisChunk;
                      ctx.putImageData(chunkImgData, 0, j);
                      j += FULL_CHUNK_HEIGHT;
                    }
                    if (i < totalChunks) {
                      elemsInThisChunk = width * partialChunkHeight * 4;
                      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                      ctx.putImageData(chunkImgData, 0, j);
                    }
                  } else if (imgData.kind === _util2.ImageKind.RGB_24BPP) {
                    thisChunkHeight = FULL_CHUNK_HEIGHT;
                    elemsInThisChunk = width * thisChunkHeight;
                    for (i = 0; i < totalChunks; i++) {
                      if (i >= fullChunks) {
                        thisChunkHeight = partialChunkHeight;
                        elemsInThisChunk = width * thisChunkHeight;
                      }
                      destPos = 0;
                      for (j = elemsInThisChunk; j--; ) {
                        dest[destPos++] = src[srcPos++];
                        dest[destPos++] = src[srcPos++];
                        dest[destPos++] = src[srcPos++];
                        dest[destPos++] = 255;
                      }
                      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                    }
                  } else {
                    throw new Error(`bad image kind: ${imgData.kind}`);
                  }
                }
                function putBinaryImageMask(ctx, imgData) {
                  if (imgData.bitmap) {
                    ctx.drawImage(imgData.bitmap, 0, 0);
                    return;
                  }
                  const height = imgData.height, width = imgData.width;
                  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
                  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
                  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
                  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
                  let srcPos = 0;
                  const src = imgData.data;
                  const dest = chunkImgData.data;
                  for (let i = 0; i < totalChunks; i++) {
                    const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                    ({
                      srcPos
                    } = (0, _image_utils.convertBlackAndWhiteToRGBA)({
                      src,
                      srcPos,
                      dest,
                      width,
                      height: thisChunkHeight,
                      nonBlackColor: 0
                    }));
                    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                  }
                }
                function copyCtxState(sourceCtx, destCtx) {
                  const properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font", "filter"];
                  for (const property of properties) {
                    if (sourceCtx[property] !== void 0) {
                      destCtx[property] = sourceCtx[property];
                    }
                  }
                  if (sourceCtx.setLineDash !== void 0) {
                    destCtx.setLineDash(sourceCtx.getLineDash());
                    destCtx.lineDashOffset = sourceCtx.lineDashOffset;
                  }
                }
                function resetCtxToDefault(ctx) {
                  ctx.strokeStyle = ctx.fillStyle = "#000000";
                  ctx.fillRule = "nonzero";
                  ctx.globalAlpha = 1;
                  ctx.lineWidth = 1;
                  ctx.lineCap = "butt";
                  ctx.lineJoin = "miter";
                  ctx.miterLimit = 10;
                  ctx.globalCompositeOperation = "source-over";
                  ctx.font = "10px sans-serif";
                  if (ctx.setLineDash !== void 0) {
                    ctx.setLineDash([]);
                    ctx.lineDashOffset = 0;
                  }
                  if (!_util2.isNodeJS) {
                    const {
                      filter
                    } = ctx;
                    if (filter !== "none" && filter !== "") {
                      ctx.filter = "none";
                    }
                  }
                }
                function composeSMaskBackdrop(bytes, r0, g0, b0) {
                  const length = bytes.length;
                  for (let i = 3; i < length; i += 4) {
                    const alpha = bytes[i];
                    if (alpha === 0) {
                      bytes[i - 3] = r0;
                      bytes[i - 2] = g0;
                      bytes[i - 1] = b0;
                    } else if (alpha < 255) {
                      const alpha_ = 255 - alpha;
                      bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
                      bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
                      bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
                    }
                  }
                }
                function composeSMaskAlpha(maskData, layerData, transferMap) {
                  const length = maskData.length;
                  const scale = 1 / 255;
                  for (let i = 3; i < length; i += 4) {
                    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
                    layerData[i] = layerData[i] * alpha * scale | 0;
                  }
                }
                function composeSMaskLuminosity(maskData, layerData, transferMap) {
                  const length = maskData.length;
                  for (let i = 3; i < length; i += 4) {
                    const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
                    layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
                  }
                }
                function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {
                  const hasBackdrop = !!backdrop;
                  const r0 = hasBackdrop ? backdrop[0] : 0;
                  const g0 = hasBackdrop ? backdrop[1] : 0;
                  const b0 = hasBackdrop ? backdrop[2] : 0;
                  const composeFn = subtype === "Luminosity" ? composeSMaskLuminosity : composeSMaskAlpha;
                  const PIXELS_TO_PROCESS = 1048576;
                  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
                  for (let row = 0; row < height; row += chunkSize) {
                    const chunkHeight = Math.min(chunkSize, height - row);
                    const maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);
                    const layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);
                    if (hasBackdrop) {
                      composeSMaskBackdrop(maskData.data, r0, g0, b0);
                    }
                    composeFn(maskData.data, layerData.data, transferMap);
                    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);
                  }
                }
                function composeSMask(ctx, smask, layerCtx, layerBox) {
                  const layerOffsetX = layerBox[0];
                  const layerOffsetY = layerBox[1];
                  const layerWidth = layerBox[2] - layerOffsetX;
                  const layerHeight = layerBox[3] - layerOffsetY;
                  if (layerWidth === 0 || layerHeight === 0) {
                    return;
                  }
                  genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);
                  ctx.save();
                  ctx.globalAlpha = 1;
                  ctx.globalCompositeOperation = "source-over";
                  ctx.setTransform(1, 0, 0, 1, 0, 0);
                  ctx.drawImage(layerCtx.canvas, 0, 0);
                  ctx.restore();
                }
                function getImageSmoothingEnabled(transform, interpolate) {
                  const scale = _util2.Util.singularValueDecompose2dScale(transform);
                  scale[0] = Math.fround(scale[0]);
                  scale[1] = Math.fround(scale[1]);
                  const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils2.PixelsPerInch.PDF_TO_CSS_UNITS);
                  if (interpolate !== void 0) {
                    return interpolate;
                  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {
                    return true;
                  }
                  return false;
                }
                const LINE_CAP_STYLES = ["butt", "round", "square"];
                const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
                const NORMAL_CLIP = {};
                const EO_CLIP = {};
                class CanvasGraphics {
                  constructor(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, {
                    optionalContentConfig,
                    markedContentStack = null
                  }, annotationCanvasMap, pageColors) {
                    this.ctx = canvasCtx;
                    this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
                    this.stateStack = [];
                    this.pendingClip = null;
                    this.pendingEOFill = false;
                    this.res = null;
                    this.xobjs = null;
                    this.commonObjs = commonObjs;
                    this.objs = objs;
                    this.canvasFactory = canvasFactory;
                    this.filterFactory = filterFactory;
                    this.groupStack = [];
                    this.processingType3 = null;
                    this.baseTransform = null;
                    this.baseTransformStack = [];
                    this.groupLevel = 0;
                    this.smaskStack = [];
                    this.smaskCounter = 0;
                    this.tempSMask = null;
                    this.suspendedCtx = null;
                    this.contentVisible = true;
                    this.markedContentStack = markedContentStack || [];
                    this.optionalContentConfig = optionalContentConfig;
                    this.cachedCanvases = new CachedCanvases(this.canvasFactory);
                    this.cachedPatterns = /* @__PURE__ */ new Map();
                    this.annotationCanvasMap = annotationCanvasMap;
                    this.viewportScale = 1;
                    this.outputScaleX = 1;
                    this.outputScaleY = 1;
                    this.pageColors = pageColors;
                    this._cachedScaleForStroking = [-1, 0];
                    this._cachedGetSinglePixelWidth = null;
                    this._cachedBitmapsMap = /* @__PURE__ */ new Map();
                  }
                  getObject(data, fallback = null) {
                    if (typeof data === "string") {
                      return data.startsWith("g_") ? this.commonObjs.get(data) : this.objs.get(data);
                    }
                    return fallback;
                  }
                  beginDrawing({
                    transform,
                    viewport,
                    transparency = false,
                    background = null
                  }) {
                    const width = this.ctx.canvas.width;
                    const height = this.ctx.canvas.height;
                    const savedFillStyle = this.ctx.fillStyle;
                    this.ctx.fillStyle = background || "#ffffff";
                    this.ctx.fillRect(0, 0, width, height);
                    this.ctx.fillStyle = savedFillStyle;
                    if (transparency) {
                      const transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height);
                      this.compositeCtx = this.ctx;
                      this.transparentCanvas = transparentCanvas.canvas;
                      this.ctx = transparentCanvas.context;
                      this.ctx.save();
                      this.ctx.transform(...(0, _display_utils2.getCurrentTransform)(this.compositeCtx));
                    }
                    this.ctx.save();
                    resetCtxToDefault(this.ctx);
                    if (transform) {
                      this.ctx.transform(...transform);
                      this.outputScaleX = transform[0];
                      this.outputScaleY = transform[0];
                    }
                    this.ctx.transform(...viewport.transform);
                    this.viewportScale = viewport.scale;
                    this.baseTransform = (0, _display_utils2.getCurrentTransform)(this.ctx);
                  }
                  executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
                    const argsArray = operatorList.argsArray;
                    const fnArray = operatorList.fnArray;
                    let i = executionStartIdx || 0;
                    const argsArrayLen = argsArray.length;
                    if (argsArrayLen === i) {
                      return i;
                    }
                    const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
                    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
                    let steps = 0;
                    const commonObjs = this.commonObjs;
                    const objs = this.objs;
                    let fnId;
                    while (true) {
                      if (stepper !== void 0 && i === stepper.nextBreakPoint) {
                        stepper.breakIt(i, continueCallback);
                        return i;
                      }
                      fnId = fnArray[i];
                      if (fnId !== _util2.OPS.dependency) {
                        this[fnId].apply(this, argsArray[i]);
                      } else {
                        for (const depObjId of argsArray[i]) {
                          const objsPool = depObjId.startsWith("g_") ? commonObjs : objs;
                          if (!objsPool.has(depObjId)) {
                            objsPool.get(depObjId, continueCallback);
                            return i;
                          }
                        }
                      }
                      i++;
                      if (i === argsArrayLen) {
                        return i;
                      }
                      if (chunkOperations && ++steps > EXECUTION_STEPS) {
                        if (Date.now() > endTime) {
                          continueCallback();
                          return i;
                        }
                        steps = 0;
                      }
                    }
                  }
                  #restoreInitialState() {
                    while (this.stateStack.length || this.inSMaskMode) {
                      this.restore();
                    }
                    this.ctx.restore();
                    if (this.transparentCanvas) {
                      this.ctx = this.compositeCtx;
                      this.ctx.save();
                      this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                      this.ctx.drawImage(this.transparentCanvas, 0, 0);
                      this.ctx.restore();
                      this.transparentCanvas = null;
                    }
                  }
                  endDrawing() {
                    this.#restoreInitialState();
                    this.cachedCanvases.clear();
                    this.cachedPatterns.clear();
                    for (const cache of this._cachedBitmapsMap.values()) {
                      for (const canvas of cache.values()) {
                        if (typeof HTMLCanvasElement !== "undefined" && canvas instanceof HTMLCanvasElement) {
                          canvas.width = canvas.height = 0;
                        }
                      }
                      cache.clear();
                    }
                    this._cachedBitmapsMap.clear();
                    this.#drawFilter();
                  }
                  #drawFilter() {
                    if (this.pageColors) {
                      const hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);
                      if (hcmFilterId !== "none") {
                        const savedFilter = this.ctx.filter;
                        this.ctx.filter = hcmFilterId;
                        this.ctx.drawImage(this.ctx.canvas, 0, 0);
                        this.ctx.filter = savedFilter;
                      }
                    }
                  }
                  _scaleImage(img, inverseTransform) {
                    const width = img.width;
                    const height = img.height;
                    let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);
                    let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);
                    let paintWidth = width, paintHeight = height;
                    let tmpCanvasId = "prescale1";
                    let tmpCanvas, tmpCtx;
                    while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
                      let newWidth = paintWidth, newHeight = paintHeight;
                      if (widthScale > 2 && paintWidth > 1) {
                        newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);
                        widthScale /= paintWidth / newWidth;
                      }
                      if (heightScale > 2 && paintHeight > 1) {
                        newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;
                        heightScale /= paintHeight / newHeight;
                      }
                      tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
                      tmpCtx = tmpCanvas.context;
                      tmpCtx.clearRect(0, 0, newWidth, newHeight);
                      tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
                      img = tmpCanvas.canvas;
                      paintWidth = newWidth;
                      paintHeight = newHeight;
                      tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
                    }
                    return {
                      img,
                      paintWidth,
                      paintHeight
                    };
                  }
                  _createMaskCanvas(img) {
                    const ctx = this.ctx;
                    const {
                      width,
                      height
                    } = img;
                    const fillColor = this.current.fillColor;
                    const isPatternFill = this.current.patternFill;
                    const currentTransform = (0, _display_utils2.getCurrentTransform)(ctx);
                    let cache, cacheKey, scaled, maskCanvas;
                    if ((img.bitmap || img.data) && img.count > 1) {
                      const mainKey = img.bitmap || img.data.buffer;
                      cacheKey = JSON.stringify(isPatternFill ? currentTransform : [currentTransform.slice(0, 4), fillColor]);
                      cache = this._cachedBitmapsMap.get(mainKey);
                      if (!cache) {
                        cache = /* @__PURE__ */ new Map();
                        this._cachedBitmapsMap.set(mainKey, cache);
                      }
                      const cachedImage = cache.get(cacheKey);
                      if (cachedImage && !isPatternFill) {
                        const offsetX2 = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);
                        const offsetY2 = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);
                        return {
                          canvas: cachedImage,
                          offsetX: offsetX2,
                          offsetY: offsetY2
                        };
                      }
                      scaled = cachedImage;
                    }
                    if (!scaled) {
                      maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                      putBinaryImageMask(maskCanvas.context, img);
                    }
                    let maskToCanvas = _util2.Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);
                    maskToCanvas = _util2.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);
                    const cord1 = _util2.Util.applyTransform([0, 0], maskToCanvas);
                    const cord2 = _util2.Util.applyTransform([width, height], maskToCanvas);
                    const rect = _util2.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);
                    const drawnWidth = Math.round(rect[2] - rect[0]) || 1;
                    const drawnHeight = Math.round(rect[3] - rect[1]) || 1;
                    const fillCanvas = this.cachedCanvases.getCanvas("fillCanvas", drawnWidth, drawnHeight);
                    const fillCtx = fillCanvas.context;
                    const offsetX = Math.min(cord1[0], cord2[0]);
                    const offsetY = Math.min(cord1[1], cord2[1]);
                    fillCtx.translate(-offsetX, -offsetY);
                    fillCtx.transform(...maskToCanvas);
                    if (!scaled) {
                      scaled = this._scaleImage(maskCanvas.canvas, (0, _display_utils2.getCurrentTransformInverse)(fillCtx));
                      scaled = scaled.img;
                      if (cache && isPatternFill) {
                        cache.set(cacheKey, scaled);
                      }
                    }
                    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled((0, _display_utils2.getCurrentTransform)(fillCtx), img.interpolate);
                    drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);
                    fillCtx.globalCompositeOperation = "source-in";
                    const inverse = _util2.Util.transform((0, _display_utils2.getCurrentTransformInverse)(fillCtx), [1, 0, 0, 1, -offsetX, -offsetY]);
                    fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, _pattern_helper.PathType.FILL) : fillColor;
                    fillCtx.fillRect(0, 0, width, height);
                    if (cache && !isPatternFill) {
                      this.cachedCanvases.delete("fillCanvas");
                      cache.set(cacheKey, fillCanvas.canvas);
                    }
                    return {
                      canvas: fillCanvas.canvas,
                      offsetX: Math.round(offsetX),
                      offsetY: Math.round(offsetY)
                    };
                  }
                  setLineWidth(width) {
                    if (width !== this.current.lineWidth) {
                      this._cachedScaleForStroking[0] = -1;
                    }
                    this.current.lineWidth = width;
                    this.ctx.lineWidth = width;
                  }
                  setLineCap(style) {
                    this.ctx.lineCap = LINE_CAP_STYLES[style];
                  }
                  setLineJoin(style) {
                    this.ctx.lineJoin = LINE_JOIN_STYLES[style];
                  }
                  setMiterLimit(limit) {
                    this.ctx.miterLimit = limit;
                  }
                  setDash(dashArray, dashPhase) {
                    const ctx = this.ctx;
                    if (ctx.setLineDash !== void 0) {
                      ctx.setLineDash(dashArray);
                      ctx.lineDashOffset = dashPhase;
                    }
                  }
                  setRenderingIntent(intent) {
                  }
                  setFlatness(flatness) {
                  }
                  setGState(states) {
                    for (const [key, value] of states) {
                      switch (key) {
                        case "LW":
                          this.setLineWidth(value);
                          break;
                        case "LC":
                          this.setLineCap(value);
                          break;
                        case "LJ":
                          this.setLineJoin(value);
                          break;
                        case "ML":
                          this.setMiterLimit(value);
                          break;
                        case "D":
                          this.setDash(value[0], value[1]);
                          break;
                        case "RI":
                          this.setRenderingIntent(value);
                          break;
                        case "FL":
                          this.setFlatness(value);
                          break;
                        case "Font":
                          this.setFont(value[0], value[1]);
                          break;
                        case "CA":
                          this.current.strokeAlpha = value;
                          break;
                        case "ca":
                          this.current.fillAlpha = value;
                          this.ctx.globalAlpha = value;
                          break;
                        case "BM":
                          this.ctx.globalCompositeOperation = value;
                          break;
                        case "SMask":
                          this.current.activeSMask = value ? this.tempSMask : null;
                          this.tempSMask = null;
                          this.checkSMaskState();
                          break;
                        case "TR":
                          this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);
                          break;
                      }
                    }
                  }
                  get inSMaskMode() {
                    return !!this.suspendedCtx;
                  }
                  checkSMaskState() {
                    const inSMaskMode = this.inSMaskMode;
                    if (this.current.activeSMask && !inSMaskMode) {
                      this.beginSMaskMode();
                    } else if (!this.current.activeSMask && inSMaskMode) {
                      this.endSMaskMode();
                    }
                  }
                  beginSMaskMode() {
                    if (this.inSMaskMode) {
                      throw new Error("beginSMaskMode called while already in smask mode");
                    }
                    const drawnWidth = this.ctx.canvas.width;
                    const drawnHeight = this.ctx.canvas.height;
                    const cacheId = "smaskGroupAt" + this.groupLevel;
                    const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);
                    this.suspendedCtx = this.ctx;
                    this.ctx = scratchCanvas.context;
                    const ctx = this.ctx;
                    ctx.setTransform(...(0, _display_utils2.getCurrentTransform)(this.suspendedCtx));
                    copyCtxState(this.suspendedCtx, ctx);
                    mirrorContextOperations(ctx, this.suspendedCtx);
                    this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
                  }
                  endSMaskMode() {
                    if (!this.inSMaskMode) {
                      throw new Error("endSMaskMode called while not in smask mode");
                    }
                    this.ctx._removeMirroring();
                    copyCtxState(this.ctx, this.suspendedCtx);
                    this.ctx = this.suspendedCtx;
                    this.suspendedCtx = null;
                  }
                  compose(dirtyBox) {
                    if (!this.current.activeSMask) {
                      return;
                    }
                    if (!dirtyBox) {
                      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
                    } else {
                      dirtyBox[0] = Math.floor(dirtyBox[0]);
                      dirtyBox[1] = Math.floor(dirtyBox[1]);
                      dirtyBox[2] = Math.ceil(dirtyBox[2]);
                      dirtyBox[3] = Math.ceil(dirtyBox[3]);
                    }
                    const smask = this.current.activeSMask;
                    const suspendedCtx = this.suspendedCtx;
                    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
                    this.ctx.save();
                    this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
                    this.ctx.restore();
                  }
                  save() {
                    if (this.inSMaskMode) {
                      copyCtxState(this.ctx, this.suspendedCtx);
                      this.suspendedCtx.save();
                    } else {
                      this.ctx.save();
                    }
                    const old = this.current;
                    this.stateStack.push(old);
                    this.current = old.clone();
                  }
                  restore() {
                    if (this.stateStack.length === 0 && this.inSMaskMode) {
                      this.endSMaskMode();
                    }
                    if (this.stateStack.length !== 0) {
                      this.current = this.stateStack.pop();
                      if (this.inSMaskMode) {
                        this.suspendedCtx.restore();
                        copyCtxState(this.suspendedCtx, this.ctx);
                      } else {
                        this.ctx.restore();
                      }
                      this.checkSMaskState();
                      this.pendingClip = null;
                      this._cachedScaleForStroking[0] = -1;
                      this._cachedGetSinglePixelWidth = null;
                    }
                  }
                  transform(a, b, c, d, e, f) {
                    this.ctx.transform(a, b, c, d, e, f);
                    this._cachedScaleForStroking[0] = -1;
                    this._cachedGetSinglePixelWidth = null;
                  }
                  constructPath(ops, args, minMax) {
                    const ctx = this.ctx;
                    const current = this.current;
                    let x = current.x, y = current.y;
                    let startX, startY;
                    const currentTransform = (0, _display_utils2.getCurrentTransform)(ctx);
                    const isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;
                    const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;
                    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {
                      switch (ops[i] | 0) {
                        case _util2.OPS.rectangle:
                          x = args[j++];
                          y = args[j++];
                          const width = args[j++];
                          const height = args[j++];
                          const xw = x + width;
                          const yh = y + height;
                          ctx.moveTo(x, y);
                          if (width === 0 || height === 0) {
                            ctx.lineTo(xw, yh);
                          } else {
                            ctx.lineTo(xw, y);
                            ctx.lineTo(xw, yh);
                            ctx.lineTo(x, yh);
                          }
                          if (!isScalingMatrix) {
                            current.updateRectMinMax(currentTransform, [x, y, xw, yh]);
                          }
                          ctx.closePath();
                          break;
                        case _util2.OPS.moveTo:
                          x = args[j++];
                          y = args[j++];
                          ctx.moveTo(x, y);
                          if (!isScalingMatrix) {
                            current.updatePathMinMax(currentTransform, x, y);
                          }
                          break;
                        case _util2.OPS.lineTo:
                          x = args[j++];
                          y = args[j++];
                          ctx.lineTo(x, y);
                          if (!isScalingMatrix) {
                            current.updatePathMinMax(currentTransform, x, y);
                          }
                          break;
                        case _util2.OPS.curveTo:
                          startX = x;
                          startY = y;
                          x = args[j + 4];
                          y = args[j + 5];
                          ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                          current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);
                          j += 6;
                          break;
                        case _util2.OPS.curveTo2:
                          startX = x;
                          startY = y;
                          ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                          current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);
                          x = args[j + 2];
                          y = args[j + 3];
                          j += 4;
                          break;
                        case _util2.OPS.curveTo3:
                          startX = x;
                          startY = y;
                          x = args[j + 2];
                          y = args[j + 3];
                          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
                          current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);
                          j += 4;
                          break;
                        case _util2.OPS.closePath:
                          ctx.closePath();
                          break;
                      }
                    }
                    if (isScalingMatrix) {
                      current.updateScalingPathMinMax(currentTransform, minMaxForBezier);
                    }
                    current.setCurrentPoint(x, y);
                  }
                  closePath() {
                    this.ctx.closePath();
                  }
                  stroke(consumePath = true) {
                    const ctx = this.ctx;
                    const strokeColor = this.current.strokeColor;
                    ctx.globalAlpha = this.current.strokeAlpha;
                    if (this.contentVisible) {
                      if (typeof strokeColor === "object" && strokeColor?.getPattern) {
                        ctx.save();
                        ctx.strokeStyle = strokeColor.getPattern(ctx, this, (0, _display_utils2.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.STROKE);
                        this.rescaleAndStroke(false);
                        ctx.restore();
                      } else {
                        this.rescaleAndStroke(true);
                      }
                    }
                    if (consumePath) {
                      this.consumePath(this.current.getClippedPathBoundingBox());
                    }
                    ctx.globalAlpha = this.current.fillAlpha;
                  }
                  closeStroke() {
                    this.closePath();
                    this.stroke();
                  }
                  fill(consumePath = true) {
                    const ctx = this.ctx;
                    const fillColor = this.current.fillColor;
                    const isPatternFill = this.current.patternFill;
                    let needRestore = false;
                    if (isPatternFill) {
                      ctx.save();
                      ctx.fillStyle = fillColor.getPattern(ctx, this, (0, _display_utils2.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL);
                      needRestore = true;
                    }
                    const intersect = this.current.getClippedPathBoundingBox();
                    if (this.contentVisible && intersect !== null) {
                      if (this.pendingEOFill) {
                        ctx.fill("evenodd");
                        this.pendingEOFill = false;
                      } else {
                        ctx.fill();
                      }
                    }
                    if (needRestore) {
                      ctx.restore();
                    }
                    if (consumePath) {
                      this.consumePath(intersect);
                    }
                  }
                  eoFill() {
                    this.pendingEOFill = true;
                    this.fill();
                  }
                  fillStroke() {
                    this.fill(false);
                    this.stroke(false);
                    this.consumePath();
                  }
                  eoFillStroke() {
                    this.pendingEOFill = true;
                    this.fillStroke();
                  }
                  closeFillStroke() {
                    this.closePath();
                    this.fillStroke();
                  }
                  closeEOFillStroke() {
                    this.pendingEOFill = true;
                    this.closePath();
                    this.fillStroke();
                  }
                  endPath() {
                    this.consumePath();
                  }
                  clip() {
                    this.pendingClip = NORMAL_CLIP;
                  }
                  eoClip() {
                    this.pendingClip = EO_CLIP;
                  }
                  beginText() {
                    this.current.textMatrix = _util2.IDENTITY_MATRIX;
                    this.current.textMatrixScale = 1;
                    this.current.x = this.current.lineX = 0;
                    this.current.y = this.current.lineY = 0;
                  }
                  endText() {
                    const paths = this.pendingTextPaths;
                    const ctx = this.ctx;
                    if (paths === void 0) {
                      ctx.beginPath();
                      return;
                    }
                    ctx.save();
                    ctx.beginPath();
                    for (const path of paths) {
                      ctx.setTransform(...path.transform);
                      ctx.translate(path.x, path.y);
                      path.addToPath(ctx, path.fontSize);
                    }
                    ctx.restore();
                    ctx.clip();
                    ctx.beginPath();
                    delete this.pendingTextPaths;
                  }
                  setCharSpacing(spacing) {
                    this.current.charSpacing = spacing;
                  }
                  setWordSpacing(spacing) {
                    this.current.wordSpacing = spacing;
                  }
                  setHScale(scale) {
                    this.current.textHScale = scale / 100;
                  }
                  setLeading(leading) {
                    this.current.leading = -leading;
                  }
                  setFont(fontRefName, size) {
                    const fontObj = this.commonObjs.get(fontRefName);
                    const current = this.current;
                    if (!fontObj) {
                      throw new Error(`Can't find font for ${fontRefName}`);
                    }
                    current.fontMatrix = fontObj.fontMatrix || _util2.FONT_IDENTITY_MATRIX;
                    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
                      (0, _util2.warn)("Invalid font matrix for font " + fontRefName);
                    }
                    if (size < 0) {
                      size = -size;
                      current.fontDirection = -1;
                    } else {
                      current.fontDirection = 1;
                    }
                    this.current.font = fontObj;
                    this.current.fontSize = size;
                    if (fontObj.isType3Font) {
                      return;
                    }
                    const name = fontObj.loadedName || "sans-serif";
                    const typeface = fontObj.systemFontInfo?.css || `"${name}", ${fontObj.fallbackName}`;
                    let bold = "normal";
                    if (fontObj.black) {
                      bold = "900";
                    } else if (fontObj.bold) {
                      bold = "bold";
                    }
                    const italic = fontObj.italic ? "italic" : "normal";
                    let browserFontSize = size;
                    if (size < MIN_FONT_SIZE) {
                      browserFontSize = MIN_FONT_SIZE;
                    } else if (size > MAX_FONT_SIZE) {
                      browserFontSize = MAX_FONT_SIZE;
                    }
                    this.current.fontSizeScale = size / browserFontSize;
                    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;
                  }
                  setTextRenderingMode(mode) {
                    this.current.textRenderingMode = mode;
                  }
                  setTextRise(rise) {
                    this.current.textRise = rise;
                  }
                  moveText(x, y) {
                    this.current.x = this.current.lineX += x;
                    this.current.y = this.current.lineY += y;
                  }
                  setLeadingMoveText(x, y) {
                    this.setLeading(-y);
                    this.moveText(x, y);
                  }
                  setTextMatrix(a, b, c, d, e, f) {
                    this.current.textMatrix = [a, b, c, d, e, f];
                    this.current.textMatrixScale = Math.hypot(a, b);
                    this.current.x = this.current.lineX = 0;
                    this.current.y = this.current.lineY = 0;
                  }
                  nextLine() {
                    this.moveText(0, this.current.leading);
                  }
                  paintChar(character, x, y, patternTransform) {
                    const ctx = this.ctx;
                    const current = this.current;
                    const font = current.font;
                    const textRenderingMode = current.textRenderingMode;
                    const fontSize = current.fontSize / current.fontSizeScale;
                    const fillStrokeMode = textRenderingMode & _util2.TextRenderingMode.FILL_STROKE_MASK;
                    const isAddToPathSet = !!(textRenderingMode & _util2.TextRenderingMode.ADD_TO_PATH_FLAG);
                    const patternFill = current.patternFill && !font.missingFile;
                    let addToPath;
                    if (font.disableFontFace || isAddToPathSet || patternFill) {
                      addToPath = font.getPathGenerator(this.commonObjs, character);
                    }
                    if (font.disableFontFace || patternFill) {
                      ctx.save();
                      ctx.translate(x, y);
                      ctx.beginPath();
                      addToPath(ctx, fontSize);
                      if (patternTransform) {
                        ctx.setTransform(...patternTransform);
                      }
                      if (fillStrokeMode === _util2.TextRenderingMode.FILL || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                        ctx.fill();
                      }
                      if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                        ctx.stroke();
                      }
                      ctx.restore();
                    } else {
                      if (fillStrokeMode === _util2.TextRenderingMode.FILL || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                        ctx.fillText(character, x, y);
                      }
                      if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                        ctx.strokeText(character, x, y);
                      }
                    }
                    if (isAddToPathSet) {
                      const paths = this.pendingTextPaths ||= [];
                      paths.push({
                        transform: (0, _display_utils2.getCurrentTransform)(ctx),
                        x,
                        y,
                        fontSize,
                        addToPath
                      });
                    }
                  }
                  get isFontSubpixelAAEnabled() {
                    const {
                      context: ctx
                    } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);
                    ctx.scale(1.5, 1);
                    ctx.fillText("I", 0, 10);
                    const data = ctx.getImageData(0, 0, 10, 10).data;
                    let enabled = false;
                    for (let i = 3; i < data.length; i += 4) {
                      if (data[i] > 0 && data[i] < 255) {
                        enabled = true;
                        break;
                      }
                    }
                    return (0, _util2.shadow)(this, "isFontSubpixelAAEnabled", enabled);
                  }
                  showText(glyphs) {
                    const current = this.current;
                    const font = current.font;
                    if (font.isType3Font) {
                      return this.showType3Text(glyphs);
                    }
                    const fontSize = current.fontSize;
                    if (fontSize === 0) {
                      return void 0;
                    }
                    const ctx = this.ctx;
                    const fontSizeScale = current.fontSizeScale;
                    const charSpacing = current.charSpacing;
                    const wordSpacing = current.wordSpacing;
                    const fontDirection = current.fontDirection;
                    const textHScale = current.textHScale * fontDirection;
                    const glyphsLength = glyphs.length;
                    const vertical = font.vertical;
                    const spacingDir = vertical ? 1 : -1;
                    const defaultVMetrics = font.defaultVMetrics;
                    const widthAdvanceScale = fontSize * current.fontMatrix[0];
                    const simpleFillText = current.textRenderingMode === _util2.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
                    ctx.save();
                    ctx.transform(...current.textMatrix);
                    ctx.translate(current.x, current.y + current.textRise);
                    if (fontDirection > 0) {
                      ctx.scale(textHScale, -1);
                    } else {
                      ctx.scale(textHScale, 1);
                    }
                    let patternTransform;
                    if (current.patternFill) {
                      ctx.save();
                      const pattern = current.fillColor.getPattern(ctx, this, (0, _display_utils2.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL);
                      patternTransform = (0, _display_utils2.getCurrentTransform)(ctx);
                      ctx.restore();
                      ctx.fillStyle = pattern;
                    }
                    let lineWidth = current.lineWidth;
                    const scale = current.textMatrixScale;
                    if (scale === 0 || lineWidth === 0) {
                      const fillStrokeMode = current.textRenderingMode & _util2.TextRenderingMode.FILL_STROKE_MASK;
                      if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                        lineWidth = this.getSinglePixelWidth();
                      }
                    } else {
                      lineWidth /= scale;
                    }
                    if (fontSizeScale !== 1) {
                      ctx.scale(fontSizeScale, fontSizeScale);
                      lineWidth /= fontSizeScale;
                    }
                    ctx.lineWidth = lineWidth;
                    if (font.isInvalidPDFjsFont) {
                      const chars = [];
                      let width = 0;
                      for (const glyph of glyphs) {
                        chars.push(glyph.unicode);
                        width += glyph.width;
                      }
                      ctx.fillText(chars.join(""), 0, 0);
                      current.x += width * widthAdvanceScale * textHScale;
                      ctx.restore();
                      this.compose();
                      return void 0;
                    }
                    let x = 0, i;
                    for (i = 0; i < glyphsLength; ++i) {
                      const glyph = glyphs[i];
                      if (typeof glyph === "number") {
                        x += spacingDir * glyph * fontSize / 1e3;
                        continue;
                      }
                      let restoreNeeded = false;
                      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                      const character = glyph.fontChar;
                      const accent = glyph.accent;
                      let scaledX, scaledY;
                      let width = glyph.width;
                      if (vertical) {
                        const vmetric = glyph.vmetric || defaultVMetrics;
                        const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;
                        const vy = vmetric[2] * widthAdvanceScale;
                        width = vmetric ? -vmetric[0] : width;
                        scaledX = vx / fontSizeScale;
                        scaledY = (x + vy) / fontSizeScale;
                      } else {
                        scaledX = x / fontSizeScale;
                        scaledY = 0;
                      }
                      if (font.remeasure && width > 0) {
                        const measuredWidth = ctx.measureText(character).width * 1e3 / fontSize * fontSizeScale;
                        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
                          const characterScaleX = width / measuredWidth;
                          restoreNeeded = true;
                          ctx.save();
                          ctx.scale(characterScaleX, 1);
                          scaledX /= characterScaleX;
                        } else if (width !== measuredWidth) {
                          scaledX += (width - measuredWidth) / 2e3 * fontSize / fontSizeScale;
                        }
                      }
                      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {
                        if (simpleFillText && !accent) {
                          ctx.fillText(character, scaledX, scaledY);
                        } else {
                          this.paintChar(character, scaledX, scaledY, patternTransform);
                          if (accent) {
                            const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;
                            const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;
                            this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);
                          }
                        }
                      }
                      const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;
                      x += charWidth;
                      if (restoreNeeded) {
                        ctx.restore();
                      }
                    }
                    if (vertical) {
                      current.y -= x;
                    } else {
                      current.x += x * textHScale;
                    }
                    ctx.restore();
                    this.compose();
                    return void 0;
                  }
                  showType3Text(glyphs) {
                    const ctx = this.ctx;
                    const current = this.current;
                    const font = current.font;
                    const fontSize = current.fontSize;
                    const fontDirection = current.fontDirection;
                    const spacingDir = font.vertical ? 1 : -1;
                    const charSpacing = current.charSpacing;
                    const wordSpacing = current.wordSpacing;
                    const textHScale = current.textHScale * fontDirection;
                    const fontMatrix = current.fontMatrix || _util2.FONT_IDENTITY_MATRIX;
                    const glyphsLength = glyphs.length;
                    const isTextInvisible = current.textRenderingMode === _util2.TextRenderingMode.INVISIBLE;
                    let i, glyph, width, spacingLength;
                    if (isTextInvisible || fontSize === 0) {
                      return;
                    }
                    this._cachedScaleForStroking[0] = -1;
                    this._cachedGetSinglePixelWidth = null;
                    ctx.save();
                    ctx.transform(...current.textMatrix);
                    ctx.translate(current.x, current.y);
                    ctx.scale(textHScale, fontDirection);
                    for (i = 0; i < glyphsLength; ++i) {
                      glyph = glyphs[i];
                      if (typeof glyph === "number") {
                        spacingLength = spacingDir * glyph * fontSize / 1e3;
                        this.ctx.translate(spacingLength, 0);
                        current.x += spacingLength * textHScale;
                        continue;
                      }
                      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                      const operatorList = font.charProcOperatorList[glyph.operatorListId];
                      if (!operatorList) {
                        (0, _util2.warn)(`Type3 character "${glyph.operatorListId}" is not available.`);
                        continue;
                      }
                      if (this.contentVisible) {
                        this.processingType3 = glyph;
                        this.save();
                        ctx.scale(fontSize, fontSize);
                        ctx.transform(...fontMatrix);
                        this.executeOperatorList(operatorList);
                        this.restore();
                      }
                      const transformed = _util2.Util.applyTransform([glyph.width, 0], fontMatrix);
                      width = transformed[0] * fontSize + spacing;
                      ctx.translate(width, 0);
                      current.x += width * textHScale;
                    }
                    ctx.restore();
                    this.processingType3 = null;
                  }
                  setCharWidth(xWidth, yWidth) {
                  }
                  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
                    this.ctx.rect(llx, lly, urx - llx, ury - lly);
                    this.ctx.clip();
                    this.endPath();
                  }
                  getColorN_Pattern(IR) {
                    let pattern;
                    if (IR[0] === "TilingPattern") {
                      const color = IR[1];
                      const baseTransform = this.baseTransform || (0, _display_utils2.getCurrentTransform)(this.ctx);
                      const canvasGraphicsFactory = {
                        createCanvasGraphics: (ctx) => {
                          return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
                            optionalContentConfig: this.optionalContentConfig,
                            markedContentStack: this.markedContentStack
                          });
                        }
                      };
                      pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
                    } else {
                      pattern = this._getPattern(IR[1], IR[2]);
                    }
                    return pattern;
                  }
                  setStrokeColorN() {
                    this.current.strokeColor = this.getColorN_Pattern(arguments);
                  }
                  setFillColorN() {
                    this.current.fillColor = this.getColorN_Pattern(arguments);
                    this.current.patternFill = true;
                  }
                  setStrokeRGBColor(r, g, b) {
                    const color = _util2.Util.makeHexColor(r, g, b);
                    this.ctx.strokeStyle = color;
                    this.current.strokeColor = color;
                  }
                  setFillRGBColor(r, g, b) {
                    const color = _util2.Util.makeHexColor(r, g, b);
                    this.ctx.fillStyle = color;
                    this.current.fillColor = color;
                    this.current.patternFill = false;
                  }
                  _getPattern(objId, matrix = null) {
                    let pattern;
                    if (this.cachedPatterns.has(objId)) {
                      pattern = this.cachedPatterns.get(objId);
                    } else {
                      pattern = (0, _pattern_helper.getShadingPattern)(this.getObject(objId));
                      this.cachedPatterns.set(objId, pattern);
                    }
                    if (matrix) {
                      pattern.matrix = matrix;
                    }
                    return pattern;
                  }
                  shadingFill(objId) {
                    if (!this.contentVisible) {
                      return;
                    }
                    const ctx = this.ctx;
                    this.save();
                    const pattern = this._getPattern(objId);
                    ctx.fillStyle = pattern.getPattern(ctx, this, (0, _display_utils2.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.SHADING);
                    const inv = (0, _display_utils2.getCurrentTransformInverse)(ctx);
                    if (inv) {
                      const {
                        width,
                        height
                      } = ctx.canvas;
                      const [x0, y0, x1, y1] = _util2.Util.getAxialAlignedBoundingBox([0, 0, width, height], inv);
                      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
                    } else {
                      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
                    }
                    this.compose(this.current.getClippedPathBoundingBox());
                    this.restore();
                  }
                  beginInlineImage() {
                    (0, _util2.unreachable)("Should not call beginInlineImage");
                  }
                  beginImageData() {
                    (0, _util2.unreachable)("Should not call beginImageData");
                  }
                  paintFormXObjectBegin(matrix, bbox) {
                    if (!this.contentVisible) {
                      return;
                    }
                    this.save();
                    this.baseTransformStack.push(this.baseTransform);
                    if (Array.isArray(matrix) && matrix.length === 6) {
                      this.transform(...matrix);
                    }
                    this.baseTransform = (0, _display_utils2.getCurrentTransform)(this.ctx);
                    if (bbox) {
                      const width = bbox[2] - bbox[0];
                      const height = bbox[3] - bbox[1];
                      this.ctx.rect(bbox[0], bbox[1], width, height);
                      this.current.updateRectMinMax((0, _display_utils2.getCurrentTransform)(this.ctx), bbox);
                      this.clip();
                      this.endPath();
                    }
                  }
                  paintFormXObjectEnd() {
                    if (!this.contentVisible) {
                      return;
                    }
                    this.restore();
                    this.baseTransform = this.baseTransformStack.pop();
                  }
                  beginGroup(group) {
                    if (!this.contentVisible) {
                      return;
                    }
                    this.save();
                    if (this.inSMaskMode) {
                      this.endSMaskMode();
                      this.current.activeSMask = null;
                    }
                    const currentCtx = this.ctx;
                    if (!group.isolated) {
                      (0, _util2.info)("TODO: Support non-isolated groups.");
                    }
                    if (group.knockout) {
                      (0, _util2.warn)("Knockout groups not supported.");
                    }
                    const currentTransform = (0, _display_utils2.getCurrentTransform)(currentCtx);
                    if (group.matrix) {
                      currentCtx.transform(...group.matrix);
                    }
                    if (!group.bbox) {
                      throw new Error("Bounding box is required.");
                    }
                    let bounds = _util2.Util.getAxialAlignedBoundingBox(group.bbox, (0, _display_utils2.getCurrentTransform)(currentCtx));
                    const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
                    bounds = _util2.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
                    const offsetX = Math.floor(bounds[0]);
                    const offsetY = Math.floor(bounds[1]);
                    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
                    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
                    let scaleX = 1, scaleY = 1;
                    if (drawnWidth > MAX_GROUP_SIZE) {
                      scaleX = drawnWidth / MAX_GROUP_SIZE;
                      drawnWidth = MAX_GROUP_SIZE;
                    }
                    if (drawnHeight > MAX_GROUP_SIZE) {
                      scaleY = drawnHeight / MAX_GROUP_SIZE;
                      drawnHeight = MAX_GROUP_SIZE;
                    }
                    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);
                    let cacheId = "groupAt" + this.groupLevel;
                    if (group.smask) {
                      cacheId += "_smask_" + this.smaskCounter++ % 2;
                    }
                    const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);
                    const groupCtx = scratchCanvas.context;
                    groupCtx.scale(1 / scaleX, 1 / scaleY);
                    groupCtx.translate(-offsetX, -offsetY);
                    groupCtx.transform(...currentTransform);
                    if (group.smask) {
                      this.smaskStack.push({
                        canvas: scratchCanvas.canvas,
                        context: groupCtx,
                        offsetX,
                        offsetY,
                        scaleX,
                        scaleY,
                        subtype: group.smask.subtype,
                        backdrop: group.smask.backdrop,
                        transferMap: group.smask.transferMap || null,
                        startTransformInverse: null
                      });
                    } else {
                      currentCtx.setTransform(1, 0, 0, 1, 0, 0);
                      currentCtx.translate(offsetX, offsetY);
                      currentCtx.scale(scaleX, scaleY);
                      currentCtx.save();
                    }
                    copyCtxState(currentCtx, groupCtx);
                    this.ctx = groupCtx;
                    this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
                    this.groupStack.push(currentCtx);
                    this.groupLevel++;
                  }
                  endGroup(group) {
                    if (!this.contentVisible) {
                      return;
                    }
                    this.groupLevel--;
                    const groupCtx = this.ctx;
                    const ctx = this.groupStack.pop();
                    this.ctx = ctx;
                    this.ctx.imageSmoothingEnabled = false;
                    if (group.smask) {
                      this.tempSMask = this.smaskStack.pop();
                      this.restore();
                    } else {
                      this.ctx.restore();
                      const currentMtx = (0, _display_utils2.getCurrentTransform)(this.ctx);
                      this.restore();
                      this.ctx.save();
                      this.ctx.setTransform(...currentMtx);
                      const dirtyBox = _util2.Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);
                      this.ctx.drawImage(groupCtx.canvas, 0, 0);
                      this.ctx.restore();
                      this.compose(dirtyBox);
                    }
                  }
                  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {
                    this.#restoreInitialState();
                    resetCtxToDefault(this.ctx);
                    this.ctx.save();
                    this.save();
                    if (this.baseTransform) {
                      this.ctx.setTransform(...this.baseTransform);
                    }
                    if (Array.isArray(rect) && rect.length === 4) {
                      const width = rect[2] - rect[0];
                      const height = rect[3] - rect[1];
                      if (hasOwnCanvas && this.annotationCanvasMap) {
                        transform = transform.slice();
                        transform[4] -= rect[0];
                        transform[5] -= rect[1];
                        rect = rect.slice();
                        rect[0] = rect[1] = 0;
                        rect[2] = width;
                        rect[3] = height;
                        const [scaleX, scaleY] = _util2.Util.singularValueDecompose2dScale((0, _display_utils2.getCurrentTransform)(this.ctx));
                        const {
                          viewportScale
                        } = this;
                        const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);
                        const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);
                        this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);
                        const {
                          canvas,
                          context
                        } = this.annotationCanvas;
                        this.annotationCanvasMap.set(id, canvas);
                        this.annotationCanvas.savedCtx = this.ctx;
                        this.ctx = context;
                        this.ctx.save();
                        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);
                        resetCtxToDefault(this.ctx);
                      } else {
                        resetCtxToDefault(this.ctx);
                        this.ctx.rect(rect[0], rect[1], width, height);
                        this.ctx.clip();
                        this.endPath();
                      }
                    }
                    this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
                    this.transform(...transform);
                    this.transform(...matrix);
                  }
                  endAnnotation() {
                    if (this.annotationCanvas) {
                      this.ctx.restore();
                      this.#drawFilter();
                      this.ctx = this.annotationCanvas.savedCtx;
                      delete this.annotationCanvas.savedCtx;
                      delete this.annotationCanvas;
                    }
                  }
                  paintImageMaskXObject(img) {
                    if (!this.contentVisible) {
                      return;
                    }
                    const count = img.count;
                    img = this.getObject(img.data, img);
                    img.count = count;
                    const ctx = this.ctx;
                    const glyph = this.processingType3;
                    if (glyph) {
                      if (glyph.compiled === void 0) {
                        glyph.compiled = compileType3Glyph(img);
                      }
                      if (glyph.compiled) {
                        glyph.compiled(ctx);
                        return;
                      }
                    }
                    const mask = this._createMaskCanvas(img);
                    const maskCanvas = mask.canvas;
                    ctx.save();
                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
                    ctx.restore();
                    this.compose();
                  }
                  paintImageMaskXObjectRepeat(img, scaleX, skewX = 0, skewY = 0, scaleY, positions) {
                    if (!this.contentVisible) {
                      return;
                    }
                    img = this.getObject(img.data, img);
                    const ctx = this.ctx;
                    ctx.save();
                    const currentTransform = (0, _display_utils2.getCurrentTransform)(ctx);
                    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);
                    const mask = this._createMaskCanvas(img);
                    ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);
                    for (let i = 0, ii = positions.length; i < ii; i += 2) {
                      const trans = _util2.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);
                      const [x, y] = _util2.Util.applyTransform([0, 0], trans);
                      ctx.drawImage(mask.canvas, x, y);
                    }
                    ctx.restore();
                    this.compose();
                  }
                  paintImageMaskXObjectGroup(images) {
                    if (!this.contentVisible) {
                      return;
                    }
                    const ctx = this.ctx;
                    const fillColor = this.current.fillColor;
                    const isPatternFill = this.current.patternFill;
                    for (const image of images) {
                      const {
                        data,
                        width,
                        height,
                        transform
                      } = image;
                      const maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                      const maskCtx = maskCanvas.context;
                      maskCtx.save();
                      const img = this.getObject(data, image);
                      putBinaryImageMask(maskCtx, img);
                      maskCtx.globalCompositeOperation = "source-in";
                      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, (0, _display_utils2.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL) : fillColor;
                      maskCtx.fillRect(0, 0, width, height);
                      maskCtx.restore();
                      ctx.save();
                      ctx.transform(...transform);
                      ctx.scale(1, -1);
                      drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                      ctx.restore();
                    }
                    this.compose();
                  }
                  paintImageXObject(objId) {
                    if (!this.contentVisible) {
                      return;
                    }
                    const imgData = this.getObject(objId);
                    if (!imgData) {
                      (0, _util2.warn)("Dependent image isn't ready yet");
                      return;
                    }
                    this.paintInlineImageXObject(imgData);
                  }
                  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
                    if (!this.contentVisible) {
                      return;
                    }
                    const imgData = this.getObject(objId);
                    if (!imgData) {
                      (0, _util2.warn)("Dependent image isn't ready yet");
                      return;
                    }
                    const width = imgData.width;
                    const height = imgData.height;
                    const map = [];
                    for (let i = 0, ii = positions.length; i < ii; i += 2) {
                      map.push({
                        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
                        x: 0,
                        y: 0,
                        w: width,
                        h: height
                      });
                    }
                    this.paintInlineImageXObjectGroup(imgData, map);
                  }
                  applyTransferMapsToCanvas(ctx) {
                    if (this.current.transferMaps !== "none") {
                      ctx.filter = this.current.transferMaps;
                      ctx.drawImage(ctx.canvas, 0, 0);
                      ctx.filter = "none";
                    }
                    return ctx.canvas;
                  }
                  applyTransferMapsToBitmap(imgData) {
                    if (this.current.transferMaps === "none") {
                      return imgData.bitmap;
                    }
                    const {
                      bitmap,
                      width,
                      height
                    } = imgData;
                    const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
                    const tmpCtx = tmpCanvas.context;
                    tmpCtx.filter = this.current.transferMaps;
                    tmpCtx.drawImage(bitmap, 0, 0);
                    tmpCtx.filter = "none";
                    return tmpCanvas.canvas;
                  }
                  paintInlineImageXObject(imgData) {
                    if (!this.contentVisible) {
                      return;
                    }
                    const width = imgData.width;
                    const height = imgData.height;
                    const ctx = this.ctx;
                    this.save();
                    if (!_util2.isNodeJS) {
                      const {
                        filter
                      } = ctx;
                      if (filter !== "none" && filter !== "") {
                        ctx.filter = "none";
                      }
                    }
                    ctx.scale(1 / width, -1 / height);
                    let imgToPaint;
                    if (imgData.bitmap) {
                      imgToPaint = this.applyTransferMapsToBitmap(imgData);
                    } else if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
                      imgToPaint = imgData;
                    } else {
                      const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
                      const tmpCtx = tmpCanvas.context;
                      putBinaryImageData(tmpCtx, imgData);
                      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
                    }
                    const scaled = this._scaleImage(imgToPaint, (0, _display_utils2.getCurrentTransformInverse)(ctx));
                    ctx.imageSmoothingEnabled = getImageSmoothingEnabled((0, _display_utils2.getCurrentTransform)(ctx), imgData.interpolate);
                    drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);
                    this.compose();
                    this.restore();
                  }
                  paintInlineImageXObjectGroup(imgData, map) {
                    if (!this.contentVisible) {
                      return;
                    }
                    const ctx = this.ctx;
                    let imgToPaint;
                    if (imgData.bitmap) {
                      imgToPaint = imgData.bitmap;
                    } else {
                      const w = imgData.width;
                      const h = imgData.height;
                      const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);
                      const tmpCtx = tmpCanvas.context;
                      putBinaryImageData(tmpCtx, imgData);
                      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
                    }
                    for (const entry of map) {
                      ctx.save();
                      ctx.transform(...entry.transform);
                      ctx.scale(1, -1);
                      drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);
                      ctx.restore();
                    }
                    this.compose();
                  }
                  paintSolidColorImageMask() {
                    if (!this.contentVisible) {
                      return;
                    }
                    this.ctx.fillRect(0, 0, 1, 1);
                    this.compose();
                  }
                  markPoint(tag) {
                  }
                  markPointProps(tag, properties) {
                  }
                  beginMarkedContent(tag) {
                    this.markedContentStack.push({
                      visible: true
                    });
                  }
                  beginMarkedContentProps(tag, properties) {
                    if (tag === "OC") {
                      this.markedContentStack.push({
                        visible: this.optionalContentConfig.isVisible(properties)
                      });
                    } else {
                      this.markedContentStack.push({
                        visible: true
                      });
                    }
                    this.contentVisible = this.isContentVisible();
                  }
                  endMarkedContent() {
                    this.markedContentStack.pop();
                    this.contentVisible = this.isContentVisible();
                  }
                  beginCompat() {
                  }
                  endCompat() {
                  }
                  consumePath(clipBox) {
                    const isEmpty = this.current.isEmptyClip();
                    if (this.pendingClip) {
                      this.current.updateClipFromPath();
                    }
                    if (!this.pendingClip) {
                      this.compose(clipBox);
                    }
                    const ctx = this.ctx;
                    if (this.pendingClip) {
                      if (!isEmpty) {
                        if (this.pendingClip === EO_CLIP) {
                          ctx.clip("evenodd");
                        } else {
                          ctx.clip();
                        }
                      }
                      this.pendingClip = null;
                    }
                    this.current.startNewPathAndClipBox(this.current.clipBox);
                    ctx.beginPath();
                  }
                  getSinglePixelWidth() {
                    if (!this._cachedGetSinglePixelWidth) {
                      const m = (0, _display_utils2.getCurrentTransform)(this.ctx);
                      if (m[1] === 0 && m[2] === 0) {
                        this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));
                      } else {
                        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                        const normX = Math.hypot(m[0], m[2]);
                        const normY = Math.hypot(m[1], m[3]);
                        this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;
                      }
                    }
                    return this._cachedGetSinglePixelWidth;
                  }
                  getScaleForStroking() {
                    if (this._cachedScaleForStroking[0] === -1) {
                      const {
                        lineWidth
                      } = this.current;
                      const {
                        a,
                        b,
                        c,
                        d
                      } = this.ctx.getTransform();
                      let scaleX, scaleY;
                      if (b === 0 && c === 0) {
                        const normX = Math.abs(a);
                        const normY = Math.abs(d);
                        if (normX === normY) {
                          if (lineWidth === 0) {
                            scaleX = scaleY = 1 / normX;
                          } else {
                            const scaledLineWidth = normX * lineWidth;
                            scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;
                          }
                        } else if (lineWidth === 0) {
                          scaleX = 1 / normX;
                          scaleY = 1 / normY;
                        } else {
                          const scaledXLineWidth = normX * lineWidth;
                          const scaledYLineWidth = normY * lineWidth;
                          scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;
                          scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;
                        }
                      } else {
                        const absDet = Math.abs(a * d - b * c);
                        const normX = Math.hypot(a, b);
                        const normY = Math.hypot(c, d);
                        if (lineWidth === 0) {
                          scaleX = normY / absDet;
                          scaleY = normX / absDet;
                        } else {
                          const baseArea = lineWidth * absDet;
                          scaleX = normY > baseArea ? normY / baseArea : 1;
                          scaleY = normX > baseArea ? normX / baseArea : 1;
                        }
                      }
                      this._cachedScaleForStroking[0] = scaleX;
                      this._cachedScaleForStroking[1] = scaleY;
                    }
                    return this._cachedScaleForStroking;
                  }
                  rescaleAndStroke(saveRestore) {
                    const {
                      ctx
                    } = this;
                    const {
                      lineWidth
                    } = this.current;
                    const [scaleX, scaleY] = this.getScaleForStroking();
                    ctx.lineWidth = lineWidth || 1;
                    if (scaleX === 1 && scaleY === 1) {
                      ctx.stroke();
                      return;
                    }
                    const dashes = ctx.getLineDash();
                    if (saveRestore) {
                      ctx.save();
                    }
                    ctx.scale(scaleX, scaleY);
                    if (dashes.length > 0) {
                      const scale = Math.max(scaleX, scaleY);
                      ctx.setLineDash(dashes.map((x) => x / scale));
                      ctx.lineDashOffset /= scale;
                    }
                    ctx.stroke();
                    if (saveRestore) {
                      ctx.restore();
                    }
                  }
                  isContentVisible() {
                    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {
                      if (!this.markedContentStack[i].visible) {
                        return false;
                      }
                    }
                    return true;
                  }
                }
                exports2.CanvasGraphics = CanvasGraphics;
                for (const op in _util2.OPS) {
                  if (CanvasGraphics.prototype[op] !== void 0) {
                    CanvasGraphics.prototype[_util2.OPS[op]] = CanvasGraphics.prototype[op];
                  }
                }
              },
              /* 12 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.TilingPattern = exports2.PathType = void 0;
                exports2.getShadingPattern = getShadingPattern;
                var _util2 = __w_pdfjs_require__2(1);
                var _display_utils2 = __w_pdfjs_require__2(6);
                const PathType = {
                  FILL: "Fill",
                  STROKE: "Stroke",
                  SHADING: "Shading"
                };
                exports2.PathType = PathType;
                function applyBoundingBox(ctx, bbox) {
                  if (!bbox) {
                    return;
                  }
                  const width = bbox[2] - bbox[0];
                  const height = bbox[3] - bbox[1];
                  const region = new Path2D();
                  region.rect(bbox[0], bbox[1], width, height);
                  ctx.clip(region);
                }
                class BaseShadingPattern {
                  constructor() {
                    if (this.constructor === BaseShadingPattern) {
                      (0, _util2.unreachable)("Cannot initialize BaseShadingPattern.");
                    }
                  }
                  getPattern() {
                    (0, _util2.unreachable)("Abstract method `getPattern` called.");
                  }
                }
                class RadialAxialShadingPattern extends BaseShadingPattern {
                  constructor(IR) {
                    super();
                    this._type = IR[1];
                    this._bbox = IR[2];
                    this._colorStops = IR[3];
                    this._p0 = IR[4];
                    this._p1 = IR[5];
                    this._r0 = IR[6];
                    this._r1 = IR[7];
                    this.matrix = null;
                  }
                  _createGradient(ctx) {
                    let grad;
                    if (this._type === "axial") {
                      grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);
                    } else if (this._type === "radial") {
                      grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);
                    }
                    for (const colorStop of this._colorStops) {
                      grad.addColorStop(colorStop[0], colorStop[1]);
                    }
                    return grad;
                  }
                  getPattern(ctx, owner, inverse, pathType) {
                    let pattern;
                    if (pathType === PathType.STROKE || pathType === PathType.FILL) {
                      const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, (0, _display_utils2.getCurrentTransform)(ctx)) || [0, 0, 0, 0];
                      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;
                      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;
                      const tmpCanvas = owner.cachedCanvases.getCanvas("pattern", width, height, true);
                      const tmpCtx = tmpCanvas.context;
                      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                      tmpCtx.beginPath();
                      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);
                      inverse = _util2.Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);
                      tmpCtx.transform(...owner.baseTransform);
                      if (this.matrix) {
                        tmpCtx.transform(...this.matrix);
                      }
                      applyBoundingBox(tmpCtx, this._bbox);
                      tmpCtx.fillStyle = this._createGradient(tmpCtx);
                      tmpCtx.fill();
                      pattern = ctx.createPattern(tmpCanvas.canvas, "no-repeat");
                      const domMatrix = new DOMMatrix(inverse);
                      pattern.setTransform(domMatrix);
                    } else {
                      applyBoundingBox(ctx, this._bbox);
                      pattern = this._createGradient(ctx);
                    }
                    return pattern;
                  }
                }
                function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
                  const coords = context.coords, colors = context.colors;
                  const bytes = data.data, rowSize = data.width * 4;
                  let tmp;
                  if (coords[p1 + 1] > coords[p2 + 1]) {
                    tmp = p1;
                    p1 = p2;
                    p2 = tmp;
                    tmp = c1;
                    c1 = c2;
                    c2 = tmp;
                  }
                  if (coords[p2 + 1] > coords[p3 + 1]) {
                    tmp = p2;
                    p2 = p3;
                    p3 = tmp;
                    tmp = c2;
                    c2 = c3;
                    c3 = tmp;
                  }
                  if (coords[p1 + 1] > coords[p2 + 1]) {
                    tmp = p1;
                    p1 = p2;
                    p2 = tmp;
                    tmp = c1;
                    c1 = c2;
                    c2 = tmp;
                  }
                  const x1 = (coords[p1] + context.offsetX) * context.scaleX;
                  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
                  const x2 = (coords[p2] + context.offsetX) * context.scaleX;
                  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
                  const x3 = (coords[p3] + context.offsetX) * context.scaleX;
                  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
                  if (y1 >= y3) {
                    return;
                  }
                  const c1r = colors[c1], c1g = colors[c1 + 1], c1b = colors[c1 + 2];
                  const c2r = colors[c2], c2g = colors[c2 + 1], c2b = colors[c2 + 2];
                  const c3r = colors[c3], c3g = colors[c3 + 1], c3b = colors[c3 + 2];
                  const minY = Math.round(y1), maxY = Math.round(y3);
                  let xa, car, cag, cab;
                  let xb, cbr, cbg, cbb;
                  for (let y = minY; y <= maxY; y++) {
                    if (y < y2) {
                      const k2 = y < y1 ? 0 : (y1 - y) / (y1 - y2);
                      xa = x1 - (x1 - x2) * k2;
                      car = c1r - (c1r - c2r) * k2;
                      cag = c1g - (c1g - c2g) * k2;
                      cab = c1b - (c1b - c2b) * k2;
                    } else {
                      let k2;
                      if (y > y3) {
                        k2 = 1;
                      } else if (y2 === y3) {
                        k2 = 0;
                      } else {
                        k2 = (y2 - y) / (y2 - y3);
                      }
                      xa = x2 - (x2 - x3) * k2;
                      car = c2r - (c2r - c3r) * k2;
                      cag = c2g - (c2g - c3g) * k2;
                      cab = c2b - (c2b - c3b) * k2;
                    }
                    let k;
                    if (y < y1) {
                      k = 0;
                    } else if (y > y3) {
                      k = 1;
                    } else {
                      k = (y1 - y) / (y1 - y3);
                    }
                    xb = x1 - (x1 - x3) * k;
                    cbr = c1r - (c1r - c3r) * k;
                    cbg = c1g - (c1g - c3g) * k;
                    cbb = c1b - (c1b - c3b) * k;
                    const x1_ = Math.round(Math.min(xa, xb));
                    const x2_ = Math.round(Math.max(xa, xb));
                    let j = rowSize * y + x1_ * 4;
                    for (let x = x1_; x <= x2_; x++) {
                      k = (xa - x) / (xa - xb);
                      if (k < 0) {
                        k = 0;
                      } else if (k > 1) {
                        k = 1;
                      }
                      bytes[j++] = car - (car - cbr) * k | 0;
                      bytes[j++] = cag - (cag - cbg) * k | 0;
                      bytes[j++] = cab - (cab - cbb) * k | 0;
                      bytes[j++] = 255;
                    }
                  }
                }
                function drawFigure(data, figure, context) {
                  const ps = figure.coords;
                  const cs = figure.colors;
                  let i, ii;
                  switch (figure.type) {
                    case "lattice":
                      const verticesPerRow = figure.verticesPerRow;
                      const rows = Math.floor(ps.length / verticesPerRow) - 1;
                      const cols = verticesPerRow - 1;
                      for (i = 0; i < rows; i++) {
                        let q = i * verticesPerRow;
                        for (let j = 0; j < cols; j++, q++) {
                          drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
                          drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
                        }
                      }
                      break;
                    case "triangles":
                      for (i = 0, ii = ps.length; i < ii; i += 3) {
                        drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
                      }
                      break;
                    default:
                      throw new Error("illegal figure");
                  }
                }
                class MeshShadingPattern extends BaseShadingPattern {
                  constructor(IR) {
                    super();
                    this._coords = IR[2];
                    this._colors = IR[3];
                    this._figures = IR[4];
                    this._bounds = IR[5];
                    this._bbox = IR[7];
                    this._background = IR[8];
                    this.matrix = null;
                  }
                  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {
                    const EXPECTED_SCALE = 1.1;
                    const MAX_PATTERN_SIZE = 3e3;
                    const BORDER_SIZE = 2;
                    const offsetX = Math.floor(this._bounds[0]);
                    const offsetY = Math.floor(this._bounds[1]);
                    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;
                    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;
                    const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
                    const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
                    const scaleX = boundsWidth / width;
                    const scaleY = boundsHeight / height;
                    const context = {
                      coords: this._coords,
                      colors: this._colors,
                      offsetX: -offsetX,
                      offsetY: -offsetY,
                      scaleX: 1 / scaleX,
                      scaleY: 1 / scaleY
                    };
                    const paddedWidth = width + BORDER_SIZE * 2;
                    const paddedHeight = height + BORDER_SIZE * 2;
                    const tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
                    const tmpCtx = tmpCanvas.context;
                    const data = tmpCtx.createImageData(width, height);
                    if (backgroundColor) {
                      const bytes = data.data;
                      for (let i = 0, ii = bytes.length; i < ii; i += 4) {
                        bytes[i] = backgroundColor[0];
                        bytes[i + 1] = backgroundColor[1];
                        bytes[i + 2] = backgroundColor[2];
                        bytes[i + 3] = 255;
                      }
                    }
                    for (const figure of this._figures) {
                      drawFigure(data, figure, context);
                    }
                    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
                    const canvas = tmpCanvas.canvas;
                    return {
                      canvas,
                      offsetX: offsetX - BORDER_SIZE * scaleX,
                      offsetY: offsetY - BORDER_SIZE * scaleY,
                      scaleX,
                      scaleY
                    };
                  }
                  getPattern(ctx, owner, inverse, pathType) {
                    applyBoundingBox(ctx, this._bbox);
                    let scale;
                    if (pathType === PathType.SHADING) {
                      scale = _util2.Util.singularValueDecompose2dScale((0, _display_utils2.getCurrentTransform)(ctx));
                    } else {
                      scale = _util2.Util.singularValueDecompose2dScale(owner.baseTransform);
                      if (this.matrix) {
                        const matrixScale = _util2.Util.singularValueDecompose2dScale(this.matrix);
                        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
                      }
                    }
                    const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);
                    if (pathType !== PathType.SHADING) {
                      ctx.setTransform(...owner.baseTransform);
                      if (this.matrix) {
                        ctx.transform(...this.matrix);
                      }
                    }
                    ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
                    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
                    return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
                  }
                }
                class DummyShadingPattern extends BaseShadingPattern {
                  getPattern() {
                    return "hotpink";
                  }
                }
                function getShadingPattern(IR) {
                  switch (IR[0]) {
                    case "RadialAxial":
                      return new RadialAxialShadingPattern(IR);
                    case "Mesh":
                      return new MeshShadingPattern(IR);
                    case "Dummy":
                      return new DummyShadingPattern();
                  }
                  throw new Error(`Unknown IR type: ${IR[0]}`);
                }
                const PaintType = {
                  COLORED: 1,
                  UNCOLORED: 2
                };
                class TilingPattern {
                  static MAX_PATTERN_SIZE = 3e3;
                  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
                    this.operatorList = IR[2];
                    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
                    this.bbox = IR[4];
                    this.xstep = IR[5];
                    this.ystep = IR[6];
                    this.paintType = IR[7];
                    this.tilingType = IR[8];
                    this.color = color;
                    this.ctx = ctx;
                    this.canvasGraphicsFactory = canvasGraphicsFactory;
                    this.baseTransform = baseTransform;
                  }
                  createPatternCanvas(owner) {
                    const operatorList = this.operatorList;
                    const bbox = this.bbox;
                    const xstep = this.xstep;
                    const ystep = this.ystep;
                    const paintType = this.paintType;
                    const tilingType = this.tilingType;
                    const color = this.color;
                    const canvasGraphicsFactory = this.canvasGraphicsFactory;
                    (0, _util2.info)("TilingType: " + tilingType);
                    const x0 = bbox[0], y0 = bbox[1], x1 = bbox[2], y1 = bbox[3];
                    const matrixScale = _util2.Util.singularValueDecompose2dScale(this.matrix);
                    const curMatrixScale = _util2.Util.singularValueDecompose2dScale(this.baseTransform);
                    const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
                    const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);
                    const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);
                    const tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);
                    const tmpCtx = tmpCanvas.context;
                    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
                    graphics.groupLevel = owner.groupLevel;
                    this.setFillAndStrokeStyleToContext(graphics, paintType, color);
                    let adjustedX0 = x0;
                    let adjustedY0 = y0;
                    let adjustedX1 = x1;
                    let adjustedY1 = y1;
                    if (x0 < 0) {
                      adjustedX0 = 0;
                      adjustedX1 += Math.abs(x0);
                    }
                    if (y0 < 0) {
                      adjustedY0 = 0;
                      adjustedY1 += Math.abs(y0);
                    }
                    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));
                    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
                    tmpCtx.save();
                    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);
                    graphics.baseTransform = (0, _display_utils2.getCurrentTransform)(graphics.ctx);
                    graphics.executeOperatorList(operatorList);
                    graphics.endDrawing();
                    return {
                      canvas: tmpCanvas.canvas,
                      scaleX: dimx.scale,
                      scaleY: dimy.scale,
                      offsetX: adjustedX0,
                      offsetY: adjustedY0
                    };
                  }
                  getSizeAndScale(step, realOutputSize, scale) {
                    step = Math.abs(step);
                    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);
                    let size = Math.ceil(step * scale);
                    if (size >= maxSize) {
                      size = maxSize;
                    } else {
                      scale = size / step;
                    }
                    return {
                      scale,
                      size
                    };
                  }
                  clipBbox(graphics, x0, y0, x1, y1) {
                    const bboxWidth = x1 - x0;
                    const bboxHeight = y1 - y0;
                    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
                    graphics.current.updateRectMinMax((0, _display_utils2.getCurrentTransform)(graphics.ctx), [x0, y0, x1, y1]);
                    graphics.clip();
                    graphics.endPath();
                  }
                  setFillAndStrokeStyleToContext(graphics, paintType, color) {
                    const context = graphics.ctx, current = graphics.current;
                    switch (paintType) {
                      case PaintType.COLORED:
                        const ctx = this.ctx;
                        context.fillStyle = ctx.fillStyle;
                        context.strokeStyle = ctx.strokeStyle;
                        current.fillColor = ctx.fillStyle;
                        current.strokeColor = ctx.strokeStyle;
                        break;
                      case PaintType.UNCOLORED:
                        const cssColor = _util2.Util.makeHexColor(color[0], color[1], color[2]);
                        context.fillStyle = cssColor;
                        context.strokeStyle = cssColor;
                        current.fillColor = cssColor;
                        current.strokeColor = cssColor;
                        break;
                      default:
                        throw new _util2.FormatError(`Unsupported paint type: ${paintType}`);
                    }
                  }
                  getPattern(ctx, owner, inverse, pathType) {
                    let matrix = inverse;
                    if (pathType !== PathType.SHADING) {
                      matrix = _util2.Util.transform(matrix, owner.baseTransform);
                      if (this.matrix) {
                        matrix = _util2.Util.transform(matrix, this.matrix);
                      }
                    }
                    const temporaryPatternCanvas = this.createPatternCanvas(owner);
                    let domMatrix = new DOMMatrix(matrix);
                    domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
                    domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);
                    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, "repeat");
                    pattern.setTransform(domMatrix);
                    return pattern;
                  }
                }
                exports2.TilingPattern = TilingPattern;
              },
              /* 13 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.convertBlackAndWhiteToRGBA = convertBlackAndWhiteToRGBA;
                exports2.convertToRGBA = convertToRGBA;
                exports2.grayToRGBA = grayToRGBA;
                var _util2 = __w_pdfjs_require__2(1);
                function convertToRGBA(params) {
                  switch (params.kind) {
                    case _util2.ImageKind.GRAYSCALE_1BPP:
                      return convertBlackAndWhiteToRGBA(params);
                    case _util2.ImageKind.RGB_24BPP:
                      return convertRGBToRGBA(params);
                  }
                  return null;
                }
                function convertBlackAndWhiteToRGBA({
                  src,
                  srcPos = 0,
                  dest,
                  width,
                  height,
                  nonBlackColor = 4294967295,
                  inverseDecode = false
                }) {
                  const black = _util2.FeatureTest.isLittleEndian ? 4278190080 : 255;
                  const [zeroMapping, oneMapping] = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor];
                  const widthInSource = width >> 3;
                  const widthRemainder = width & 7;
                  const srcLength = src.length;
                  dest = new Uint32Array(dest.buffer);
                  let destPos = 0;
                  for (let i = 0; i < height; i++) {
                    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {
                      const elem2 = srcPos < srcLength ? src[srcPos] : 255;
                      dest[destPos++] = elem2 & 128 ? oneMapping : zeroMapping;
                      dest[destPos++] = elem2 & 64 ? oneMapping : zeroMapping;
                      dest[destPos++] = elem2 & 32 ? oneMapping : zeroMapping;
                      dest[destPos++] = elem2 & 16 ? oneMapping : zeroMapping;
                      dest[destPos++] = elem2 & 8 ? oneMapping : zeroMapping;
                      dest[destPos++] = elem2 & 4 ? oneMapping : zeroMapping;
                      dest[destPos++] = elem2 & 2 ? oneMapping : zeroMapping;
                      dest[destPos++] = elem2 & 1 ? oneMapping : zeroMapping;
                    }
                    if (widthRemainder === 0) {
                      continue;
                    }
                    const elem = srcPos < srcLength ? src[srcPos++] : 255;
                    for (let j = 0; j < widthRemainder; j++) {
                      dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;
                    }
                  }
                  return {
                    srcPos,
                    destPos
                  };
                }
                function convertRGBToRGBA({
                  src,
                  srcPos = 0,
                  dest,
                  destPos = 0,
                  width,
                  height
                }) {
                  let i = 0;
                  const len32 = src.length >> 2;
                  const src32 = new Uint32Array(src.buffer, srcPos, len32);
                  if (_util2.FeatureTest.isLittleEndian) {
                    for (; i < len32 - 2; i += 3, destPos += 4) {
                      const s1 = src32[i];
                      const s2 = src32[i + 1];
                      const s3 = src32[i + 2];
                      dest[destPos] = s1 | 4278190080;
                      dest[destPos + 1] = s1 >>> 24 | s2 << 8 | 4278190080;
                      dest[destPos + 2] = s2 >>> 16 | s3 << 16 | 4278190080;
                      dest[destPos + 3] = s3 >>> 8 | 4278190080;
                    }
                    for (let j = i * 4, jj = src.length; j < jj; j += 3) {
                      dest[destPos++] = src[j] | src[j + 1] << 8 | src[j + 2] << 16 | 4278190080;
                    }
                  } else {
                    for (; i < len32 - 2; i += 3, destPos += 4) {
                      const s1 = src32[i];
                      const s2 = src32[i + 1];
                      const s3 = src32[i + 2];
                      dest[destPos] = s1 | 255;
                      dest[destPos + 1] = s1 << 24 | s2 >>> 8 | 255;
                      dest[destPos + 2] = s2 << 16 | s3 >>> 16 | 255;
                      dest[destPos + 3] = s3 << 8 | 255;
                    }
                    for (let j = i * 4, jj = src.length; j < jj; j += 3) {
                      dest[destPos++] = src[j] << 24 | src[j + 1] << 16 | src[j + 2] << 8 | 255;
                    }
                  }
                  return {
                    srcPos,
                    destPos
                  };
                }
                function grayToRGBA(src, dest) {
                  if (_util2.FeatureTest.isLittleEndian) {
                    for (let i = 0, ii = src.length; i < ii; i++) {
                      dest[i] = src[i] * 65793 | 4278190080;
                    }
                  } else {
                    for (let i = 0, ii = src.length; i < ii; i++) {
                      dest[i] = src[i] * 16843008 | 255;
                    }
                  }
                }
              },
              /* 14 */
              /***/
              (__unused_webpack_module2, exports2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.GlobalWorkerOptions = void 0;
                const GlobalWorkerOptions = /* @__PURE__ */ Object.create(null);
                exports2.GlobalWorkerOptions = GlobalWorkerOptions;
                GlobalWorkerOptions.workerPort = null;
                GlobalWorkerOptions.workerSrc = "";
              },
              /* 15 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.MessageHandler = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                const CallbackKind = {
                  UNKNOWN: 0,
                  DATA: 1,
                  ERROR: 2
                };
                const StreamKind = {
                  UNKNOWN: 0,
                  CANCEL: 1,
                  CANCEL_COMPLETE: 2,
                  CLOSE: 3,
                  ENQUEUE: 4,
                  ERROR: 5,
                  PULL: 6,
                  PULL_COMPLETE: 7,
                  START_COMPLETE: 8
                };
                function wrapReason(reason) {
                  if (!(reason instanceof Error || typeof reason === "object" && reason !== null)) {
                    (0, _util2.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.');
                  }
                  switch (reason.name) {
                    case "AbortException":
                      return new _util2.AbortException(reason.message);
                    case "MissingPDFException":
                      return new _util2.MissingPDFException(reason.message);
                    case "PasswordException":
                      return new _util2.PasswordException(reason.message, reason.code);
                    case "UnexpectedResponseException":
                      return new _util2.UnexpectedResponseException(reason.message, reason.status);
                    case "UnknownErrorException":
                      return new _util2.UnknownErrorException(reason.message, reason.details);
                    default:
                      return new _util2.UnknownErrorException(reason.message, reason.toString());
                  }
                }
                class MessageHandler {
                  constructor(sourceName, targetName, comObj) {
                    this.sourceName = sourceName;
                    this.targetName = targetName;
                    this.comObj = comObj;
                    this.callbackId = 1;
                    this.streamId = 1;
                    this.streamSinks = /* @__PURE__ */ Object.create(null);
                    this.streamControllers = /* @__PURE__ */ Object.create(null);
                    this.callbackCapabilities = /* @__PURE__ */ Object.create(null);
                    this.actionHandler = /* @__PURE__ */ Object.create(null);
                    this._onComObjOnMessage = (event) => {
                      const data = event.data;
                      if (data.targetName !== this.sourceName) {
                        return;
                      }
                      if (data.stream) {
                        this.#processStreamMessage(data);
                        return;
                      }
                      if (data.callback) {
                        const callbackId = data.callbackId;
                        const capability = this.callbackCapabilities[callbackId];
                        if (!capability) {
                          throw new Error(`Cannot resolve callback ${callbackId}`);
                        }
                        delete this.callbackCapabilities[callbackId];
                        if (data.callback === CallbackKind.DATA) {
                          capability.resolve(data.data);
                        } else if (data.callback === CallbackKind.ERROR) {
                          capability.reject(wrapReason(data.reason));
                        } else {
                          throw new Error("Unexpected callback case");
                        }
                        return;
                      }
                      const action = this.actionHandler[data.action];
                      if (!action) {
                        throw new Error(`Unknown action from worker: ${data.action}`);
                      }
                      if (data.callbackId) {
                        const cbSourceName = this.sourceName;
                        const cbTargetName = data.sourceName;
                        new Promise(function(resolve) {
                          resolve(action(data.data));
                        }).then(function(result) {
                          comObj.postMessage({
                            sourceName: cbSourceName,
                            targetName: cbTargetName,
                            callback: CallbackKind.DATA,
                            callbackId: data.callbackId,
                            data: result
                          });
                        }, function(reason) {
                          comObj.postMessage({
                            sourceName: cbSourceName,
                            targetName: cbTargetName,
                            callback: CallbackKind.ERROR,
                            callbackId: data.callbackId,
                            reason: wrapReason(reason)
                          });
                        });
                        return;
                      }
                      if (data.streamId) {
                        this.#createStreamSink(data);
                        return;
                      }
                      action(data.data);
                    };
                    comObj.addEventListener("message", this._onComObjOnMessage);
                  }
                  on(actionName, handler) {
                    const ah = this.actionHandler;
                    if (ah[actionName]) {
                      throw new Error(`There is already an actionName called "${actionName}"`);
                    }
                    ah[actionName] = handler;
                  }
                  send(actionName, data, transfers) {
                    this.comObj.postMessage({
                      sourceName: this.sourceName,
                      targetName: this.targetName,
                      action: actionName,
                      data
                    }, transfers);
                  }
                  sendWithPromise(actionName, data, transfers) {
                    const callbackId = this.callbackId++;
                    const capability = new _util2.PromiseCapability();
                    this.callbackCapabilities[callbackId] = capability;
                    try {
                      this.comObj.postMessage({
                        sourceName: this.sourceName,
                        targetName: this.targetName,
                        action: actionName,
                        callbackId,
                        data
                      }, transfers);
                    } catch (ex) {
                      capability.reject(ex);
                    }
                    return capability.promise;
                  }
                  sendWithStream(actionName, data, queueingStrategy, transfers) {
                    const streamId = this.streamId++, sourceName = this.sourceName, targetName = this.targetName, comObj = this.comObj;
                    return new ReadableStream({
                      start: (controller) => {
                        const startCapability = new _util2.PromiseCapability();
                        this.streamControllers[streamId] = {
                          controller,
                          startCall: startCapability,
                          pullCall: null,
                          cancelCall: null,
                          isClosed: false
                        };
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          action: actionName,
                          streamId,
                          data,
                          desiredSize: controller.desiredSize
                        }, transfers);
                        return startCapability.promise;
                      },
                      pull: (controller) => {
                        const pullCapability = new _util2.PromiseCapability();
                        this.streamControllers[streamId].pullCall = pullCapability;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.PULL,
                          streamId,
                          desiredSize: controller.desiredSize
                        });
                        return pullCapability.promise;
                      },
                      cancel: (reason) => {
                        (0, _util2.assert)(reason instanceof Error, "cancel must have a valid reason");
                        const cancelCapability = new _util2.PromiseCapability();
                        this.streamControllers[streamId].cancelCall = cancelCapability;
                        this.streamControllers[streamId].isClosed = true;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.CANCEL,
                          streamId,
                          reason: wrapReason(reason)
                        });
                        return cancelCapability.promise;
                      }
                    }, queueingStrategy);
                  }
                  #createStreamSink(data) {
                    const streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;
                    const self = this, action = this.actionHandler[data.action];
                    const streamSink = {
                      enqueue(chunk, size = 1, transfers) {
                        if (this.isCancelled) {
                          return;
                        }
                        const lastDesiredSize = this.desiredSize;
                        this.desiredSize -= size;
                        if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                          this.sinkCapability = new _util2.PromiseCapability();
                          this.ready = this.sinkCapability.promise;
                        }
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.ENQUEUE,
                          streamId,
                          chunk
                        }, transfers);
                      },
                      close() {
                        if (this.isCancelled) {
                          return;
                        }
                        this.isCancelled = true;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.CLOSE,
                          streamId
                        });
                        delete self.streamSinks[streamId];
                      },
                      error(reason) {
                        (0, _util2.assert)(reason instanceof Error, "error must have a valid reason");
                        if (this.isCancelled) {
                          return;
                        }
                        this.isCancelled = true;
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.ERROR,
                          streamId,
                          reason: wrapReason(reason)
                        });
                      },
                      sinkCapability: new _util2.PromiseCapability(),
                      onPull: null,
                      onCancel: null,
                      isCancelled: false,
                      desiredSize: data.desiredSize,
                      ready: null
                    };
                    streamSink.sinkCapability.resolve();
                    streamSink.ready = streamSink.sinkCapability.promise;
                    this.streamSinks[streamId] = streamSink;
                    new Promise(function(resolve) {
                      resolve(action(data.data, streamSink));
                    }).then(function() {
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.START_COMPLETE,
                        streamId,
                        success: true
                      });
                    }, function(reason) {
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.START_COMPLETE,
                        streamId,
                        reason: wrapReason(reason)
                      });
                    });
                  }
                  #processStreamMessage(data) {
                    const streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;
                    const streamController = this.streamControllers[streamId], streamSink = this.streamSinks[streamId];
                    switch (data.stream) {
                      case StreamKind.START_COMPLETE:
                        if (data.success) {
                          streamController.startCall.resolve();
                        } else {
                          streamController.startCall.reject(wrapReason(data.reason));
                        }
                        break;
                      case StreamKind.PULL_COMPLETE:
                        if (data.success) {
                          streamController.pullCall.resolve();
                        } else {
                          streamController.pullCall.reject(wrapReason(data.reason));
                        }
                        break;
                      case StreamKind.PULL:
                        if (!streamSink) {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.PULL_COMPLETE,
                            streamId,
                            success: true
                          });
                          break;
                        }
                        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
                          streamSink.sinkCapability.resolve();
                        }
                        streamSink.desiredSize = data.desiredSize;
                        new Promise(function(resolve) {
                          resolve(streamSink.onPull?.());
                        }).then(function() {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.PULL_COMPLETE,
                            streamId,
                            success: true
                          });
                        }, function(reason) {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.PULL_COMPLETE,
                            streamId,
                            reason: wrapReason(reason)
                          });
                        });
                        break;
                      case StreamKind.ENQUEUE:
                        (0, _util2.assert)(streamController, "enqueue should have stream controller");
                        if (streamController.isClosed) {
                          break;
                        }
                        streamController.controller.enqueue(data.chunk);
                        break;
                      case StreamKind.CLOSE:
                        (0, _util2.assert)(streamController, "close should have stream controller");
                        if (streamController.isClosed) {
                          break;
                        }
                        streamController.isClosed = true;
                        streamController.controller.close();
                        this.#deleteStreamController(streamController, streamId);
                        break;
                      case StreamKind.ERROR:
                        (0, _util2.assert)(streamController, "error should have stream controller");
                        streamController.controller.error(wrapReason(data.reason));
                        this.#deleteStreamController(streamController, streamId);
                        break;
                      case StreamKind.CANCEL_COMPLETE:
                        if (data.success) {
                          streamController.cancelCall.resolve();
                        } else {
                          streamController.cancelCall.reject(wrapReason(data.reason));
                        }
                        this.#deleteStreamController(streamController, streamId);
                        break;
                      case StreamKind.CANCEL:
                        if (!streamSink) {
                          break;
                        }
                        new Promise(function(resolve) {
                          resolve(streamSink.onCancel?.(wrapReason(data.reason)));
                        }).then(function() {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.CANCEL_COMPLETE,
                            streamId,
                            success: true
                          });
                        }, function(reason) {
                          comObj.postMessage({
                            sourceName,
                            targetName,
                            stream: StreamKind.CANCEL_COMPLETE,
                            streamId,
                            reason: wrapReason(reason)
                          });
                        });
                        streamSink.sinkCapability.reject(wrapReason(data.reason));
                        streamSink.isCancelled = true;
                        delete this.streamSinks[streamId];
                        break;
                      default:
                        throw new Error("Unexpected stream case");
                    }
                  }
                  async #deleteStreamController(streamController, streamId) {
                    await Promise.allSettled([streamController.startCall?.promise, streamController.pullCall?.promise, streamController.cancelCall?.promise]);
                    delete this.streamControllers[streamId];
                  }
                  destroy() {
                    this.comObj.removeEventListener("message", this._onComObjOnMessage);
                  }
                }
                exports2.MessageHandler = MessageHandler;
              },
              /* 16 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.Metadata = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                class Metadata {
                  #metadataMap;
                  #data;
                  constructor({
                    parsedData,
                    rawData
                  }) {
                    this.#metadataMap = parsedData;
                    this.#data = rawData;
                  }
                  getRaw() {
                    return this.#data;
                  }
                  get(name) {
                    return this.#metadataMap.get(name) ?? null;
                  }
                  getAll() {
                    return (0, _util2.objectFromMap)(this.#metadataMap);
                  }
                  has(name) {
                    return this.#metadataMap.has(name);
                  }
                }
                exports2.Metadata = Metadata;
              },
              /* 17 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.OptionalContentConfig = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _murmurhash = __w_pdfjs_require__2(8);
                const INTERNAL = Symbol("INTERNAL");
                class OptionalContentGroup {
                  #visible = true;
                  constructor(name, intent) {
                    this.name = name;
                    this.intent = intent;
                  }
                  get visible() {
                    return this.#visible;
                  }
                  _setVisible(internal, visible) {
                    if (internal !== INTERNAL) {
                      (0, _util2.unreachable)("Internal method `_setVisible` called.");
                    }
                    this.#visible = visible;
                  }
                }
                class OptionalContentConfig {
                  #cachedGetHash = null;
                  #groups = /* @__PURE__ */ new Map();
                  #initialHash = null;
                  #order = null;
                  constructor(data) {
                    this.name = null;
                    this.creator = null;
                    if (data === null) {
                      return;
                    }
                    this.name = data.name;
                    this.creator = data.creator;
                    this.#order = data.order;
                    for (const group of data.groups) {
                      this.#groups.set(group.id, new OptionalContentGroup(group.name, group.intent));
                    }
                    if (data.baseState === "OFF") {
                      for (const group of this.#groups.values()) {
                        group._setVisible(INTERNAL, false);
                      }
                    }
                    for (const on of data.on) {
                      this.#groups.get(on)._setVisible(INTERNAL, true);
                    }
                    for (const off of data.off) {
                      this.#groups.get(off)._setVisible(INTERNAL, false);
                    }
                    this.#initialHash = this.getHash();
                  }
                  #evaluateVisibilityExpression(array) {
                    const length = array.length;
                    if (length < 2) {
                      return true;
                    }
                    const operator = array[0];
                    for (let i = 1; i < length; i++) {
                      const element = array[i];
                      let state;
                      if (Array.isArray(element)) {
                        state = this.#evaluateVisibilityExpression(element);
                      } else if (this.#groups.has(element)) {
                        state = this.#groups.get(element).visible;
                      } else {
                        (0, _util2.warn)(`Optional content group not found: ${element}`);
                        return true;
                      }
                      switch (operator) {
                        case "And":
                          if (!state) {
                            return false;
                          }
                          break;
                        case "Or":
                          if (state) {
                            return true;
                          }
                          break;
                        case "Not":
                          return !state;
                        default:
                          return true;
                      }
                    }
                    return operator === "And";
                  }
                  isVisible(group) {
                    if (this.#groups.size === 0) {
                      return true;
                    }
                    if (!group) {
                      (0, _util2.warn)("Optional content group not defined.");
                      return true;
                    }
                    if (group.type === "OCG") {
                      if (!this.#groups.has(group.id)) {
                        (0, _util2.warn)(`Optional content group not found: ${group.id}`);
                        return true;
                      }
                      return this.#groups.get(group.id).visible;
                    } else if (group.type === "OCMD") {
                      if (group.expression) {
                        return this.#evaluateVisibilityExpression(group.expression);
                      }
                      if (!group.policy || group.policy === "AnyOn") {
                        for (const id of group.ids) {
                          if (!this.#groups.has(id)) {
                            (0, _util2.warn)(`Optional content group not found: ${id}`);
                            return true;
                          }
                          if (this.#groups.get(id).visible) {
                            return true;
                          }
                        }
                        return false;
                      } else if (group.policy === "AllOn") {
                        for (const id of group.ids) {
                          if (!this.#groups.has(id)) {
                            (0, _util2.warn)(`Optional content group not found: ${id}`);
                            return true;
                          }
                          if (!this.#groups.get(id).visible) {
                            return false;
                          }
                        }
                        return true;
                      } else if (group.policy === "AnyOff") {
                        for (const id of group.ids) {
                          if (!this.#groups.has(id)) {
                            (0, _util2.warn)(`Optional content group not found: ${id}`);
                            return true;
                          }
                          if (!this.#groups.get(id).visible) {
                            return true;
                          }
                        }
                        return false;
                      } else if (group.policy === "AllOff") {
                        for (const id of group.ids) {
                          if (!this.#groups.has(id)) {
                            (0, _util2.warn)(`Optional content group not found: ${id}`);
                            return true;
                          }
                          if (this.#groups.get(id).visible) {
                            return false;
                          }
                        }
                        return true;
                      }
                      (0, _util2.warn)(`Unknown optional content policy ${group.policy}.`);
                      return true;
                    }
                    (0, _util2.warn)(`Unknown group type ${group.type}.`);
                    return true;
                  }
                  setVisibility(id, visible = true) {
                    if (!this.#groups.has(id)) {
                      (0, _util2.warn)(`Optional content group not found: ${id}`);
                      return;
                    }
                    this.#groups.get(id)._setVisible(INTERNAL, !!visible);
                    this.#cachedGetHash = null;
                  }
                  get hasInitialVisibility() {
                    return this.#initialHash === null || this.getHash() === this.#initialHash;
                  }
                  getOrder() {
                    if (!this.#groups.size) {
                      return null;
                    }
                    if (this.#order) {
                      return this.#order.slice();
                    }
                    return [...this.#groups.keys()];
                  }
                  getGroups() {
                    return this.#groups.size > 0 ? (0, _util2.objectFromMap)(this.#groups) : null;
                  }
                  getGroup(id) {
                    return this.#groups.get(id) || null;
                  }
                  getHash() {
                    if (this.#cachedGetHash !== null) {
                      return this.#cachedGetHash;
                    }
                    const hash = new _murmurhash.MurmurHash3_64();
                    for (const [id, group] of this.#groups) {
                      hash.update(`${id}:${group.visible}`);
                    }
                    return this.#cachedGetHash = hash.hexdigest();
                  }
                }
                exports2.OptionalContentConfig = OptionalContentConfig;
              },
              /* 18 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.PDFDataTransportStream = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _display_utils2 = __w_pdfjs_require__2(6);
                class PDFDataTransportStream {
                  constructor({
                    length,
                    initialData,
                    progressiveDone = false,
                    contentDispositionFilename = null,
                    disableRange = false,
                    disableStream = false
                  }, pdfDataRangeTransport) {
                    (0, _util2.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
                    this._queuedChunks = [];
                    this._progressiveDone = progressiveDone;
                    this._contentDispositionFilename = contentDispositionFilename;
                    if (initialData?.length > 0) {
                      const buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;
                      this._queuedChunks.push(buffer);
                    }
                    this._pdfDataRangeTransport = pdfDataRangeTransport;
                    this._isStreamingSupported = !disableStream;
                    this._isRangeSupported = !disableRange;
                    this._contentLength = length;
                    this._fullRequestReader = null;
                    this._rangeReaders = [];
                    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {
                      this._onReceiveData({
                        begin,
                        chunk
                      });
                    });
                    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {
                      this._onProgress({
                        loaded,
                        total
                      });
                    });
                    this._pdfDataRangeTransport.addProgressiveReadListener((chunk) => {
                      this._onReceiveData({
                        chunk
                      });
                    });
                    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {
                      this._onProgressiveDone();
                    });
                    this._pdfDataRangeTransport.transportReady();
                  }
                  _onReceiveData({
                    begin,
                    chunk
                  }) {
                    const buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;
                    if (begin === void 0) {
                      if (this._fullRequestReader) {
                        this._fullRequestReader._enqueue(buffer);
                      } else {
                        this._queuedChunks.push(buffer);
                      }
                    } else {
                      const found = this._rangeReaders.some(function(rangeReader) {
                        if (rangeReader._begin !== begin) {
                          return false;
                        }
                        rangeReader._enqueue(buffer);
                        return true;
                      });
                      (0, _util2.assert)(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
                    }
                  }
                  get _progressiveDataLength() {
                    return this._fullRequestReader?._loaded ?? 0;
                  }
                  _onProgress(evt) {
                    if (evt.total === void 0) {
                      this._rangeReaders[0]?.onProgress?.({
                        loaded: evt.loaded
                      });
                    } else {
                      this._fullRequestReader?.onProgress?.({
                        loaded: evt.loaded,
                        total: evt.total
                      });
                    }
                  }
                  _onProgressiveDone() {
                    this._fullRequestReader?.progressiveDone();
                    this._progressiveDone = true;
                  }
                  _removeRangeReader(reader) {
                    const i = this._rangeReaders.indexOf(reader);
                    if (i >= 0) {
                      this._rangeReaders.splice(i, 1);
                    }
                  }
                  getFullReader() {
                    (0, _util2.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
                    const queuedChunks = this._queuedChunks;
                    this._queuedChunks = null;
                    return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);
                  }
                  getRangeReader(begin, end) {
                    if (end <= this._progressiveDataLength) {
                      return null;
                    }
                    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);
                    this._pdfDataRangeTransport.requestDataRange(begin, end);
                    this._rangeReaders.push(reader);
                    return reader;
                  }
                  cancelAllRequests(reason) {
                    this._fullRequestReader?.cancel(reason);
                    for (const reader of this._rangeReaders.slice(0)) {
                      reader.cancel(reason);
                    }
                    this._pdfDataRangeTransport.abort();
                  }
                }
                exports2.PDFDataTransportStream = PDFDataTransportStream;
                class PDFDataTransportStreamReader {
                  constructor(stream, queuedChunks, progressiveDone = false, contentDispositionFilename = null) {
                    this._stream = stream;
                    this._done = progressiveDone || false;
                    this._filename = (0, _display_utils2.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;
                    this._queuedChunks = queuedChunks || [];
                    this._loaded = 0;
                    for (const chunk of this._queuedChunks) {
                      this._loaded += chunk.byteLength;
                    }
                    this._requests = [];
                    this._headersReady = Promise.resolve();
                    stream._fullRequestReader = this;
                    this.onProgress = null;
                  }
                  _enqueue(chunk) {
                    if (this._done) {
                      return;
                    }
                    if (this._requests.length > 0) {
                      const requestCapability = this._requests.shift();
                      requestCapability.resolve({
                        value: chunk,
                        done: false
                      });
                    } else {
                      this._queuedChunks.push(chunk);
                    }
                    this._loaded += chunk.byteLength;
                  }
                  get headersReady() {
                    return this._headersReady;
                  }
                  get filename() {
                    return this._filename;
                  }
                  get isRangeSupported() {
                    return this._stream._isRangeSupported;
                  }
                  get isStreamingSupported() {
                    return this._stream._isStreamingSupported;
                  }
                  get contentLength() {
                    return this._stream._contentLength;
                  }
                  async read() {
                    if (this._queuedChunks.length > 0) {
                      const chunk = this._queuedChunks.shift();
                      return {
                        value: chunk,
                        done: false
                      };
                    }
                    if (this._done) {
                      return {
                        value: void 0,
                        done: true
                      };
                    }
                    const requestCapability = new _util2.PromiseCapability();
                    this._requests.push(requestCapability);
                    return requestCapability.promise;
                  }
                  cancel(reason) {
                    this._done = true;
                    for (const requestCapability of this._requests) {
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                    this._requests.length = 0;
                  }
                  progressiveDone() {
                    if (this._done) {
                      return;
                    }
                    this._done = true;
                  }
                }
                class PDFDataTransportStreamRangeReader {
                  constructor(stream, begin, end) {
                    this._stream = stream;
                    this._begin = begin;
                    this._end = end;
                    this._queuedChunk = null;
                    this._requests = [];
                    this._done = false;
                    this.onProgress = null;
                  }
                  _enqueue(chunk) {
                    if (this._done) {
                      return;
                    }
                    if (this._requests.length === 0) {
                      this._queuedChunk = chunk;
                    } else {
                      const requestsCapability = this._requests.shift();
                      requestsCapability.resolve({
                        value: chunk,
                        done: false
                      });
                      for (const requestCapability of this._requests) {
                        requestCapability.resolve({
                          value: void 0,
                          done: true
                        });
                      }
                      this._requests.length = 0;
                    }
                    this._done = true;
                    this._stream._removeRangeReader(this);
                  }
                  get isStreamingSupported() {
                    return false;
                  }
                  async read() {
                    if (this._queuedChunk) {
                      const chunk = this._queuedChunk;
                      this._queuedChunk = null;
                      return {
                        value: chunk,
                        done: false
                      };
                    }
                    if (this._done) {
                      return {
                        value: void 0,
                        done: true
                      };
                    }
                    const requestCapability = new _util2.PromiseCapability();
                    this._requests.push(requestCapability);
                    return requestCapability.promise;
                  }
                  cancel(reason) {
                    this._done = true;
                    for (const requestCapability of this._requests) {
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                    this._requests.length = 0;
                    this._stream._removeRangeReader(this);
                  }
                }
              },
              /* 19 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.PDFFetchStream = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _network_utils = __w_pdfjs_require__2(20);
                ;
                function createFetchOptions(headers, withCredentials, abortController) {
                  return {
                    method: "GET",
                    headers,
                    signal: abortController.signal,
                    mode: "cors",
                    credentials: withCredentials ? "include" : "same-origin",
                    redirect: "follow"
                  };
                }
                function createHeaders(httpHeaders) {
                  const headers = new Headers();
                  for (const property in httpHeaders) {
                    const value = httpHeaders[property];
                    if (value === void 0) {
                      continue;
                    }
                    headers.append(property, value);
                  }
                  return headers;
                }
                function getArrayBuffer(val) {
                  if (val instanceof Uint8Array) {
                    return val.buffer;
                  }
                  if (val instanceof ArrayBuffer) {
                    return val;
                  }
                  (0, _util2.warn)(`getArrayBuffer - unexpected data format: ${val}`);
                  return new Uint8Array(val).buffer;
                }
                class PDFFetchStream {
                  constructor(source) {
                    this.source = source;
                    this.isHttp = /^https?:/i.test(source.url);
                    this.httpHeaders = this.isHttp && source.httpHeaders || {};
                    this._fullRequestReader = null;
                    this._rangeRequestReaders = [];
                  }
                  get _progressiveDataLength() {
                    return this._fullRequestReader?._loaded ?? 0;
                  }
                  getFullReader() {
                    (0, _util2.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");
                    this._fullRequestReader = new PDFFetchStreamReader(this);
                    return this._fullRequestReader;
                  }
                  getRangeReader(begin, end) {
                    if (end <= this._progressiveDataLength) {
                      return null;
                    }
                    const reader = new PDFFetchStreamRangeReader(this, begin, end);
                    this._rangeRequestReaders.push(reader);
                    return reader;
                  }
                  cancelAllRequests(reason) {
                    this._fullRequestReader?.cancel(reason);
                    for (const reader of this._rangeRequestReaders.slice(0)) {
                      reader.cancel(reason);
                    }
                  }
                }
                exports2.PDFFetchStream = PDFFetchStream;
                class PDFFetchStreamReader {
                  constructor(stream) {
                    this._stream = stream;
                    this._reader = null;
                    this._loaded = 0;
                    this._filename = null;
                    const source = stream.source;
                    this._withCredentials = source.withCredentials || false;
                    this._contentLength = source.length;
                    this._headersCapability = new _util2.PromiseCapability();
                    this._disableRange = source.disableRange || false;
                    this._rangeChunkSize = source.rangeChunkSize;
                    if (!this._rangeChunkSize && !this._disableRange) {
                      this._disableRange = true;
                    }
                    this._abortController = new AbortController();
                    this._isStreamingSupported = !source.disableStream;
                    this._isRangeSupported = !source.disableRange;
                    this._headers = createHeaders(this._stream.httpHeaders);
                    const url = source.url;
                    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then((response) => {
                      if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                        throw (0, _network_utils.createResponseStatusError)(response.status, url);
                      }
                      this._reader = response.body.getReader();
                      this._headersCapability.resolve();
                      const getResponseHeader = (name) => {
                        return response.headers.get(name);
                      };
                      const {
                        allowRangeRequests,
                        suggestedLength
                      } = (0, _network_utils.validateRangeRequestCapabilities)({
                        getResponseHeader,
                        isHttp: this._stream.isHttp,
                        rangeChunkSize: this._rangeChunkSize,
                        disableRange: this._disableRange
                      });
                      this._isRangeSupported = allowRangeRequests;
                      this._contentLength = suggestedLength || this._contentLength;
                      this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                      if (!this._isStreamingSupported && this._isRangeSupported) {
                        this.cancel(new _util2.AbortException("Streaming is disabled."));
                      }
                    }).catch(this._headersCapability.reject);
                    this.onProgress = null;
                  }
                  get headersReady() {
                    return this._headersCapability.promise;
                  }
                  get filename() {
                    return this._filename;
                  }
                  get contentLength() {
                    return this._contentLength;
                  }
                  get isRangeSupported() {
                    return this._isRangeSupported;
                  }
                  get isStreamingSupported() {
                    return this._isStreamingSupported;
                  }
                  async read() {
                    await this._headersCapability.promise;
                    const {
                      value,
                      done
                    } = await this._reader.read();
                    if (done) {
                      return {
                        value,
                        done
                      };
                    }
                    this._loaded += value.byteLength;
                    this.onProgress?.({
                      loaded: this._loaded,
                      total: this._contentLength
                    });
                    return {
                      value: getArrayBuffer(value),
                      done: false
                    };
                  }
                  cancel(reason) {
                    this._reader?.cancel(reason);
                    this._abortController.abort();
                  }
                }
                class PDFFetchStreamRangeReader {
                  constructor(stream, begin, end) {
                    this._stream = stream;
                    this._reader = null;
                    this._loaded = 0;
                    const source = stream.source;
                    this._withCredentials = source.withCredentials || false;
                    this._readCapability = new _util2.PromiseCapability();
                    this._isStreamingSupported = !source.disableStream;
                    this._abortController = new AbortController();
                    this._headers = createHeaders(this._stream.httpHeaders);
                    this._headers.append("Range", `bytes=${begin}-${end - 1}`);
                    const url = source.url;
                    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then((response) => {
                      if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                        throw (0, _network_utils.createResponseStatusError)(response.status, url);
                      }
                      this._readCapability.resolve();
                      this._reader = response.body.getReader();
                    }).catch(this._readCapability.reject);
                    this.onProgress = null;
                  }
                  get isStreamingSupported() {
                    return this._isStreamingSupported;
                  }
                  async read() {
                    await this._readCapability.promise;
                    const {
                      value,
                      done
                    } = await this._reader.read();
                    if (done) {
                      return {
                        value,
                        done
                      };
                    }
                    this._loaded += value.byteLength;
                    this.onProgress?.({
                      loaded: this._loaded
                    });
                    return {
                      value: getArrayBuffer(value),
                      done: false
                    };
                  }
                  cancel(reason) {
                    this._reader?.cancel(reason);
                    this._abortController.abort();
                  }
                }
              },
              /* 20 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.createResponseStatusError = createResponseStatusError;
                exports2.extractFilenameFromHeader = extractFilenameFromHeader;
                exports2.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
                exports2.validateResponseStatus = validateResponseStatus;
                var _util2 = __w_pdfjs_require__2(1);
                var _content_disposition = __w_pdfjs_require__2(21);
                var _display_utils2 = __w_pdfjs_require__2(6);
                function validateRangeRequestCapabilities({
                  getResponseHeader,
                  isHttp,
                  rangeChunkSize,
                  disableRange
                }) {
                  const returnValues = {
                    allowRangeRequests: false,
                    suggestedLength: void 0
                  };
                  const length = parseInt(getResponseHeader("Content-Length"), 10);
                  if (!Number.isInteger(length)) {
                    return returnValues;
                  }
                  returnValues.suggestedLength = length;
                  if (length <= 2 * rangeChunkSize) {
                    return returnValues;
                  }
                  if (disableRange || !isHttp) {
                    return returnValues;
                  }
                  if (getResponseHeader("Accept-Ranges") !== "bytes") {
                    return returnValues;
                  }
                  const contentEncoding = getResponseHeader("Content-Encoding") || "identity";
                  if (contentEncoding !== "identity") {
                    return returnValues;
                  }
                  returnValues.allowRangeRequests = true;
                  return returnValues;
                }
                function extractFilenameFromHeader(getResponseHeader) {
                  const contentDisposition = getResponseHeader("Content-Disposition");
                  if (contentDisposition) {
                    let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);
                    if (filename.includes("%")) {
                      try {
                        filename = decodeURIComponent(filename);
                      } catch {
                      }
                    }
                    if ((0, _display_utils2.isPdfFile)(filename)) {
                      return filename;
                    }
                  }
                  return null;
                }
                function createResponseStatusError(status, url) {
                  if (status === 404 || status === 0 && url.startsWith("file:")) {
                    return new _util2.MissingPDFException('Missing PDF "' + url + '".');
                  }
                  return new _util2.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF "${url}".`, status);
                }
                function validateResponseStatus(status) {
                  return status === 200 || status === 206;
                }
              },
              /* 21 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;
                var _util2 = __w_pdfjs_require__2(1);
                function getFilenameFromContentDispositionHeader(contentDisposition) {
                  let needsEncodingFixup = true;
                  let tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);
                  if (tmp) {
                    tmp = tmp[1];
                    let filename = rfc2616unquote(tmp);
                    filename = unescape(filename);
                    filename = rfc5987decode(filename);
                    filename = rfc2047decode(filename);
                    return fixupEncoding(filename);
                  }
                  tmp = rfc2231getparam(contentDisposition);
                  if (tmp) {
                    const filename = rfc2047decode(tmp);
                    return fixupEncoding(filename);
                  }
                  tmp = toParamRegExp("filename", "i").exec(contentDisposition);
                  if (tmp) {
                    tmp = tmp[1];
                    let filename = rfc2616unquote(tmp);
                    filename = rfc2047decode(filename);
                    return fixupEncoding(filename);
                  }
                  function toParamRegExp(attributePattern, flags) {
                    return new RegExp("(?:^|;)\\s*" + attributePattern + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)', flags);
                  }
                  function textdecode(encoding, value) {
                    if (encoding) {
                      if (!/^[\x00-\xFF]+$/.test(value)) {
                        return value;
                      }
                      try {
                        const decoder = new TextDecoder(encoding, {
                          fatal: true
                        });
                        const buffer = (0, _util2.stringToBytes)(value);
                        value = decoder.decode(buffer);
                        needsEncodingFixup = false;
                      } catch {
                      }
                    }
                    return value;
                  }
                  function fixupEncoding(value) {
                    if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
                      value = textdecode("utf-8", value);
                      if (needsEncodingFixup) {
                        value = textdecode("iso-8859-1", value);
                      }
                    }
                    return value;
                  }
                  function rfc2231getparam(contentDispositionStr) {
                    const matches = [];
                    let match;
                    const iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
                    while ((match = iter.exec(contentDispositionStr)) !== null) {
                      let [, n, quot, part] = match;
                      n = parseInt(n, 10);
                      if (n in matches) {
                        if (n === 0) {
                          break;
                        }
                        continue;
                      }
                      matches[n] = [quot, part];
                    }
                    const parts = [];
                    for (let n = 0; n < matches.length; ++n) {
                      if (!(n in matches)) {
                        break;
                      }
                      let [quot, part] = matches[n];
                      part = rfc2616unquote(part);
                      if (quot) {
                        part = unescape(part);
                        if (n === 0) {
                          part = rfc5987decode(part);
                        }
                      }
                      parts.push(part);
                    }
                    return parts.join("");
                  }
                  function rfc2616unquote(value) {
                    if (value.startsWith('"')) {
                      const parts = value.slice(1).split('\\"');
                      for (let i = 0; i < parts.length; ++i) {
                        const quotindex = parts[i].indexOf('"');
                        if (quotindex !== -1) {
                          parts[i] = parts[i].slice(0, quotindex);
                          parts.length = i + 1;
                        }
                        parts[i] = parts[i].replaceAll(/\\(.)/g, "$1");
                      }
                      value = parts.join('"');
                    }
                    return value;
                  }
                  function rfc5987decode(extvalue) {
                    const encodingend = extvalue.indexOf("'");
                    if (encodingend === -1) {
                      return extvalue;
                    }
                    const encoding = extvalue.slice(0, encodingend);
                    const langvalue = extvalue.slice(encodingend + 1);
                    const value = langvalue.replace(/^[^']*'/, "");
                    return textdecode(encoding, value);
                  }
                  function rfc2047decode(value) {
                    if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
                      return value;
                    }
                    return value.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(matches, charset, encoding, text) {
                      if (encoding === "q" || encoding === "Q") {
                        text = text.replaceAll("_", " ");
                        text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function(match, hex) {
                          return String.fromCharCode(parseInt(hex, 16));
                        });
                        return textdecode(charset, text);
                      }
                      try {
                        text = atob(text);
                      } catch {
                      }
                      return textdecode(charset, text);
                    });
                  }
                  return "";
                }
              },
              /* 22 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.PDFNetworkStream = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _network_utils = __w_pdfjs_require__2(20);
                ;
                const OK_RESPONSE = 200;
                const PARTIAL_CONTENT_RESPONSE = 206;
                function getArrayBuffer(xhr) {
                  const data = xhr.response;
                  if (typeof data !== "string") {
                    return data;
                  }
                  return (0, _util2.stringToBytes)(data).buffer;
                }
                class NetworkManager {
                  constructor(url, args = {}) {
                    this.url = url;
                    this.isHttp = /^https?:/i.test(url);
                    this.httpHeaders = this.isHttp && args.httpHeaders || /* @__PURE__ */ Object.create(null);
                    this.withCredentials = args.withCredentials || false;
                    this.currXhrId = 0;
                    this.pendingRequests = /* @__PURE__ */ Object.create(null);
                  }
                  requestRange(begin, end, listeners) {
                    const args = {
                      begin,
                      end
                    };
                    for (const prop in listeners) {
                      args[prop] = listeners[prop];
                    }
                    return this.request(args);
                  }
                  requestFull(listeners) {
                    return this.request(listeners);
                  }
                  request(args) {
                    const xhr = new XMLHttpRequest();
                    const xhrId = this.currXhrId++;
                    const pendingRequest = this.pendingRequests[xhrId] = {
                      xhr
                    };
                    xhr.open("GET", this.url);
                    xhr.withCredentials = this.withCredentials;
                    for (const property in this.httpHeaders) {
                      const value = this.httpHeaders[property];
                      if (value === void 0) {
                        continue;
                      }
                      xhr.setRequestHeader(property, value);
                    }
                    if (this.isHttp && "begin" in args && "end" in args) {
                      xhr.setRequestHeader("Range", `bytes=${args.begin}-${args.end - 1}`);
                      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;
                    } else {
                      pendingRequest.expectedStatus = OK_RESPONSE;
                    }
                    xhr.responseType = "arraybuffer";
                    if (args.onError) {
                      xhr.onerror = function(evt) {
                        args.onError(xhr.status);
                      };
                    }
                    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
                    xhr.onprogress = this.onProgress.bind(this, xhrId);
                    pendingRequest.onHeadersReceived = args.onHeadersReceived;
                    pendingRequest.onDone = args.onDone;
                    pendingRequest.onError = args.onError;
                    pendingRequest.onProgress = args.onProgress;
                    xhr.send(null);
                    return xhrId;
                  }
                  onProgress(xhrId, evt) {
                    const pendingRequest = this.pendingRequests[xhrId];
                    if (!pendingRequest) {
                      return;
                    }
                    pendingRequest.onProgress?.(evt);
                  }
                  onStateChange(xhrId, evt) {
                    const pendingRequest = this.pendingRequests[xhrId];
                    if (!pendingRequest) {
                      return;
                    }
                    const xhr = pendingRequest.xhr;
                    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
                      pendingRequest.onHeadersReceived();
                      delete pendingRequest.onHeadersReceived;
                    }
                    if (xhr.readyState !== 4) {
                      return;
                    }
                    if (!(xhrId in this.pendingRequests)) {
                      return;
                    }
                    delete this.pendingRequests[xhrId];
                    if (xhr.status === 0 && this.isHttp) {
                      pendingRequest.onError?.(xhr.status);
                      return;
                    }
                    const xhrStatus = xhr.status || OK_RESPONSE;
                    const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;
                    if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
                      pendingRequest.onError?.(xhr.status);
                      return;
                    }
                    const chunk = getArrayBuffer(xhr);
                    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
                      const rangeHeader = xhr.getResponseHeader("Content-Range");
                      const matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
                      pendingRequest.onDone({
                        begin: parseInt(matches[1], 10),
                        chunk
                      });
                    } else if (chunk) {
                      pendingRequest.onDone({
                        begin: 0,
                        chunk
                      });
                    } else {
                      pendingRequest.onError?.(xhr.status);
                    }
                  }
                  getRequestXhr(xhrId) {
                    return this.pendingRequests[xhrId].xhr;
                  }
                  isPendingRequest(xhrId) {
                    return xhrId in this.pendingRequests;
                  }
                  abortRequest(xhrId) {
                    const xhr = this.pendingRequests[xhrId].xhr;
                    delete this.pendingRequests[xhrId];
                    xhr.abort();
                  }
                }
                class PDFNetworkStream {
                  constructor(source) {
                    this._source = source;
                    this._manager = new NetworkManager(source.url, {
                      httpHeaders: source.httpHeaders,
                      withCredentials: source.withCredentials
                    });
                    this._rangeChunkSize = source.rangeChunkSize;
                    this._fullRequestReader = null;
                    this._rangeRequestReaders = [];
                  }
                  _onRangeRequestReaderClosed(reader) {
                    const i = this._rangeRequestReaders.indexOf(reader);
                    if (i >= 0) {
                      this._rangeRequestReaders.splice(i, 1);
                    }
                  }
                  getFullReader() {
                    (0, _util2.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");
                    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
                    return this._fullRequestReader;
                  }
                  getRangeReader(begin, end) {
                    const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
                    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);
                    this._rangeRequestReaders.push(reader);
                    return reader;
                  }
                  cancelAllRequests(reason) {
                    this._fullRequestReader?.cancel(reason);
                    for (const reader of this._rangeRequestReaders.slice(0)) {
                      reader.cancel(reason);
                    }
                  }
                }
                exports2.PDFNetworkStream = PDFNetworkStream;
                class PDFNetworkStreamFullRequestReader {
                  constructor(manager, source) {
                    this._manager = manager;
                    const args = {
                      onHeadersReceived: this._onHeadersReceived.bind(this),
                      onDone: this._onDone.bind(this),
                      onError: this._onError.bind(this),
                      onProgress: this._onProgress.bind(this)
                    };
                    this._url = source.url;
                    this._fullRequestId = manager.requestFull(args);
                    this._headersReceivedCapability = new _util2.PromiseCapability();
                    this._disableRange = source.disableRange || false;
                    this._contentLength = source.length;
                    this._rangeChunkSize = source.rangeChunkSize;
                    if (!this._rangeChunkSize && !this._disableRange) {
                      this._disableRange = true;
                    }
                    this._isStreamingSupported = false;
                    this._isRangeSupported = false;
                    this._cachedChunks = [];
                    this._requests = [];
                    this._done = false;
                    this._storedError = void 0;
                    this._filename = null;
                    this.onProgress = null;
                  }
                  _onHeadersReceived() {
                    const fullRequestXhrId = this._fullRequestId;
                    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);
                    const getResponseHeader = (name) => {
                      return fullRequestXhr.getResponseHeader(name);
                    };
                    const {
                      allowRangeRequests,
                      suggestedLength
                    } = (0, _network_utils.validateRangeRequestCapabilities)({
                      getResponseHeader,
                      isHttp: this._manager.isHttp,
                      rangeChunkSize: this._rangeChunkSize,
                      disableRange: this._disableRange
                    });
                    if (allowRangeRequests) {
                      this._isRangeSupported = true;
                    }
                    this._contentLength = suggestedLength || this._contentLength;
                    this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                    if (this._isRangeSupported) {
                      this._manager.abortRequest(fullRequestXhrId);
                    }
                    this._headersReceivedCapability.resolve();
                  }
                  _onDone(data) {
                    if (data) {
                      if (this._requests.length > 0) {
                        const requestCapability = this._requests.shift();
                        requestCapability.resolve({
                          value: data.chunk,
                          done: false
                        });
                      } else {
                        this._cachedChunks.push(data.chunk);
                      }
                    }
                    this._done = true;
                    if (this._cachedChunks.length > 0) {
                      return;
                    }
                    for (const requestCapability of this._requests) {
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                    this._requests.length = 0;
                  }
                  _onError(status) {
                    this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);
                    this._headersReceivedCapability.reject(this._storedError);
                    for (const requestCapability of this._requests) {
                      requestCapability.reject(this._storedError);
                    }
                    this._requests.length = 0;
                    this._cachedChunks.length = 0;
                  }
                  _onProgress(evt) {
                    this.onProgress?.({
                      loaded: evt.loaded,
                      total: evt.lengthComputable ? evt.total : this._contentLength
                    });
                  }
                  get filename() {
                    return this._filename;
                  }
                  get isRangeSupported() {
                    return this._isRangeSupported;
                  }
                  get isStreamingSupported() {
                    return this._isStreamingSupported;
                  }
                  get contentLength() {
                    return this._contentLength;
                  }
                  get headersReady() {
                    return this._headersReceivedCapability.promise;
                  }
                  async read() {
                    if (this._storedError) {
                      throw this._storedError;
                    }
                    if (this._cachedChunks.length > 0) {
                      const chunk = this._cachedChunks.shift();
                      return {
                        value: chunk,
                        done: false
                      };
                    }
                    if (this._done) {
                      return {
                        value: void 0,
                        done: true
                      };
                    }
                    const requestCapability = new _util2.PromiseCapability();
                    this._requests.push(requestCapability);
                    return requestCapability.promise;
                  }
                  cancel(reason) {
                    this._done = true;
                    this._headersReceivedCapability.reject(reason);
                    for (const requestCapability of this._requests) {
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                    this._requests.length = 0;
                    if (this._manager.isPendingRequest(this._fullRequestId)) {
                      this._manager.abortRequest(this._fullRequestId);
                    }
                    this._fullRequestReader = null;
                  }
                }
                class PDFNetworkStreamRangeRequestReader {
                  constructor(manager, begin, end) {
                    this._manager = manager;
                    const args = {
                      onDone: this._onDone.bind(this),
                      onError: this._onError.bind(this),
                      onProgress: this._onProgress.bind(this)
                    };
                    this._url = manager.url;
                    this._requestId = manager.requestRange(begin, end, args);
                    this._requests = [];
                    this._queuedChunk = null;
                    this._done = false;
                    this._storedError = void 0;
                    this.onProgress = null;
                    this.onClosed = null;
                  }
                  _close() {
                    this.onClosed?.(this);
                  }
                  _onDone(data) {
                    const chunk = data.chunk;
                    if (this._requests.length > 0) {
                      const requestCapability = this._requests.shift();
                      requestCapability.resolve({
                        value: chunk,
                        done: false
                      });
                    } else {
                      this._queuedChunk = chunk;
                    }
                    this._done = true;
                    for (const requestCapability of this._requests) {
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                    this._requests.length = 0;
                    this._close();
                  }
                  _onError(status) {
                    this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);
                    for (const requestCapability of this._requests) {
                      requestCapability.reject(this._storedError);
                    }
                    this._requests.length = 0;
                    this._queuedChunk = null;
                  }
                  _onProgress(evt) {
                    if (!this.isStreamingSupported) {
                      this.onProgress?.({
                        loaded: evt.loaded
                      });
                    }
                  }
                  get isStreamingSupported() {
                    return false;
                  }
                  async read() {
                    if (this._storedError) {
                      throw this._storedError;
                    }
                    if (this._queuedChunk !== null) {
                      const chunk = this._queuedChunk;
                      this._queuedChunk = null;
                      return {
                        value: chunk,
                        done: false
                      };
                    }
                    if (this._done) {
                      return {
                        value: void 0,
                        done: true
                      };
                    }
                    const requestCapability = new _util2.PromiseCapability();
                    this._requests.push(requestCapability);
                    return requestCapability.promise;
                  }
                  cancel(reason) {
                    this._done = true;
                    for (const requestCapability of this._requests) {
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                    this._requests.length = 0;
                    if (this._manager.isPendingRequest(this._requestId)) {
                      this._manager.abortRequest(this._requestId);
                    }
                    this._close();
                  }
                }
              },
              /* 23 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.PDFNodeStream = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _network_utils = __w_pdfjs_require__2(20);
                ;
                const fileUriRegex = /^file:\/\/\/[a-zA-Z]:\//;
                function parseUrl(sourceUrl) {
                  const url = require_url();
                  const parsedUrl = url.parse(sourceUrl);
                  if (parsedUrl.protocol === "file:" || parsedUrl.host) {
                    return parsedUrl;
                  }
                  if (/^[a-z]:[/\\]/i.test(sourceUrl)) {
                    return url.parse(`file:///${sourceUrl}`);
                  }
                  if (!parsedUrl.host) {
                    parsedUrl.protocol = "file:";
                  }
                  return parsedUrl;
                }
                class PDFNodeStream {
                  constructor(source) {
                    this.source = source;
                    this.url = parseUrl(source.url);
                    this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";
                    this.isFsUrl = this.url.protocol === "file:";
                    this.httpHeaders = this.isHttp && source.httpHeaders || {};
                    this._fullRequestReader = null;
                    this._rangeRequestReaders = [];
                  }
                  get _progressiveDataLength() {
                    return this._fullRequestReader?._loaded ?? 0;
                  }
                  getFullReader() {
                    (0, _util2.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");
                    this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
                    return this._fullRequestReader;
                  }
                  getRangeReader(start, end) {
                    if (end <= this._progressiveDataLength) {
                      return null;
                    }
                    const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);
                    this._rangeRequestReaders.push(rangeReader);
                    return rangeReader;
                  }
                  cancelAllRequests(reason) {
                    this._fullRequestReader?.cancel(reason);
                    for (const reader of this._rangeRequestReaders.slice(0)) {
                      reader.cancel(reason);
                    }
                  }
                }
                exports2.PDFNodeStream = PDFNodeStream;
                class BaseFullReader {
                  constructor(stream) {
                    this._url = stream.url;
                    this._done = false;
                    this._storedError = null;
                    this.onProgress = null;
                    const source = stream.source;
                    this._contentLength = source.length;
                    this._loaded = 0;
                    this._filename = null;
                    this._disableRange = source.disableRange || false;
                    this._rangeChunkSize = source.rangeChunkSize;
                    if (!this._rangeChunkSize && !this._disableRange) {
                      this._disableRange = true;
                    }
                    this._isStreamingSupported = !source.disableStream;
                    this._isRangeSupported = !source.disableRange;
                    this._readableStream = null;
                    this._readCapability = new _util2.PromiseCapability();
                    this._headersCapability = new _util2.PromiseCapability();
                  }
                  get headersReady() {
                    return this._headersCapability.promise;
                  }
                  get filename() {
                    return this._filename;
                  }
                  get contentLength() {
                    return this._contentLength;
                  }
                  get isRangeSupported() {
                    return this._isRangeSupported;
                  }
                  get isStreamingSupported() {
                    return this._isStreamingSupported;
                  }
                  async read() {
                    await this._readCapability.promise;
                    if (this._done) {
                      return {
                        value: void 0,
                        done: true
                      };
                    }
                    if (this._storedError) {
                      throw this._storedError;
                    }
                    const chunk = this._readableStream.read();
                    if (chunk === null) {
                      this._readCapability = new _util2.PromiseCapability();
                      return this.read();
                    }
                    this._loaded += chunk.length;
                    this.onProgress?.({
                      loaded: this._loaded,
                      total: this._contentLength
                    });
                    const buffer = new Uint8Array(chunk).buffer;
                    return {
                      value: buffer,
                      done: false
                    };
                  }
                  cancel(reason) {
                    if (!this._readableStream) {
                      this._error(reason);
                      return;
                    }
                    this._readableStream.destroy(reason);
                  }
                  _error(reason) {
                    this._storedError = reason;
                    this._readCapability.resolve();
                  }
                  _setReadableStream(readableStream) {
                    this._readableStream = readableStream;
                    readableStream.on("readable", () => {
                      this._readCapability.resolve();
                    });
                    readableStream.on("end", () => {
                      readableStream.destroy();
                      this._done = true;
                      this._readCapability.resolve();
                    });
                    readableStream.on("error", (reason) => {
                      this._error(reason);
                    });
                    if (!this._isStreamingSupported && this._isRangeSupported) {
                      this._error(new _util2.AbortException("streaming is disabled"));
                    }
                    if (this._storedError) {
                      this._readableStream.destroy(this._storedError);
                    }
                  }
                }
                class BaseRangeReader {
                  constructor(stream) {
                    this._url = stream.url;
                    this._done = false;
                    this._storedError = null;
                    this.onProgress = null;
                    this._loaded = 0;
                    this._readableStream = null;
                    this._readCapability = new _util2.PromiseCapability();
                    const source = stream.source;
                    this._isStreamingSupported = !source.disableStream;
                  }
                  get isStreamingSupported() {
                    return this._isStreamingSupported;
                  }
                  async read() {
                    await this._readCapability.promise;
                    if (this._done) {
                      return {
                        value: void 0,
                        done: true
                      };
                    }
                    if (this._storedError) {
                      throw this._storedError;
                    }
                    const chunk = this._readableStream.read();
                    if (chunk === null) {
                      this._readCapability = new _util2.PromiseCapability();
                      return this.read();
                    }
                    this._loaded += chunk.length;
                    this.onProgress?.({
                      loaded: this._loaded
                    });
                    const buffer = new Uint8Array(chunk).buffer;
                    return {
                      value: buffer,
                      done: false
                    };
                  }
                  cancel(reason) {
                    if (!this._readableStream) {
                      this._error(reason);
                      return;
                    }
                    this._readableStream.destroy(reason);
                  }
                  _error(reason) {
                    this._storedError = reason;
                    this._readCapability.resolve();
                  }
                  _setReadableStream(readableStream) {
                    this._readableStream = readableStream;
                    readableStream.on("readable", () => {
                      this._readCapability.resolve();
                    });
                    readableStream.on("end", () => {
                      readableStream.destroy();
                      this._done = true;
                      this._readCapability.resolve();
                    });
                    readableStream.on("error", (reason) => {
                      this._error(reason);
                    });
                    if (this._storedError) {
                      this._readableStream.destroy(this._storedError);
                    }
                  }
                }
                function createRequestOptions(parsedUrl, headers) {
                  return {
                    protocol: parsedUrl.protocol,
                    auth: parsedUrl.auth,
                    host: parsedUrl.hostname,
                    port: parsedUrl.port,
                    path: parsedUrl.path,
                    method: "GET",
                    headers
                  };
                }
                class PDFNodeStreamFullReader extends BaseFullReader {
                  constructor(stream) {
                    super(stream);
                    const handleResponse = (response) => {
                      if (response.statusCode === 404) {
                        const error = new _util2.MissingPDFException(`Missing PDF "${this._url}".`);
                        this._storedError = error;
                        this._headersCapability.reject(error);
                        return;
                      }
                      this._headersCapability.resolve();
                      this._setReadableStream(response);
                      const getResponseHeader = (name) => {
                        return this._readableStream.headers[name.toLowerCase()];
                      };
                      const {
                        allowRangeRequests,
                        suggestedLength
                      } = (0, _network_utils.validateRangeRequestCapabilities)({
                        getResponseHeader,
                        isHttp: stream.isHttp,
                        rangeChunkSize: this._rangeChunkSize,
                        disableRange: this._disableRange
                      });
                      this._isRangeSupported = allowRangeRequests;
                      this._contentLength = suggestedLength || this._contentLength;
                      this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                    };
                    this._request = null;
                    if (this._url.protocol === "http:") {
                      const http = require_http();
                      this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);
                    } else {
                      const https = require_https();
                      this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);
                    }
                    this._request.on("error", (reason) => {
                      this._storedError = reason;
                      this._headersCapability.reject(reason);
                    });
                    this._request.end();
                  }
                }
                class PDFNodeStreamRangeReader extends BaseRangeReader {
                  constructor(stream, start, end) {
                    super(stream);
                    this._httpHeaders = {};
                    for (const property in stream.httpHeaders) {
                      const value = stream.httpHeaders[property];
                      if (value === void 0) {
                        continue;
                      }
                      this._httpHeaders[property] = value;
                    }
                    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;
                    const handleResponse = (response) => {
                      if (response.statusCode === 404) {
                        const error = new _util2.MissingPDFException(`Missing PDF "${this._url}".`);
                        this._storedError = error;
                        return;
                      }
                      this._setReadableStream(response);
                    };
                    this._request = null;
                    if (this._url.protocol === "http:") {
                      const http = require_http();
                      this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);
                    } else {
                      const https = require_https();
                      this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);
                    }
                    this._request.on("error", (reason) => {
                      this._storedError = reason;
                    });
                    this._request.end();
                  }
                }
                class PDFNodeStreamFsFullReader extends BaseFullReader {
                  constructor(stream) {
                    super(stream);
                    let path = decodeURIComponent(this._url.path);
                    if (fileUriRegex.test(this._url.href)) {
                      path = path.replace(/^\//, "");
                    }
                    const fs = require_fs();
                    fs.lstat(path, (error, stat) => {
                      if (error) {
                        if (error.code === "ENOENT") {
                          error = new _util2.MissingPDFException(`Missing PDF "${path}".`);
                        }
                        this._storedError = error;
                        this._headersCapability.reject(error);
                        return;
                      }
                      this._contentLength = stat.size;
                      this._setReadableStream(fs.createReadStream(path));
                      this._headersCapability.resolve();
                    });
                  }
                }
                class PDFNodeStreamFsRangeReader extends BaseRangeReader {
                  constructor(stream, start, end) {
                    super(stream);
                    let path = decodeURIComponent(this._url.path);
                    if (fileUriRegex.test(this._url.href)) {
                      path = path.replace(/^\//, "");
                    }
                    const fs = require_fs();
                    this._setReadableStream(fs.createReadStream(path, {
                      start,
                      end: end - 1
                    }));
                  }
                }
              },
              /* 24 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.SVGGraphics = void 0;
                var _display_utils2 = __w_pdfjs_require__2(6);
                var _util2 = __w_pdfjs_require__2(1);
                ;
                const SVG_DEFAULTS = {
                  fontStyle: "normal",
                  fontWeight: "normal",
                  fillColor: "#000000"
                };
                const XML_NS = "http://www.w3.org/XML/1998/namespace";
                const XLINK_NS = "http://www.w3.org/1999/xlink";
                const LINE_CAP_STYLES = ["butt", "round", "square"];
                const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
                const createObjectURL = function(data, contentType = "", forceDataSchema = false) {
                  if (URL.createObjectURL && typeof Blob !== "undefined" && !forceDataSchema) {
                    return URL.createObjectURL(new Blob([data], {
                      type: contentType
                    }));
                  }
                  const digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                  let buffer = `data:${contentType};base64,`;
                  for (let i = 0, ii = data.length; i < ii; i += 3) {
                    const b1 = data[i] & 255;
                    const b2 = data[i + 1] & 255;
                    const b3 = data[i + 2] & 255;
                    const d1 = b1 >> 2, d2 = (b1 & 3) << 4 | b2 >> 4;
                    const d3 = i + 1 < ii ? (b2 & 15) << 2 | b3 >> 6 : 64;
                    const d4 = i + 2 < ii ? b3 & 63 : 64;
                    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
                  }
                  return buffer;
                };
                const convertImgDataToPng = function() {
                  const PNG_HEADER = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
                  const CHUNK_WRAPPER_SIZE = 12;
                  const crcTable = new Int32Array(256);
                  for (let i = 0; i < 256; i++) {
                    let c = i;
                    for (let h = 0; h < 8; h++) {
                      c = c & 1 ? 3988292384 ^ c >> 1 & 2147483647 : c >> 1 & 2147483647;
                    }
                    crcTable[i] = c;
                  }
                  function crc32(data, start, end) {
                    let crc = -1;
                    for (let i = start; i < end; i++) {
                      const a = (crc ^ data[i]) & 255;
                      const b = crcTable[a];
                      crc = crc >>> 8 ^ b;
                    }
                    return crc ^ -1;
                  }
                  function writePngChunk(type, body, data, offset) {
                    let p = offset;
                    const len = body.length;
                    data[p] = len >> 24 & 255;
                    data[p + 1] = len >> 16 & 255;
                    data[p + 2] = len >> 8 & 255;
                    data[p + 3] = len & 255;
                    p += 4;
                    data[p] = type.charCodeAt(0) & 255;
                    data[p + 1] = type.charCodeAt(1) & 255;
                    data[p + 2] = type.charCodeAt(2) & 255;
                    data[p + 3] = type.charCodeAt(3) & 255;
                    p += 4;
                    data.set(body, p);
                    p += body.length;
                    const crc = crc32(data, offset + 4, p);
                    data[p] = crc >> 24 & 255;
                    data[p + 1] = crc >> 16 & 255;
                    data[p + 2] = crc >> 8 & 255;
                    data[p + 3] = crc & 255;
                  }
                  function adler32(data, start, end) {
                    let a = 1;
                    let b = 0;
                    for (let i = start; i < end; ++i) {
                      a = (a + (data[i] & 255)) % 65521;
                      b = (b + a) % 65521;
                    }
                    return b << 16 | a;
                  }
                  function deflateSync(literals) {
                    if (!_util2.isNodeJS) {
                      return deflateSyncUncompressed(literals);
                    }
                    try {
                      const input = parseInt(process.versions.node) >= 8 ? literals : Buffer.from(literals);
                      const output = require_zlib().deflateSync(input, {
                        level: 9
                      });
                      return output instanceof Uint8Array ? output : new Uint8Array(output);
                    } catch (e) {
                      (0, _util2.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);
                    }
                    return deflateSyncUncompressed(literals);
                  }
                  function deflateSyncUncompressed(literals) {
                    let len = literals.length;
                    const maxBlockLength = 65535;
                    const deflateBlocks = Math.ceil(len / maxBlockLength);
                    const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
                    let pi = 0;
                    idat[pi++] = 120;
                    idat[pi++] = 156;
                    let pos = 0;
                    while (len > maxBlockLength) {
                      idat[pi++] = 0;
                      idat[pi++] = 255;
                      idat[pi++] = 255;
                      idat[pi++] = 0;
                      idat[pi++] = 0;
                      idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
                      pi += maxBlockLength;
                      pos += maxBlockLength;
                      len -= maxBlockLength;
                    }
                    idat[pi++] = 1;
                    idat[pi++] = len & 255;
                    idat[pi++] = len >> 8 & 255;
                    idat[pi++] = ~len & 65535 & 255;
                    idat[pi++] = (~len & 65535) >> 8 & 255;
                    idat.set(literals.subarray(pos), pi);
                    pi += literals.length - pos;
                    const adler = adler32(literals, 0, literals.length);
                    idat[pi++] = adler >> 24 & 255;
                    idat[pi++] = adler >> 16 & 255;
                    idat[pi++] = adler >> 8 & 255;
                    idat[pi++] = adler & 255;
                    return idat;
                  }
                  function encode(imgData, kind, forceDataSchema, isMask) {
                    const width = imgData.width;
                    const height = imgData.height;
                    let bitDepth, colorType, lineSize;
                    const bytes = imgData.data;
                    switch (kind) {
                      case _util2.ImageKind.GRAYSCALE_1BPP:
                        colorType = 0;
                        bitDepth = 1;
                        lineSize = width + 7 >> 3;
                        break;
                      case _util2.ImageKind.RGB_24BPP:
                        colorType = 2;
                        bitDepth = 8;
                        lineSize = width * 3;
                        break;
                      case _util2.ImageKind.RGBA_32BPP:
                        colorType = 6;
                        bitDepth = 8;
                        lineSize = width * 4;
                        break;
                      default:
                        throw new Error("invalid format");
                    }
                    const literals = new Uint8Array((1 + lineSize) * height);
                    let offsetLiterals = 0, offsetBytes = 0;
                    for (let y = 0; y < height; ++y) {
                      literals[offsetLiterals++] = 0;
                      literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
                      offsetBytes += lineSize;
                      offsetLiterals += lineSize;
                    }
                    if (kind === _util2.ImageKind.GRAYSCALE_1BPP && isMask) {
                      offsetLiterals = 0;
                      for (let y = 0; y < height; y++) {
                        offsetLiterals++;
                        for (let i = 0; i < lineSize; i++) {
                          literals[offsetLiterals++] ^= 255;
                        }
                      }
                    }
                    const ihdr = new Uint8Array([width >> 24 & 255, width >> 16 & 255, width >> 8 & 255, width & 255, height >> 24 & 255, height >> 16 & 255, height >> 8 & 255, height & 255, bitDepth, colorType, 0, 0, 0]);
                    const idat = deflateSync(literals);
                    const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
                    const data = new Uint8Array(pngLength);
                    let offset = 0;
                    data.set(PNG_HEADER, offset);
                    offset += PNG_HEADER.length;
                    writePngChunk("IHDR", ihdr, data, offset);
                    offset += CHUNK_WRAPPER_SIZE + ihdr.length;
                    writePngChunk("IDATA", idat, data, offset);
                    offset += CHUNK_WRAPPER_SIZE + idat.length;
                    writePngChunk("IEND", new Uint8Array(0), data, offset);
                    return createObjectURL(data, "image/png", forceDataSchema);
                  }
                  return function convertImgDataToPng2(imgData, forceDataSchema, isMask) {
                    const kind = imgData.kind === void 0 ? _util2.ImageKind.GRAYSCALE_1BPP : imgData.kind;
                    return encode(imgData, kind, forceDataSchema, isMask);
                  };
                }();
                class SVGExtraState {
                  constructor() {
                    this.fontSizeScale = 1;
                    this.fontWeight = SVG_DEFAULTS.fontWeight;
                    this.fontSize = 0;
                    this.textMatrix = _util2.IDENTITY_MATRIX;
                    this.fontMatrix = _util2.FONT_IDENTITY_MATRIX;
                    this.leading = 0;
                    this.textRenderingMode = _util2.TextRenderingMode.FILL;
                    this.textMatrixScale = 1;
                    this.x = 0;
                    this.y = 0;
                    this.lineX = 0;
                    this.lineY = 0;
                    this.charSpacing = 0;
                    this.wordSpacing = 0;
                    this.textHScale = 1;
                    this.textRise = 0;
                    this.fillColor = SVG_DEFAULTS.fillColor;
                    this.strokeColor = "#000000";
                    this.fillAlpha = 1;
                    this.strokeAlpha = 1;
                    this.lineWidth = 1;
                    this.lineJoin = "";
                    this.lineCap = "";
                    this.miterLimit = 0;
                    this.dashArray = [];
                    this.dashPhase = 0;
                    this.dependencies = [];
                    this.activeClipUrl = null;
                    this.clipGroup = null;
                    this.maskId = "";
                  }
                  clone() {
                    return Object.create(this);
                  }
                  setCurrentPoint(x, y) {
                    this.x = x;
                    this.y = y;
                  }
                }
                function opListToTree(opList) {
                  let opTree = [];
                  const tmp = [];
                  for (const opListElement of opList) {
                    if (opListElement.fn === "save") {
                      opTree.push({
                        fnId: 92,
                        fn: "group",
                        items: []
                      });
                      tmp.push(opTree);
                      opTree = opTree.at(-1).items;
                      continue;
                    }
                    if (opListElement.fn === "restore") {
                      opTree = tmp.pop();
                    } else {
                      opTree.push(opListElement);
                    }
                  }
                  return opTree;
                }
                function pf(value) {
                  if (Number.isInteger(value)) {
                    return value.toString();
                  }
                  const s = value.toFixed(10);
                  let i = s.length - 1;
                  if (s[i] !== "0") {
                    return s;
                  }
                  do {
                    i--;
                  } while (s[i] === "0");
                  return s.substring(0, s[i] === "." ? i : i + 1);
                }
                function pm(m) {
                  if (m[4] === 0 && m[5] === 0) {
                    if (m[1] === 0 && m[2] === 0) {
                      if (m[0] === 1 && m[3] === 1) {
                        return "";
                      }
                      return `scale(${pf(m[0])} ${pf(m[3])})`;
                    }
                    if (m[0] === m[3] && m[1] === -m[2]) {
                      const a = Math.acos(m[0]) * 180 / Math.PI;
                      return `rotate(${pf(a)})`;
                    }
                  } else if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
                    return `translate(${pf(m[4])} ${pf(m[5])})`;
                  }
                  return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ${pf(m[5])})`;
                }
                let clipCount = 0;
                let maskCount = 0;
                let shadingCount = 0;
                class SVGGraphics {
                  constructor(commonObjs, objs, forceDataSchema = false) {
                    (0, _display_utils2.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future.");
                    this.svgFactory = new _display_utils2.DOMSVGFactory();
                    this.current = new SVGExtraState();
                    this.transformMatrix = _util2.IDENTITY_MATRIX;
                    this.transformStack = [];
                    this.extraStack = [];
                    this.commonObjs = commonObjs;
                    this.objs = objs;
                    this.pendingClip = null;
                    this.pendingEOFill = false;
                    this.embedFonts = false;
                    this.embeddedFonts = /* @__PURE__ */ Object.create(null);
                    this.cssStyle = null;
                    this.forceDataSchema = !!forceDataSchema;
                    this._operatorIdMapping = [];
                    for (const op in _util2.OPS) {
                      this._operatorIdMapping[_util2.OPS[op]] = op;
                    }
                  }
                  getObject(data, fallback = null) {
                    if (typeof data === "string") {
                      return data.startsWith("g_") ? this.commonObjs.get(data) : this.objs.get(data);
                    }
                    return fallback;
                  }
                  save() {
                    this.transformStack.push(this.transformMatrix);
                    const old = this.current;
                    this.extraStack.push(old);
                    this.current = old.clone();
                  }
                  restore() {
                    this.transformMatrix = this.transformStack.pop();
                    this.current = this.extraStack.pop();
                    this.pendingClip = null;
                    this.tgrp = null;
                  }
                  group(items) {
                    this.save();
                    this.executeOpTree(items);
                    this.restore();
                  }
                  loadDependencies(operatorList) {
                    const fnArray = operatorList.fnArray;
                    const argsArray = operatorList.argsArray;
                    for (let i = 0, ii = fnArray.length; i < ii; i++) {
                      if (fnArray[i] !== _util2.OPS.dependency) {
                        continue;
                      }
                      for (const obj of argsArray[i]) {
                        const objsPool = obj.startsWith("g_") ? this.commonObjs : this.objs;
                        const promise = new Promise((resolve) => {
                          objsPool.get(obj, resolve);
                        });
                        this.current.dependencies.push(promise);
                      }
                    }
                    return Promise.all(this.current.dependencies);
                  }
                  transform(a, b, c, d, e, f) {
                    const transformMatrix = [a, b, c, d, e, f];
                    this.transformMatrix = _util2.Util.transform(this.transformMatrix, transformMatrix);
                    this.tgrp = null;
                  }
                  getSVG(operatorList, viewport) {
                    this.viewport = viewport;
                    const svgElement = this._initialize(viewport);
                    return this.loadDependencies(operatorList).then(() => {
                      this.transformMatrix = _util2.IDENTITY_MATRIX;
                      this.executeOpTree(this.convertOpList(operatorList));
                      return svgElement;
                    });
                  }
                  convertOpList(operatorList) {
                    const operatorIdMapping = this._operatorIdMapping;
                    const argsArray = operatorList.argsArray;
                    const fnArray = operatorList.fnArray;
                    const opList = [];
                    for (let i = 0, ii = fnArray.length; i < ii; i++) {
                      const fnId = fnArray[i];
                      opList.push({
                        fnId,
                        fn: operatorIdMapping[fnId],
                        args: argsArray[i]
                      });
                    }
                    return opListToTree(opList);
                  }
                  executeOpTree(opTree) {
                    for (const opTreeElement of opTree) {
                      const fn = opTreeElement.fn;
                      const fnId = opTreeElement.fnId;
                      const args = opTreeElement.args;
                      switch (fnId | 0) {
                        case _util2.OPS.beginText:
                          this.beginText();
                          break;
                        case _util2.OPS.dependency:
                          break;
                        case _util2.OPS.setLeading:
                          this.setLeading(args);
                          break;
                        case _util2.OPS.setLeadingMoveText:
                          this.setLeadingMoveText(args[0], args[1]);
                          break;
                        case _util2.OPS.setFont:
                          this.setFont(args);
                          break;
                        case _util2.OPS.showText:
                          this.showText(args[0]);
                          break;
                        case _util2.OPS.showSpacedText:
                          this.showText(args[0]);
                          break;
                        case _util2.OPS.endText:
                          this.endText();
                          break;
                        case _util2.OPS.moveText:
                          this.moveText(args[0], args[1]);
                          break;
                        case _util2.OPS.setCharSpacing:
                          this.setCharSpacing(args[0]);
                          break;
                        case _util2.OPS.setWordSpacing:
                          this.setWordSpacing(args[0]);
                          break;
                        case _util2.OPS.setHScale:
                          this.setHScale(args[0]);
                          break;
                        case _util2.OPS.setTextMatrix:
                          this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                          break;
                        case _util2.OPS.setTextRise:
                          this.setTextRise(args[0]);
                          break;
                        case _util2.OPS.setTextRenderingMode:
                          this.setTextRenderingMode(args[0]);
                          break;
                        case _util2.OPS.setLineWidth:
                          this.setLineWidth(args[0]);
                          break;
                        case _util2.OPS.setLineJoin:
                          this.setLineJoin(args[0]);
                          break;
                        case _util2.OPS.setLineCap:
                          this.setLineCap(args[0]);
                          break;
                        case _util2.OPS.setMiterLimit:
                          this.setMiterLimit(args[0]);
                          break;
                        case _util2.OPS.setFillRGBColor:
                          this.setFillRGBColor(args[0], args[1], args[2]);
                          break;
                        case _util2.OPS.setStrokeRGBColor:
                          this.setStrokeRGBColor(args[0], args[1], args[2]);
                          break;
                        case _util2.OPS.setStrokeColorN:
                          this.setStrokeColorN(args);
                          break;
                        case _util2.OPS.setFillColorN:
                          this.setFillColorN(args);
                          break;
                        case _util2.OPS.shadingFill:
                          this.shadingFill(args[0]);
                          break;
                        case _util2.OPS.setDash:
                          this.setDash(args[0], args[1]);
                          break;
                        case _util2.OPS.setRenderingIntent:
                          this.setRenderingIntent(args[0]);
                          break;
                        case _util2.OPS.setFlatness:
                          this.setFlatness(args[0]);
                          break;
                        case _util2.OPS.setGState:
                          this.setGState(args[0]);
                          break;
                        case _util2.OPS.fill:
                          this.fill();
                          break;
                        case _util2.OPS.eoFill:
                          this.eoFill();
                          break;
                        case _util2.OPS.stroke:
                          this.stroke();
                          break;
                        case _util2.OPS.fillStroke:
                          this.fillStroke();
                          break;
                        case _util2.OPS.eoFillStroke:
                          this.eoFillStroke();
                          break;
                        case _util2.OPS.clip:
                          this.clip("nonzero");
                          break;
                        case _util2.OPS.eoClip:
                          this.clip("evenodd");
                          break;
                        case _util2.OPS.paintSolidColorImageMask:
                          this.paintSolidColorImageMask();
                          break;
                        case _util2.OPS.paintImageXObject:
                          this.paintImageXObject(args[0]);
                          break;
                        case _util2.OPS.paintInlineImageXObject:
                          this.paintInlineImageXObject(args[0]);
                          break;
                        case _util2.OPS.paintImageMaskXObject:
                          this.paintImageMaskXObject(args[0]);
                          break;
                        case _util2.OPS.paintFormXObjectBegin:
                          this.paintFormXObjectBegin(args[0], args[1]);
                          break;
                        case _util2.OPS.paintFormXObjectEnd:
                          this.paintFormXObjectEnd();
                          break;
                        case _util2.OPS.closePath:
                          this.closePath();
                          break;
                        case _util2.OPS.closeStroke:
                          this.closeStroke();
                          break;
                        case _util2.OPS.closeFillStroke:
                          this.closeFillStroke();
                          break;
                        case _util2.OPS.closeEOFillStroke:
                          this.closeEOFillStroke();
                          break;
                        case _util2.OPS.nextLine:
                          this.nextLine();
                          break;
                        case _util2.OPS.transform:
                          this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
                          break;
                        case _util2.OPS.constructPath:
                          this.constructPath(args[0], args[1]);
                          break;
                        case _util2.OPS.endPath:
                          this.endPath();
                          break;
                        case 92:
                          this.group(opTreeElement.items);
                          break;
                        default:
                          (0, _util2.warn)(`Unimplemented operator ${fn}`);
                          break;
                      }
                    }
                  }
                  setWordSpacing(wordSpacing) {
                    this.current.wordSpacing = wordSpacing;
                  }
                  setCharSpacing(charSpacing) {
                    this.current.charSpacing = charSpacing;
                  }
                  nextLine() {
                    this.moveText(0, this.current.leading);
                  }
                  setTextMatrix(a, b, c, d, e, f) {
                    const current = this.current;
                    current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];
                    current.textMatrixScale = Math.hypot(a, b);
                    current.x = current.lineX = 0;
                    current.y = current.lineY = 0;
                    current.xcoords = [];
                    current.ycoords = [];
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                    current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);
                    current.tspan.setAttributeNS(null, "y", pf(-current.y));
                    current.txtElement = this.svgFactory.createElement("svg:text");
                    current.txtElement.append(current.tspan);
                  }
                  beginText() {
                    const current = this.current;
                    current.x = current.lineX = 0;
                    current.y = current.lineY = 0;
                    current.textMatrix = _util2.IDENTITY_MATRIX;
                    current.lineMatrix = _util2.IDENTITY_MATRIX;
                    current.textMatrixScale = 1;
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.txtElement = this.svgFactory.createElement("svg:text");
                    current.txtgrp = this.svgFactory.createElement("svg:g");
                    current.xcoords = [];
                    current.ycoords = [];
                  }
                  moveText(x, y) {
                    const current = this.current;
                    current.x = current.lineX += x;
                    current.y = current.lineY += y;
                    current.xcoords = [];
                    current.ycoords = [];
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                    current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);
                    current.tspan.setAttributeNS(null, "y", pf(-current.y));
                  }
                  showText(glyphs) {
                    const current = this.current;
                    const font = current.font;
                    const fontSize = current.fontSize;
                    if (fontSize === 0) {
                      return;
                    }
                    const fontSizeScale = current.fontSizeScale;
                    const charSpacing = current.charSpacing;
                    const wordSpacing = current.wordSpacing;
                    const fontDirection = current.fontDirection;
                    const textHScale = current.textHScale * fontDirection;
                    const vertical = font.vertical;
                    const spacingDir = vertical ? 1 : -1;
                    const defaultVMetrics = font.defaultVMetrics;
                    const widthAdvanceScale = fontSize * current.fontMatrix[0];
                    let x = 0;
                    for (const glyph of glyphs) {
                      if (glyph === null) {
                        x += fontDirection * wordSpacing;
                        continue;
                      } else if (typeof glyph === "number") {
                        x += spacingDir * glyph * fontSize / 1e3;
                        continue;
                      }
                      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                      const character = glyph.fontChar;
                      let scaledX, scaledY;
                      let width = glyph.width;
                      if (vertical) {
                        let vx;
                        const vmetric = glyph.vmetric || defaultVMetrics;
                        vx = glyph.vmetric ? vmetric[1] : width * 0.5;
                        vx = -vx * widthAdvanceScale;
                        const vy = vmetric[2] * widthAdvanceScale;
                        width = vmetric ? -vmetric[0] : width;
                        scaledX = vx / fontSizeScale;
                        scaledY = (x + vy) / fontSizeScale;
                      } else {
                        scaledX = x / fontSizeScale;
                        scaledY = 0;
                      }
                      if (glyph.isInFont || font.missingFile) {
                        current.xcoords.push(current.x + scaledX);
                        if (vertical) {
                          current.ycoords.push(-current.y + scaledY);
                        }
                        current.tspan.textContent += character;
                      } else {
                      }
                      const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;
                      x += charWidth;
                    }
                    current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));
                    if (vertical) {
                      current.tspan.setAttributeNS(null, "y", current.ycoords.map(pf).join(" "));
                    } else {
                      current.tspan.setAttributeNS(null, "y", pf(-current.y));
                    }
                    if (vertical) {
                      current.y -= x;
                    } else {
                      current.x += x * textHScale;
                    }
                    current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                    current.tspan.setAttributeNS(null, "font-size", `${pf(current.fontSize)}px`);
                    if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
                      current.tspan.setAttributeNS(null, "font-style", current.fontStyle);
                    }
                    if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
                      current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);
                    }
                    const fillStrokeMode = current.textRenderingMode & _util2.TextRenderingMode.FILL_STROKE_MASK;
                    if (fillStrokeMode === _util2.TextRenderingMode.FILL || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      if (current.fillColor !== SVG_DEFAULTS.fillColor) {
                        current.tspan.setAttributeNS(null, "fill", current.fillColor);
                      }
                      if (current.fillAlpha < 1) {
                        current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                      }
                    } else if (current.textRenderingMode === _util2.TextRenderingMode.ADD_TO_PATH) {
                      current.tspan.setAttributeNS(null, "fill", "transparent");
                    } else {
                      current.tspan.setAttributeNS(null, "fill", "none");
                    }
                    if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      const lineWidthScale = 1 / (current.textMatrixScale || 1);
                      this._setStrokeAttributes(current.tspan, lineWidthScale);
                    }
                    let textMatrix = current.textMatrix;
                    if (current.textRise !== 0) {
                      textMatrix = textMatrix.slice();
                      textMatrix[5] += current.textRise;
                    }
                    current.txtElement.setAttributeNS(null, "transform", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);
                    current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");
                    current.txtElement.append(current.tspan);
                    current.txtgrp.append(current.txtElement);
                    this._ensureTransformGroup().append(current.txtElement);
                  }
                  setLeadingMoveText(x, y) {
                    this.setLeading(-y);
                    this.moveText(x, y);
                  }
                  addFontStyle(fontObj) {
                    if (!fontObj.data) {
                      throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');
                    }
                    if (!this.cssStyle) {
                      this.cssStyle = this.svgFactory.createElement("svg:style");
                      this.cssStyle.setAttributeNS(null, "type", "text/css");
                      this.defs.append(this.cssStyle);
                    }
                    const url = createObjectURL(fontObj.data, fontObj.mimetype, this.forceDataSchema);
                    this.cssStyle.textContent += `@font-face { font-family: "${fontObj.loadedName}"; src: url(${url}); }
`;
                  }
                  setFont(details) {
                    const current = this.current;
                    const fontObj = this.commonObjs.get(details[0]);
                    let size = details[1];
                    current.font = fontObj;
                    if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {
                      this.addFontStyle(fontObj);
                      this.embeddedFonts[fontObj.loadedName] = fontObj;
                    }
                    current.fontMatrix = fontObj.fontMatrix || _util2.FONT_IDENTITY_MATRIX;
                    let bold = "normal";
                    if (fontObj.black) {
                      bold = "900";
                    } else if (fontObj.bold) {
                      bold = "bold";
                    }
                    const italic = fontObj.italic ? "italic" : "normal";
                    if (size < 0) {
                      size = -size;
                      current.fontDirection = -1;
                    } else {
                      current.fontDirection = 1;
                    }
                    current.fontSize = size;
                    current.fontFamily = fontObj.loadedName;
                    current.fontWeight = bold;
                    current.fontStyle = italic;
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.tspan.setAttributeNS(null, "y", pf(-current.y));
                    current.xcoords = [];
                    current.ycoords = [];
                  }
                  endText() {
                    const current = this.current;
                    if (current.textRenderingMode & _util2.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement?.hasChildNodes()) {
                      current.element = current.txtElement;
                      this.clip("nonzero");
                      this.endPath();
                    }
                  }
                  setLineWidth(width) {
                    if (width > 0) {
                      this.current.lineWidth = width;
                    }
                  }
                  setLineCap(style) {
                    this.current.lineCap = LINE_CAP_STYLES[style];
                  }
                  setLineJoin(style) {
                    this.current.lineJoin = LINE_JOIN_STYLES[style];
                  }
                  setMiterLimit(limit) {
                    this.current.miterLimit = limit;
                  }
                  setStrokeAlpha(strokeAlpha) {
                    this.current.strokeAlpha = strokeAlpha;
                  }
                  setStrokeRGBColor(r, g, b) {
                    this.current.strokeColor = _util2.Util.makeHexColor(r, g, b);
                  }
                  setFillAlpha(fillAlpha) {
                    this.current.fillAlpha = fillAlpha;
                  }
                  setFillRGBColor(r, g, b) {
                    this.current.fillColor = _util2.Util.makeHexColor(r, g, b);
                    this.current.tspan = this.svgFactory.createElement("svg:tspan");
                    this.current.xcoords = [];
                    this.current.ycoords = [];
                  }
                  setStrokeColorN(args) {
                    this.current.strokeColor = this._makeColorN_Pattern(args);
                  }
                  setFillColorN(args) {
                    this.current.fillColor = this._makeColorN_Pattern(args);
                  }
                  shadingFill(args) {
                    const {
                      width,
                      height
                    } = this.viewport;
                    const inv = _util2.Util.inverseTransform(this.transformMatrix);
                    const [x0, y0, x1, y1] = _util2.Util.getAxialAlignedBoundingBox([0, 0, width, height], inv);
                    const rect = this.svgFactory.createElement("svg:rect");
                    rect.setAttributeNS(null, "x", x0);
                    rect.setAttributeNS(null, "y", y0);
                    rect.setAttributeNS(null, "width", x1 - x0);
                    rect.setAttributeNS(null, "height", y1 - y0);
                    rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));
                    if (this.current.fillAlpha < 1) {
                      rect.setAttributeNS(null, "fill-opacity", this.current.fillAlpha);
                    }
                    this._ensureTransformGroup().append(rect);
                  }
                  _makeColorN_Pattern(args) {
                    if (args[0] === "TilingPattern") {
                      return this._makeTilingPattern(args);
                    }
                    return this._makeShadingPattern(args);
                  }
                  _makeTilingPattern(args) {
                    const color = args[1];
                    const operatorList = args[2];
                    const matrix = args[3] || _util2.IDENTITY_MATRIX;
                    const [x0, y0, x1, y1] = args[4];
                    const xstep = args[5];
                    const ystep = args[6];
                    const paintType = args[7];
                    const tilingId = `shading${shadingCount++}`;
                    const [tx0, ty0, tx1, ty1] = _util2.Util.normalizeRect([..._util2.Util.applyTransform([x0, y0], matrix), ..._util2.Util.applyTransform([x1, y1], matrix)]);
                    const [xscale, yscale] = _util2.Util.singularValueDecompose2dScale(matrix);
                    const txstep = xstep * xscale;
                    const tystep = ystep * yscale;
                    const tiling = this.svgFactory.createElement("svg:pattern");
                    tiling.setAttributeNS(null, "id", tilingId);
                    tiling.setAttributeNS(null, "patternUnits", "userSpaceOnUse");
                    tiling.setAttributeNS(null, "width", txstep);
                    tiling.setAttributeNS(null, "height", tystep);
                    tiling.setAttributeNS(null, "x", `${tx0}`);
                    tiling.setAttributeNS(null, "y", `${ty0}`);
                    const svg = this.svg;
                    const transformMatrix = this.transformMatrix;
                    const fillColor = this.current.fillColor;
                    const strokeColor = this.current.strokeColor;
                    const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);
                    this.svg = bbox;
                    this.transformMatrix = matrix;
                    if (paintType === 2) {
                      const cssColor = _util2.Util.makeHexColor(...color);
                      this.current.fillColor = cssColor;
                      this.current.strokeColor = cssColor;
                    }
                    this.executeOpTree(this.convertOpList(operatorList));
                    this.svg = svg;
                    this.transformMatrix = transformMatrix;
                    this.current.fillColor = fillColor;
                    this.current.strokeColor = strokeColor;
                    tiling.append(bbox.childNodes[0]);
                    this.defs.append(tiling);
                    return `url(#${tilingId})`;
                  }
                  _makeShadingPattern(args) {
                    if (typeof args === "string") {
                      args = this.objs.get(args);
                    }
                    switch (args[0]) {
                      case "RadialAxial":
                        const shadingId = `shading${shadingCount++}`;
                        const colorStops = args[3];
                        let gradient;
                        switch (args[1]) {
                          case "axial":
                            const point0 = args[4];
                            const point1 = args[5];
                            gradient = this.svgFactory.createElement("svg:linearGradient");
                            gradient.setAttributeNS(null, "id", shadingId);
                            gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                            gradient.setAttributeNS(null, "x1", point0[0]);
                            gradient.setAttributeNS(null, "y1", point0[1]);
                            gradient.setAttributeNS(null, "x2", point1[0]);
                            gradient.setAttributeNS(null, "y2", point1[1]);
                            break;
                          case "radial":
                            const focalPoint = args[4];
                            const circlePoint = args[5];
                            const focalRadius = args[6];
                            const circleRadius = args[7];
                            gradient = this.svgFactory.createElement("svg:radialGradient");
                            gradient.setAttributeNS(null, "id", shadingId);
                            gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                            gradient.setAttributeNS(null, "cx", circlePoint[0]);
                            gradient.setAttributeNS(null, "cy", circlePoint[1]);
                            gradient.setAttributeNS(null, "r", circleRadius);
                            gradient.setAttributeNS(null, "fx", focalPoint[0]);
                            gradient.setAttributeNS(null, "fy", focalPoint[1]);
                            gradient.setAttributeNS(null, "fr", focalRadius);
                            break;
                          default:
                            throw new Error(`Unknown RadialAxial type: ${args[1]}`);
                        }
                        for (const colorStop of colorStops) {
                          const stop = this.svgFactory.createElement("svg:stop");
                          stop.setAttributeNS(null, "offset", colorStop[0]);
                          stop.setAttributeNS(null, "stop-color", colorStop[1]);
                          gradient.append(stop);
                        }
                        this.defs.append(gradient);
                        return `url(#${shadingId})`;
                      case "Mesh":
                        (0, _util2.warn)("Unimplemented pattern Mesh");
                        return null;
                      case "Dummy":
                        return "hotpink";
                      default:
                        throw new Error(`Unknown IR type: ${args[0]}`);
                    }
                  }
                  setDash(dashArray, dashPhase) {
                    this.current.dashArray = dashArray;
                    this.current.dashPhase = dashPhase;
                  }
                  constructPath(ops, args) {
                    const current = this.current;
                    let x = current.x, y = current.y;
                    let d = [];
                    let j = 0;
                    for (const op of ops) {
                      switch (op | 0) {
                        case _util2.OPS.rectangle:
                          x = args[j++];
                          y = args[j++];
                          const width = args[j++];
                          const height = args[j++];
                          const xw = x + width;
                          const yh = y + height;
                          d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");
                          break;
                        case _util2.OPS.moveTo:
                          x = args[j++];
                          y = args[j++];
                          d.push("M", pf(x), pf(y));
                          break;
                        case _util2.OPS.lineTo:
                          x = args[j++];
                          y = args[j++];
                          d.push("L", pf(x), pf(y));
                          break;
                        case _util2.OPS.curveTo:
                          x = args[j + 4];
                          y = args[j + 5];
                          d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
                          j += 6;
                          break;
                        case _util2.OPS.curveTo2:
                          d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
                          x = args[j + 2];
                          y = args[j + 3];
                          j += 4;
                          break;
                        case _util2.OPS.curveTo3:
                          x = args[j + 2];
                          y = args[j + 3];
                          d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
                          j += 4;
                          break;
                        case _util2.OPS.closePath:
                          d.push("Z");
                          break;
                      }
                    }
                    d = d.join(" ");
                    if (current.path && ops.length > 0 && ops[0] !== _util2.OPS.rectangle && ops[0] !== _util2.OPS.moveTo) {
                      d = current.path.getAttributeNS(null, "d") + d;
                    } else {
                      current.path = this.svgFactory.createElement("svg:path");
                      this._ensureTransformGroup().append(current.path);
                    }
                    current.path.setAttributeNS(null, "d", d);
                    current.path.setAttributeNS(null, "fill", "none");
                    current.element = current.path;
                    current.setCurrentPoint(x, y);
                  }
                  endPath() {
                    const current = this.current;
                    current.path = null;
                    if (!this.pendingClip) {
                      return;
                    }
                    if (!current.element) {
                      this.pendingClip = null;
                      return;
                    }
                    const clipId = `clippath${clipCount++}`;
                    const clipPath = this.svgFactory.createElement("svg:clipPath");
                    clipPath.setAttributeNS(null, "id", clipId);
                    clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));
                    const clipElement = current.element.cloneNode(true);
                    if (this.pendingClip === "evenodd") {
                      clipElement.setAttributeNS(null, "clip-rule", "evenodd");
                    } else {
                      clipElement.setAttributeNS(null, "clip-rule", "nonzero");
                    }
                    this.pendingClip = null;
                    clipPath.append(clipElement);
                    this.defs.append(clipPath);
                    if (current.activeClipUrl) {
                      current.clipGroup = null;
                      for (const prev of this.extraStack) {
                        prev.clipGroup = null;
                      }
                      clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);
                    }
                    current.activeClipUrl = `url(#${clipId})`;
                    this.tgrp = null;
                  }
                  clip(type) {
                    this.pendingClip = type;
                  }
                  closePath() {
                    const current = this.current;
                    if (current.path) {
                      const d = `${current.path.getAttributeNS(null, "d")}Z`;
                      current.path.setAttributeNS(null, "d", d);
                    }
                  }
                  setLeading(leading) {
                    this.current.leading = -leading;
                  }
                  setTextRise(textRise) {
                    this.current.textRise = textRise;
                  }
                  setTextRenderingMode(textRenderingMode) {
                    this.current.textRenderingMode = textRenderingMode;
                  }
                  setHScale(scale) {
                    this.current.textHScale = scale / 100;
                  }
                  setRenderingIntent(intent) {
                  }
                  setFlatness(flatness) {
                  }
                  setGState(states) {
                    for (const [key, value] of states) {
                      switch (key) {
                        case "LW":
                          this.setLineWidth(value);
                          break;
                        case "LC":
                          this.setLineCap(value);
                          break;
                        case "LJ":
                          this.setLineJoin(value);
                          break;
                        case "ML":
                          this.setMiterLimit(value);
                          break;
                        case "D":
                          this.setDash(value[0], value[1]);
                          break;
                        case "RI":
                          this.setRenderingIntent(value);
                          break;
                        case "FL":
                          this.setFlatness(value);
                          break;
                        case "Font":
                          this.setFont(value);
                          break;
                        case "CA":
                          this.setStrokeAlpha(value);
                          break;
                        case "ca":
                          this.setFillAlpha(value);
                          break;
                        default:
                          (0, _util2.warn)(`Unimplemented graphic state operator ${key}`);
                          break;
                      }
                    }
                  }
                  fill() {
                    const current = this.current;
                    if (current.element) {
                      current.element.setAttributeNS(null, "fill", current.fillColor);
                      current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                      this.endPath();
                    }
                  }
                  stroke() {
                    const current = this.current;
                    if (current.element) {
                      this._setStrokeAttributes(current.element);
                      current.element.setAttributeNS(null, "fill", "none");
                      this.endPath();
                    }
                  }
                  _setStrokeAttributes(element, lineWidthScale = 1) {
                    const current = this.current;
                    let dashArray = current.dashArray;
                    if (lineWidthScale !== 1 && dashArray.length > 0) {
                      dashArray = dashArray.map(function(value) {
                        return lineWidthScale * value;
                      });
                    }
                    element.setAttributeNS(null, "stroke", current.strokeColor);
                    element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);
                    element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));
                    element.setAttributeNS(null, "stroke-linecap", current.lineCap);
                    element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);
                    element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");
                    element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));
                    element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");
                  }
                  eoFill() {
                    this.current.element?.setAttributeNS(null, "fill-rule", "evenodd");
                    this.fill();
                  }
                  fillStroke() {
                    this.stroke();
                    this.fill();
                  }
                  eoFillStroke() {
                    this.current.element?.setAttributeNS(null, "fill-rule", "evenodd");
                    this.fillStroke();
                  }
                  closeStroke() {
                    this.closePath();
                    this.stroke();
                  }
                  closeFillStroke() {
                    this.closePath();
                    this.fillStroke();
                  }
                  closeEOFillStroke() {
                    this.closePath();
                    this.eoFillStroke();
                  }
                  paintSolidColorImageMask() {
                    const rect = this.svgFactory.createElement("svg:rect");
                    rect.setAttributeNS(null, "x", "0");
                    rect.setAttributeNS(null, "y", "0");
                    rect.setAttributeNS(null, "width", "1px");
                    rect.setAttributeNS(null, "height", "1px");
                    rect.setAttributeNS(null, "fill", this.current.fillColor);
                    this._ensureTransformGroup().append(rect);
                  }
                  paintImageXObject(objId) {
                    const imgData = this.getObject(objId);
                    if (!imgData) {
                      (0, _util2.warn)(`Dependent image with object ID ${objId} is not ready yet`);
                      return;
                    }
                    this.paintInlineImageXObject(imgData);
                  }
                  paintInlineImageXObject(imgData, mask) {
                    const width = imgData.width;
                    const height = imgData.height;
                    const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);
                    const cliprect = this.svgFactory.createElement("svg:rect");
                    cliprect.setAttributeNS(null, "x", "0");
                    cliprect.setAttributeNS(null, "y", "0");
                    cliprect.setAttributeNS(null, "width", pf(width));
                    cliprect.setAttributeNS(null, "height", pf(height));
                    this.current.element = cliprect;
                    this.clip("nonzero");
                    const imgEl = this.svgFactory.createElement("svg:image");
                    imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);
                    imgEl.setAttributeNS(null, "x", "0");
                    imgEl.setAttributeNS(null, "y", pf(-height));
                    imgEl.setAttributeNS(null, "width", pf(width) + "px");
                    imgEl.setAttributeNS(null, "height", pf(height) + "px");
                    imgEl.setAttributeNS(null, "transform", `scale(${pf(1 / width)} ${pf(-1 / height)})`);
                    if (mask) {
                      mask.append(imgEl);
                    } else {
                      this._ensureTransformGroup().append(imgEl);
                    }
                  }
                  paintImageMaskXObject(img) {
                    const imgData = this.getObject(img.data, img);
                    if (imgData.bitmap) {
                      (0, _util2.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");
                      return;
                    }
                    const current = this.current;
                    const width = imgData.width;
                    const height = imgData.height;
                    const fillColor = current.fillColor;
                    current.maskId = `mask${maskCount++}`;
                    const mask = this.svgFactory.createElement("svg:mask");
                    mask.setAttributeNS(null, "id", current.maskId);
                    const rect = this.svgFactory.createElement("svg:rect");
                    rect.setAttributeNS(null, "x", "0");
                    rect.setAttributeNS(null, "y", "0");
                    rect.setAttributeNS(null, "width", pf(width));
                    rect.setAttributeNS(null, "height", pf(height));
                    rect.setAttributeNS(null, "fill", fillColor);
                    rect.setAttributeNS(null, "mask", `url(#${current.maskId})`);
                    this.defs.append(mask);
                    this._ensureTransformGroup().append(rect);
                    this.paintInlineImageXObject(imgData, mask);
                  }
                  paintFormXObjectBegin(matrix, bbox) {
                    if (Array.isArray(matrix) && matrix.length === 6) {
                      this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
                    }
                    if (bbox) {
                      const width = bbox[2] - bbox[0];
                      const height = bbox[3] - bbox[1];
                      const cliprect = this.svgFactory.createElement("svg:rect");
                      cliprect.setAttributeNS(null, "x", bbox[0]);
                      cliprect.setAttributeNS(null, "y", bbox[1]);
                      cliprect.setAttributeNS(null, "width", pf(width));
                      cliprect.setAttributeNS(null, "height", pf(height));
                      this.current.element = cliprect;
                      this.clip("nonzero");
                      this.endPath();
                    }
                  }
                  paintFormXObjectEnd() {
                  }
                  _initialize(viewport) {
                    const svg = this.svgFactory.create(viewport.width, viewport.height);
                    const definitions = this.svgFactory.createElement("svg:defs");
                    svg.append(definitions);
                    this.defs = definitions;
                    const rootGroup = this.svgFactory.createElement("svg:g");
                    rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));
                    svg.append(rootGroup);
                    this.svg = rootGroup;
                    return svg;
                  }
                  _ensureClipGroup() {
                    if (!this.current.clipGroup) {
                      const clipGroup = this.svgFactory.createElement("svg:g");
                      clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);
                      this.svg.append(clipGroup);
                      this.current.clipGroup = clipGroup;
                    }
                    return this.current.clipGroup;
                  }
                  _ensureTransformGroup() {
                    if (!this.tgrp) {
                      this.tgrp = this.svgFactory.createElement("svg:g");
                      this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));
                      if (this.current.activeClipUrl) {
                        this._ensureClipGroup().append(this.tgrp);
                      } else {
                        this.svg.append(this.tgrp);
                      }
                    }
                    return this.tgrp;
                  }
                }
                exports2.SVGGraphics = SVGGraphics;
              },
              /* 25 */
              /***/
              (__unused_webpack_module2, exports2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.XfaText = void 0;
                class XfaText {
                  static textContent(xfa) {
                    const items = [];
                    const output = {
                      items,
                      styles: /* @__PURE__ */ Object.create(null)
                    };
                    function walk(node) {
                      if (!node) {
                        return;
                      }
                      let str = null;
                      const name = node.name;
                      if (name === "#text") {
                        str = node.value;
                      } else if (!XfaText.shouldBuildText(name)) {
                        return;
                      } else if (node?.attributes?.textContent) {
                        str = node.attributes.textContent;
                      } else if (node.value) {
                        str = node.value;
                      }
                      if (str !== null) {
                        items.push({
                          str
                        });
                      }
                      if (!node.children) {
                        return;
                      }
                      for (const child of node.children) {
                        walk(child);
                      }
                    }
                    walk(xfa);
                    return output;
                  }
                  static shouldBuildText(name) {
                    return !(name === "textarea" || name === "input" || name === "option" || name === "select");
                  }
                }
                exports2.XfaText = XfaText;
              },
              /* 26 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.TextLayerRenderTask = void 0;
                exports2.renderTextLayer = renderTextLayer;
                exports2.updateTextLayer = updateTextLayer;
                var _util2 = __w_pdfjs_require__2(1);
                var _display_utils2 = __w_pdfjs_require__2(6);
                const MAX_TEXT_DIVS_TO_RENDER = 1e5;
                const DEFAULT_FONT_SIZE = 30;
                const DEFAULT_FONT_ASCENT = 0.8;
                const ascentCache = /* @__PURE__ */ new Map();
                function getCtx(size, isOffscreenCanvasSupported) {
                  let ctx;
                  if (isOffscreenCanvasSupported && _util2.FeatureTest.isOffscreenCanvasSupported) {
                    ctx = new OffscreenCanvas(size, size).getContext("2d", {
                      alpha: false
                    });
                  } else {
                    const canvas = document.createElement("canvas");
                    canvas.width = canvas.height = size;
                    ctx = canvas.getContext("2d", {
                      alpha: false
                    });
                  }
                  return ctx;
                }
                function getAscent(fontFamily, isOffscreenCanvasSupported) {
                  const cachedAscent = ascentCache.get(fontFamily);
                  if (cachedAscent) {
                    return cachedAscent;
                  }
                  const ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);
                  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;
                  const metrics = ctx.measureText("");
                  let ascent = metrics.fontBoundingBoxAscent;
                  let descent = Math.abs(metrics.fontBoundingBoxDescent);
                  if (ascent) {
                    const ratio = ascent / (ascent + descent);
                    ascentCache.set(fontFamily, ratio);
                    ctx.canvas.width = ctx.canvas.height = 0;
                    return ratio;
                  }
                  ctx.strokeStyle = "red";
                  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
                  ctx.strokeText("g", 0, 0);
                  let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
                  descent = 0;
                  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {
                    if (pixels[i] > 0) {
                      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);
                      break;
                    }
                  }
                  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
                  ctx.strokeText("A", 0, DEFAULT_FONT_SIZE);
                  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
                  ascent = 0;
                  for (let i = 0, ii = pixels.length; i < ii; i += 4) {
                    if (pixels[i] > 0) {
                      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);
                      break;
                    }
                  }
                  ctx.canvas.width = ctx.canvas.height = 0;
                  if (ascent) {
                    const ratio = ascent / (ascent + descent);
                    ascentCache.set(fontFamily, ratio);
                    return ratio;
                  }
                  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);
                  return DEFAULT_FONT_ASCENT;
                }
                function appendText(task, geom, styles) {
                  const textDiv = document.createElement("span");
                  const textDivProperties = {
                    angle: 0,
                    canvasWidth: 0,
                    hasText: geom.str !== "",
                    hasEOL: geom.hasEOL,
                    fontSize: 0
                  };
                  task._textDivs.push(textDiv);
                  const tx = _util2.Util.transform(task._transform, geom.transform);
                  let angle = Math.atan2(tx[1], tx[0]);
                  const style = styles[geom.fontName];
                  if (style.vertical) {
                    angle += Math.PI / 2;
                  }
                  const fontHeight = Math.hypot(tx[2], tx[3]);
                  const fontAscent = fontHeight * getAscent(style.fontFamily, task._isOffscreenCanvasSupported);
                  let left, top;
                  if (angle === 0) {
                    left = tx[4];
                    top = tx[5] - fontAscent;
                  } else {
                    left = tx[4] + fontAscent * Math.sin(angle);
                    top = tx[5] - fontAscent * Math.cos(angle);
                  }
                  const scaleFactorStr = "calc(var(--scale-factor)*";
                  const divStyle = textDiv.style;
                  if (task._container === task._rootContainer) {
                    divStyle.left = `${(100 * left / task._pageWidth).toFixed(2)}%`;
                    divStyle.top = `${(100 * top / task._pageHeight).toFixed(2)}%`;
                  } else {
                    divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;
                    divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;
                  }
                  divStyle.fontSize = `${scaleFactorStr}${fontHeight.toFixed(2)}px)`;
                  divStyle.fontFamily = style.fontFamily;
                  textDivProperties.fontSize = fontHeight;
                  textDiv.setAttribute("role", "presentation");
                  textDiv.textContent = geom.str;
                  textDiv.dir = geom.dir;
                  if (task._fontInspectorEnabled) {
                    textDiv.dataset.fontName = geom.fontName;
                  }
                  if (angle !== 0) {
                    textDivProperties.angle = angle * (180 / Math.PI);
                  }
                  let shouldScaleText = false;
                  if (geom.str.length > 1) {
                    shouldScaleText = true;
                  } else if (geom.str !== " " && geom.transform[0] !== geom.transform[3]) {
                    const absScaleX = Math.abs(geom.transform[0]), absScaleY = Math.abs(geom.transform[3]);
                    if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {
                      shouldScaleText = true;
                    }
                  }
                  if (shouldScaleText) {
                    textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;
                  }
                  task._textDivProperties.set(textDiv, textDivProperties);
                  if (task._isReadableStream) {
                    task._layoutText(textDiv);
                  }
                }
                function layout(params) {
                  const {
                    div,
                    scale,
                    properties,
                    ctx,
                    prevFontSize,
                    prevFontFamily
                  } = params;
                  const {
                    style
                  } = div;
                  let transform = "";
                  if (properties.canvasWidth !== 0 && properties.hasText) {
                    const {
                      fontFamily
                    } = style;
                    const {
                      canvasWidth,
                      fontSize
                    } = properties;
                    if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {
                      ctx.font = `${fontSize * scale}px ${fontFamily}`;
                      params.prevFontSize = fontSize;
                      params.prevFontFamily = fontFamily;
                    }
                    const {
                      width
                    } = ctx.measureText(div.textContent);
                    if (width > 0) {
                      transform = `scaleX(${canvasWidth * scale / width})`;
                    }
                  }
                  if (properties.angle !== 0) {
                    transform = `rotate(${properties.angle}deg) ${transform}`;
                  }
                  if (transform.length > 0) {
                    style.transform = transform;
                  }
                }
                function render(task) {
                  if (task._canceled) {
                    return;
                  }
                  const textDivs = task._textDivs;
                  const capability = task._capability;
                  const textDivsLength = textDivs.length;
                  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
                    capability.resolve();
                    return;
                  }
                  if (!task._isReadableStream) {
                    for (const textDiv of textDivs) {
                      task._layoutText(textDiv);
                    }
                  }
                  capability.resolve();
                }
                class TextLayerRenderTask {
                  constructor({
                    textContentSource,
                    container,
                    viewport,
                    textDivs,
                    textDivProperties,
                    textContentItemsStr,
                    isOffscreenCanvasSupported
                  }) {
                    this._textContentSource = textContentSource;
                    this._isReadableStream = textContentSource instanceof ReadableStream;
                    this._container = this._rootContainer = container;
                    this._textDivs = textDivs || [];
                    this._textContentItemsStr = textContentItemsStr || [];
                    this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;
                    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;
                    this._reader = null;
                    this._textDivProperties = textDivProperties || /* @__PURE__ */ new WeakMap();
                    this._canceled = false;
                    this._capability = new _util2.PromiseCapability();
                    this._layoutTextParams = {
                      prevFontSize: null,
                      prevFontFamily: null,
                      div: null,
                      scale: viewport.scale * (globalThis.devicePixelRatio || 1),
                      properties: null,
                      ctx: getCtx(0, isOffscreenCanvasSupported)
                    };
                    const {
                      pageWidth,
                      pageHeight,
                      pageX,
                      pageY
                    } = viewport.rawDims;
                    this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];
                    this._pageWidth = pageWidth;
                    this._pageHeight = pageHeight;
                    (0, _display_utils2.setLayerDimensions)(container, viewport);
                    this._capability.promise.finally(() => {
                      this._layoutTextParams = null;
                    }).catch(() => {
                    });
                  }
                  get promise() {
                    return this._capability.promise;
                  }
                  cancel() {
                    this._canceled = true;
                    if (this._reader) {
                      this._reader.cancel(new _util2.AbortException("TextLayer task cancelled.")).catch(() => {
                      });
                      this._reader = null;
                    }
                    this._capability.reject(new _util2.AbortException("TextLayer task cancelled."));
                  }
                  _processItems(items, styleCache) {
                    for (const item of items) {
                      if (item.str === void 0) {
                        if (item.type === "beginMarkedContentProps" || item.type === "beginMarkedContent") {
                          const parent = this._container;
                          this._container = document.createElement("span");
                          this._container.classList.add("markedContent");
                          if (item.id !== null) {
                            this._container.setAttribute("id", `${item.id}`);
                          }
                          parent.append(this._container);
                        } else if (item.type === "endMarkedContent") {
                          this._container = this._container.parentNode;
                        }
                        continue;
                      }
                      this._textContentItemsStr.push(item.str);
                      appendText(this, item, styleCache);
                    }
                  }
                  _layoutText(textDiv) {
                    const textDivProperties = this._layoutTextParams.properties = this._textDivProperties.get(textDiv);
                    this._layoutTextParams.div = textDiv;
                    layout(this._layoutTextParams);
                    if (textDivProperties.hasText) {
                      this._container.append(textDiv);
                    }
                    if (textDivProperties.hasEOL) {
                      const br = document.createElement("br");
                      br.setAttribute("role", "presentation");
                      this._container.append(br);
                    }
                  }
                  _render() {
                    const capability = new _util2.PromiseCapability();
                    let styleCache = /* @__PURE__ */ Object.create(null);
                    if (this._isReadableStream) {
                      const pump = () => {
                        this._reader.read().then(({
                          value,
                          done
                        }) => {
                          if (done) {
                            capability.resolve();
                            return;
                          }
                          Object.assign(styleCache, value.styles);
                          this._processItems(value.items, styleCache);
                          pump();
                        }, capability.reject);
                      };
                      this._reader = this._textContentSource.getReader();
                      pump();
                    } else if (this._textContentSource) {
                      const {
                        items,
                        styles
                      } = this._textContentSource;
                      this._processItems(items, styles);
                      capability.resolve();
                    } else {
                      throw new Error('No "textContentSource" parameter specified.');
                    }
                    capability.promise.then(() => {
                      styleCache = null;
                      render(this);
                    }, this._capability.reject);
                  }
                }
                exports2.TextLayerRenderTask = TextLayerRenderTask;
                function renderTextLayer(params) {
                  if (!params.textContentSource && (params.textContent || params.textContentStream)) {
                    (0, _display_utils2.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead.");
                    params.textContentSource = params.textContent || params.textContentStream;
                  }
                  const {
                    container,
                    viewport
                  } = params;
                  const style = getComputedStyle(container);
                  const visibility = style.getPropertyValue("visibility");
                  const scaleFactor = parseFloat(style.getPropertyValue("--scale-factor"));
                  if (visibility === "visible" && (!scaleFactor || Math.abs(scaleFactor - viewport.scale) > 1e-5)) {
                    console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");
                  }
                  const task = new TextLayerRenderTask(params);
                  task._render();
                  return task;
                }
                function updateTextLayer({
                  container,
                  viewport,
                  textDivs,
                  textDivProperties,
                  isOffscreenCanvasSupported,
                  mustRotate = true,
                  mustRescale = true
                }) {
                  if (mustRotate) {
                    (0, _display_utils2.setLayerDimensions)(container, {
                      rotation: viewport.rotation
                    });
                  }
                  if (mustRescale) {
                    const ctx = getCtx(0, isOffscreenCanvasSupported);
                    const scale = viewport.scale * (globalThis.devicePixelRatio || 1);
                    const params = {
                      prevFontSize: null,
                      prevFontFamily: null,
                      div: null,
                      scale,
                      properties: null,
                      ctx
                    };
                    for (const div of textDivs) {
                      params.properties = textDivProperties.get(div);
                      params.div = div;
                      layout(params);
                    }
                  }
                }
              },
              /* 27 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.AnnotationEditorLayer = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _editor = __w_pdfjs_require__2(4);
                var _freetext = __w_pdfjs_require__2(28);
                var _ink = __w_pdfjs_require__2(33);
                var _display_utils2 = __w_pdfjs_require__2(6);
                var _stamp = __w_pdfjs_require__2(34);
                class AnnotationEditorLayer {
                  #accessibilityManager;
                  #allowClick = false;
                  #annotationLayer = null;
                  #boundPointerup = this.pointerup.bind(this);
                  #boundPointerdown = this.pointerdown.bind(this);
                  #editors = /* @__PURE__ */ new Map();
                  #hadPointerDown = false;
                  #isCleaningUp = false;
                  #isDisabling = false;
                  #uiManager;
                  static _initialized = false;
                  constructor({
                    uiManager,
                    pageIndex,
                    div,
                    accessibilityManager,
                    annotationLayer,
                    viewport,
                    l10n
                  }) {
                    const editorTypes = [_freetext.FreeTextEditor, _ink.InkEditor, _stamp.StampEditor];
                    if (!AnnotationEditorLayer._initialized) {
                      AnnotationEditorLayer._initialized = true;
                      for (const editorType of editorTypes) {
                        editorType.initialize(l10n);
                      }
                    }
                    uiManager.registerEditorTypes(editorTypes);
                    this.#uiManager = uiManager;
                    this.pageIndex = pageIndex;
                    this.div = div;
                    this.#accessibilityManager = accessibilityManager;
                    this.#annotationLayer = annotationLayer;
                    this.viewport = viewport;
                    this.#uiManager.addLayer(this);
                  }
                  get isEmpty() {
                    return this.#editors.size === 0;
                  }
                  updateToolbar(mode) {
                    this.#uiManager.updateToolbar(mode);
                  }
                  updateMode(mode = this.#uiManager.getMode()) {
                    this.#cleanup();
                    if (mode === _util2.AnnotationEditorType.INK) {
                      this.addInkEditorIfNeeded(false);
                      this.disableClick();
                    } else {
                      this.enableClick();
                    }
                    if (mode !== _util2.AnnotationEditorType.NONE) {
                      this.div.classList.toggle("freeTextEditing", mode === _util2.AnnotationEditorType.FREETEXT);
                      this.div.classList.toggle("inkEditing", mode === _util2.AnnotationEditorType.INK);
                      this.div.classList.toggle("stampEditing", mode === _util2.AnnotationEditorType.STAMP);
                      this.div.hidden = false;
                    }
                  }
                  addInkEditorIfNeeded(isCommitting) {
                    if (!isCommitting && this.#uiManager.getMode() !== _util2.AnnotationEditorType.INK) {
                      return;
                    }
                    if (!isCommitting) {
                      for (const editor2 of this.#editors.values()) {
                        if (editor2.isEmpty()) {
                          editor2.setInBackground();
                          return;
                        }
                      }
                    }
                    const editor = this.#createAndAddNewEditor({
                      offsetX: 0,
                      offsetY: 0
                    }, false);
                    editor.setInBackground();
                  }
                  setEditingState(isEditing) {
                    this.#uiManager.setEditingState(isEditing);
                  }
                  addCommands(params) {
                    this.#uiManager.addCommands(params);
                  }
                  enable() {
                    this.div.style.pointerEvents = "auto";
                    const annotationElementIds = /* @__PURE__ */ new Set();
                    for (const editor of this.#editors.values()) {
                      editor.enableEditing();
                      if (editor.annotationElementId) {
                        annotationElementIds.add(editor.annotationElementId);
                      }
                    }
                    if (!this.#annotationLayer) {
                      return;
                    }
                    const editables = this.#annotationLayer.getEditableAnnotations();
                    for (const editable of editables) {
                      editable.hide();
                      if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {
                        continue;
                      }
                      if (annotationElementIds.has(editable.data.id)) {
                        continue;
                      }
                      const editor = this.deserialize(editable);
                      if (!editor) {
                        continue;
                      }
                      this.addOrRebuild(editor);
                      editor.enableEditing();
                    }
                  }
                  disable() {
                    this.#isDisabling = true;
                    this.div.style.pointerEvents = "none";
                    const hiddenAnnotationIds = /* @__PURE__ */ new Set();
                    for (const editor of this.#editors.values()) {
                      editor.disableEditing();
                      if (!editor.annotationElementId || editor.serialize() !== null) {
                        hiddenAnnotationIds.add(editor.annotationElementId);
                        continue;
                      }
                      this.getEditableAnnotation(editor.annotationElementId)?.show();
                      editor.remove();
                    }
                    if (this.#annotationLayer) {
                      const editables = this.#annotationLayer.getEditableAnnotations();
                      for (const editable of editables) {
                        const {
                          id
                        } = editable.data;
                        if (hiddenAnnotationIds.has(id) || this.#uiManager.isDeletedAnnotationElement(id)) {
                          continue;
                        }
                        editable.show();
                      }
                    }
                    this.#cleanup();
                    if (this.isEmpty) {
                      this.div.hidden = true;
                    }
                    this.#isDisabling = false;
                  }
                  getEditableAnnotation(id) {
                    return this.#annotationLayer?.getEditableAnnotation(id) || null;
                  }
                  setActiveEditor(editor) {
                    const currentActive = this.#uiManager.getActive();
                    if (currentActive === editor) {
                      return;
                    }
                    this.#uiManager.setActiveEditor(editor);
                  }
                  enableClick() {
                    this.div.addEventListener("pointerdown", this.#boundPointerdown);
                    this.div.addEventListener("pointerup", this.#boundPointerup);
                  }
                  disableClick() {
                    this.div.removeEventListener("pointerdown", this.#boundPointerdown);
                    this.div.removeEventListener("pointerup", this.#boundPointerup);
                  }
                  attach(editor) {
                    this.#editors.set(editor.id, editor);
                    const {
                      annotationElementId
                    } = editor;
                    if (annotationElementId && this.#uiManager.isDeletedAnnotationElement(annotationElementId)) {
                      this.#uiManager.removeDeletedAnnotationElement(editor);
                    }
                  }
                  detach(editor) {
                    this.#editors.delete(editor.id);
                    this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);
                    if (!this.#isDisabling && editor.annotationElementId) {
                      this.#uiManager.addDeletedAnnotationElement(editor);
                    }
                  }
                  remove(editor) {
                    this.detach(editor);
                    this.#uiManager.removeEditor(editor);
                    if (editor.div.contains(document.activeElement)) {
                      setTimeout(() => {
                        this.#uiManager.focusMainContainer();
                      }, 0);
                    }
                    editor.div.remove();
                    editor.isAttachedToDOM = false;
                    if (!this.#isCleaningUp) {
                      this.addInkEditorIfNeeded(false);
                    }
                  }
                  changeParent(editor) {
                    if (editor.parent === this) {
                      return;
                    }
                    if (editor.annotationElementId) {
                      this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);
                      _editor.AnnotationEditor.deleteAnnotationElement(editor);
                      editor.annotationElementId = null;
                    }
                    this.attach(editor);
                    editor.parent?.detach(editor);
                    editor.setParent(this);
                    if (editor.div && editor.isAttachedToDOM) {
                      editor.div.remove();
                      this.div.append(editor.div);
                    }
                  }
                  add(editor) {
                    this.changeParent(editor);
                    this.#uiManager.addEditor(editor);
                    this.attach(editor);
                    if (!editor.isAttachedToDOM) {
                      const div = editor.render();
                      this.div.append(div);
                      editor.isAttachedToDOM = true;
                    }
                    editor.fixAndSetPosition();
                    editor.onceAdded();
                    this.#uiManager.addToAnnotationStorage(editor);
                  }
                  moveEditorInDOM(editor) {
                    if (!editor.isAttachedToDOM) {
                      return;
                    }
                    const {
                      activeElement
                    } = document;
                    if (editor.div.contains(activeElement)) {
                      editor._focusEventsAllowed = false;
                      setTimeout(() => {
                        if (!editor.div.contains(document.activeElement)) {
                          editor.div.addEventListener("focusin", () => {
                            editor._focusEventsAllowed = true;
                          }, {
                            once: true
                          });
                          activeElement.focus();
                        } else {
                          editor._focusEventsAllowed = true;
                        }
                      }, 0);
                    }
                    editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);
                  }
                  addOrRebuild(editor) {
                    if (editor.needsToBeRebuilt()) {
                      editor.rebuild();
                    } else {
                      this.add(editor);
                    }
                  }
                  addUndoableEditor(editor) {
                    const cmd = () => editor._uiManager.rebuild(editor);
                    const undo = () => {
                      editor.remove();
                    };
                    this.addCommands({
                      cmd,
                      undo,
                      mustExec: false
                    });
                  }
                  getNextId() {
                    return this.#uiManager.getId();
                  }
                  #createNewEditor(params) {
                    switch (this.#uiManager.getMode()) {
                      case _util2.AnnotationEditorType.FREETEXT:
                        return new _freetext.FreeTextEditor(params);
                      case _util2.AnnotationEditorType.INK:
                        return new _ink.InkEditor(params);
                      case _util2.AnnotationEditorType.STAMP:
                        return new _stamp.StampEditor(params);
                    }
                    return null;
                  }
                  pasteEditor(mode, params) {
                    this.#uiManager.updateToolbar(mode);
                    this.#uiManager.updateMode(mode);
                    const {
                      offsetX,
                      offsetY
                    } = this.#getCenterPoint();
                    const id = this.getNextId();
                    const editor = this.#createNewEditor({
                      parent: this,
                      id,
                      x: offsetX,
                      y: offsetY,
                      uiManager: this.#uiManager,
                      isCentered: true,
                      ...params
                    });
                    if (editor) {
                      this.add(editor);
                    }
                  }
                  deserialize(data) {
                    switch (data.annotationType ?? data.annotationEditorType) {
                      case _util2.AnnotationEditorType.FREETEXT:
                        return _freetext.FreeTextEditor.deserialize(data, this, this.#uiManager);
                      case _util2.AnnotationEditorType.INK:
                        return _ink.InkEditor.deserialize(data, this, this.#uiManager);
                      case _util2.AnnotationEditorType.STAMP:
                        return _stamp.StampEditor.deserialize(data, this, this.#uiManager);
                    }
                    return null;
                  }
                  #createAndAddNewEditor(event, isCentered) {
                    const id = this.getNextId();
                    const editor = this.#createNewEditor({
                      parent: this,
                      id,
                      x: event.offsetX,
                      y: event.offsetY,
                      uiManager: this.#uiManager,
                      isCentered
                    });
                    if (editor) {
                      this.add(editor);
                    }
                    return editor;
                  }
                  #getCenterPoint() {
                    const {
                      x,
                      y,
                      width,
                      height
                    } = this.div.getBoundingClientRect();
                    const tlX = Math.max(0, x);
                    const tlY = Math.max(0, y);
                    const brX = Math.min(window.innerWidth, x + width);
                    const brY = Math.min(window.innerHeight, y + height);
                    const centerX = (tlX + brX) / 2 - x;
                    const centerY = (tlY + brY) / 2 - y;
                    const [offsetX, offsetY] = this.viewport.rotation % 180 === 0 ? [centerX, centerY] : [centerY, centerX];
                    return {
                      offsetX,
                      offsetY
                    };
                  }
                  addNewEditor() {
                    this.#createAndAddNewEditor(this.#getCenterPoint(), true);
                  }
                  setSelected(editor) {
                    this.#uiManager.setSelected(editor);
                  }
                  toggleSelected(editor) {
                    this.#uiManager.toggleSelected(editor);
                  }
                  isSelected(editor) {
                    return this.#uiManager.isSelected(editor);
                  }
                  unselect(editor) {
                    this.#uiManager.unselect(editor);
                  }
                  pointerup(event) {
                    const {
                      isMac
                    } = _util2.FeatureTest.platform;
                    if (event.button !== 0 || event.ctrlKey && isMac) {
                      return;
                    }
                    if (event.target !== this.div) {
                      return;
                    }
                    if (!this.#hadPointerDown) {
                      return;
                    }
                    this.#hadPointerDown = false;
                    if (!this.#allowClick) {
                      this.#allowClick = true;
                      return;
                    }
                    if (this.#uiManager.getMode() === _util2.AnnotationEditorType.STAMP) {
                      this.#uiManager.unselectAll();
                      return;
                    }
                    this.#createAndAddNewEditor(event, false);
                  }
                  pointerdown(event) {
                    if (this.#hadPointerDown) {
                      this.#hadPointerDown = false;
                      return;
                    }
                    const {
                      isMac
                    } = _util2.FeatureTest.platform;
                    if (event.button !== 0 || event.ctrlKey && isMac) {
                      return;
                    }
                    if (event.target !== this.div) {
                      return;
                    }
                    this.#hadPointerDown = true;
                    const editor = this.#uiManager.getActive();
                    this.#allowClick = !editor || editor.isEmpty();
                  }
                  findNewParent(editor, x, y) {
                    const layer = this.#uiManager.findParent(x, y);
                    if (layer === null || layer === this) {
                      return false;
                    }
                    layer.changeParent(editor);
                    return true;
                  }
                  destroy() {
                    if (this.#uiManager.getActive()?.parent === this) {
                      this.#uiManager.commitOrRemove();
                      this.#uiManager.setActiveEditor(null);
                    }
                    for (const editor of this.#editors.values()) {
                      this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);
                      editor.setParent(null);
                      editor.isAttachedToDOM = false;
                      editor.div.remove();
                    }
                    this.div = null;
                    this.#editors.clear();
                    this.#uiManager.removeLayer(this);
                  }
                  #cleanup() {
                    this.#isCleaningUp = true;
                    for (const editor of this.#editors.values()) {
                      if (editor.isEmpty()) {
                        editor.remove();
                      }
                    }
                    this.#isCleaningUp = false;
                  }
                  render({
                    viewport
                  }) {
                    this.viewport = viewport;
                    (0, _display_utils2.setLayerDimensions)(this.div, viewport);
                    for (const editor of this.#uiManager.getEditors(this.pageIndex)) {
                      this.add(editor);
                    }
                    this.updateMode();
                  }
                  update({
                    viewport
                  }) {
                    this.#uiManager.commitOrRemove();
                    this.viewport = viewport;
                    (0, _display_utils2.setLayerDimensions)(this.div, {
                      rotation: viewport.rotation
                    });
                    this.updateMode();
                  }
                  get pageDimensions() {
                    const {
                      pageWidth,
                      pageHeight
                    } = this.viewport.rawDims;
                    return [pageWidth, pageHeight];
                  }
                }
                exports2.AnnotationEditorLayer = AnnotationEditorLayer;
              },
              /* 28 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.FreeTextEditor = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _tools = __w_pdfjs_require__2(5);
                var _editor = __w_pdfjs_require__2(4);
                var _annotation_layer = __w_pdfjs_require__2(29);
                class FreeTextEditor extends _editor.AnnotationEditor {
                  #boundEditorDivBlur = this.editorDivBlur.bind(this);
                  #boundEditorDivFocus = this.editorDivFocus.bind(this);
                  #boundEditorDivInput = this.editorDivInput.bind(this);
                  #boundEditorDivKeydown = this.editorDivKeydown.bind(this);
                  #color;
                  #content = "";
                  #editorDivId = `${this.id}-editor`;
                  #fontSize;
                  #initialData = null;
                  static _freeTextDefaultContent = "";
                  static _internalPadding = 0;
                  static _defaultColor = null;
                  static _defaultFontSize = 10;
                  static get _keyboardManager() {
                    const proto = FreeTextEditor.prototype;
                    const arrowChecker = (self) => self.isEmpty();
                    const small = _tools.AnnotationEditorUIManager.TRANSLATE_SMALL;
                    const big = _tools.AnnotationEditorUIManager.TRANSLATE_BIG;
                    return (0, _util2.shadow)(this, "_keyboardManager", new _tools.KeyboardManager([[["ctrl+s", "mac+meta+s", "ctrl+p", "mac+meta+p"], proto.commitOrRemove, {
                      bubbles: true
                    }], [["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], proto.commitOrRemove], [["ArrowLeft", "mac+ArrowLeft"], proto._translateEmpty, {
                      args: [-small, 0],
                      checker: arrowChecker
                    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], proto._translateEmpty, {
                      args: [-big, 0],
                      checker: arrowChecker
                    }], [["ArrowRight", "mac+ArrowRight"], proto._translateEmpty, {
                      args: [small, 0],
                      checker: arrowChecker
                    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], proto._translateEmpty, {
                      args: [big, 0],
                      checker: arrowChecker
                    }], [["ArrowUp", "mac+ArrowUp"], proto._translateEmpty, {
                      args: [0, -small],
                      checker: arrowChecker
                    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], proto._translateEmpty, {
                      args: [0, -big],
                      checker: arrowChecker
                    }], [["ArrowDown", "mac+ArrowDown"], proto._translateEmpty, {
                      args: [0, small],
                      checker: arrowChecker
                    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], proto._translateEmpty, {
                      args: [0, big],
                      checker: arrowChecker
                    }]]));
                  }
                  static _type = "freetext";
                  constructor(params) {
                    super({
                      ...params,
                      name: "freeTextEditor"
                    });
                    this.#color = params.color || FreeTextEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor;
                    this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;
                  }
                  static initialize(l10n) {
                    _editor.AnnotationEditor.initialize(l10n, {
                      strings: ["free_text2_default_content", "editor_free_text2_aria_label"]
                    });
                    const style = getComputedStyle(document.documentElement);
                    this._internalPadding = parseFloat(style.getPropertyValue("--freetext-padding"));
                  }
                  static updateDefaultParams(type, value) {
                    switch (type) {
                      case _util2.AnnotationEditorParamsType.FREETEXT_SIZE:
                        FreeTextEditor._defaultFontSize = value;
                        break;
                      case _util2.AnnotationEditorParamsType.FREETEXT_COLOR:
                        FreeTextEditor._defaultColor = value;
                        break;
                    }
                  }
                  updateParams(type, value) {
                    switch (type) {
                      case _util2.AnnotationEditorParamsType.FREETEXT_SIZE:
                        this.#updateFontSize(value);
                        break;
                      case _util2.AnnotationEditorParamsType.FREETEXT_COLOR:
                        this.#updateColor(value);
                        break;
                    }
                  }
                  static get defaultPropertiesToUpdate() {
                    return [[_util2.AnnotationEditorParamsType.FREETEXT_SIZE, FreeTextEditor._defaultFontSize], [_util2.AnnotationEditorParamsType.FREETEXT_COLOR, FreeTextEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor]];
                  }
                  get propertiesToUpdate() {
                    return [[_util2.AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize], [_util2.AnnotationEditorParamsType.FREETEXT_COLOR, this.#color]];
                  }
                  #updateFontSize(fontSize) {
                    const setFontsize = (size) => {
                      this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;
                      this.translate(0, -(size - this.#fontSize) * this.parentScale);
                      this.#fontSize = size;
                      this.#setEditorDimensions();
                    };
                    const savedFontsize = this.#fontSize;
                    this.addCommands({
                      cmd: () => {
                        setFontsize(fontSize);
                      },
                      undo: () => {
                        setFontsize(savedFontsize);
                      },
                      mustExec: true,
                      type: _util2.AnnotationEditorParamsType.FREETEXT_SIZE,
                      overwriteIfSameType: true,
                      keepUndo: true
                    });
                  }
                  #updateColor(color) {
                    const savedColor = this.#color;
                    this.addCommands({
                      cmd: () => {
                        this.#color = this.editorDiv.style.color = color;
                      },
                      undo: () => {
                        this.#color = this.editorDiv.style.color = savedColor;
                      },
                      mustExec: true,
                      type: _util2.AnnotationEditorParamsType.FREETEXT_COLOR,
                      overwriteIfSameType: true,
                      keepUndo: true
                    });
                  }
                  _translateEmpty(x, y) {
                    this._uiManager.translateSelectedEditors(x, y, true);
                  }
                  getInitialTranslation() {
                    const scale = this.parentScale;
                    return [-FreeTextEditor._internalPadding * scale, -(FreeTextEditor._internalPadding + this.#fontSize) * scale];
                  }
                  rebuild() {
                    if (!this.parent) {
                      return;
                    }
                    super.rebuild();
                    if (this.div === null) {
                      return;
                    }
                    if (!this.isAttachedToDOM) {
                      this.parent.add(this);
                    }
                  }
                  enableEditMode() {
                    if (this.isInEditMode()) {
                      return;
                    }
                    this.parent.setEditingState(false);
                    this.parent.updateToolbar(_util2.AnnotationEditorType.FREETEXT);
                    super.enableEditMode();
                    this.overlayDiv.classList.remove("enabled");
                    this.editorDiv.contentEditable = true;
                    this._isDraggable = false;
                    this.div.removeAttribute("aria-activedescendant");
                    this.editorDiv.addEventListener("keydown", this.#boundEditorDivKeydown);
                    this.editorDiv.addEventListener("focus", this.#boundEditorDivFocus);
                    this.editorDiv.addEventListener("blur", this.#boundEditorDivBlur);
                    this.editorDiv.addEventListener("input", this.#boundEditorDivInput);
                  }
                  disableEditMode() {
                    if (!this.isInEditMode()) {
                      return;
                    }
                    this.parent.setEditingState(true);
                    super.disableEditMode();
                    this.overlayDiv.classList.add("enabled");
                    this.editorDiv.contentEditable = false;
                    this.div.setAttribute("aria-activedescendant", this.#editorDivId);
                    this._isDraggable = true;
                    this.editorDiv.removeEventListener("keydown", this.#boundEditorDivKeydown);
                    this.editorDiv.removeEventListener("focus", this.#boundEditorDivFocus);
                    this.editorDiv.removeEventListener("blur", this.#boundEditorDivBlur);
                    this.editorDiv.removeEventListener("input", this.#boundEditorDivInput);
                    this.div.focus({
                      preventScroll: true
                    });
                    this.isEditing = false;
                    this.parent.div.classList.add("freeTextEditing");
                  }
                  focusin(event) {
                    if (!this._focusEventsAllowed) {
                      return;
                    }
                    super.focusin(event);
                    if (event.target !== this.editorDiv) {
                      this.editorDiv.focus();
                    }
                  }
                  onceAdded() {
                    if (this.width) {
                      this.#cheatInitialRect();
                      return;
                    }
                    this.enableEditMode();
                    this.editorDiv.focus();
                    if (this._initialOptions?.isCentered) {
                      this.center();
                    }
                    this._initialOptions = null;
                  }
                  isEmpty() {
                    return !this.editorDiv || this.editorDiv.innerText.trim() === "";
                  }
                  remove() {
                    this.isEditing = false;
                    if (this.parent) {
                      this.parent.setEditingState(true);
                      this.parent.div.classList.add("freeTextEditing");
                    }
                    super.remove();
                  }
                  #extractText() {
                    const divs = this.editorDiv.getElementsByTagName("div");
                    if (divs.length === 0) {
                      return this.editorDiv.innerText;
                    }
                    const buffer = [];
                    for (const div of divs) {
                      buffer.push(div.innerText.replace(/\r\n?|\n/, ""));
                    }
                    return buffer.join("\n");
                  }
                  #setEditorDimensions() {
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    let rect;
                    if (this.isAttachedToDOM) {
                      rect = this.div.getBoundingClientRect();
                    } else {
                      const {
                        currentLayer,
                        div
                      } = this;
                      const savedDisplay = div.style.display;
                      div.style.display = "hidden";
                      currentLayer.div.append(this.div);
                      rect = div.getBoundingClientRect();
                      div.remove();
                      div.style.display = savedDisplay;
                    }
                    if (this.rotation % 180 === this.parentRotation % 180) {
                      this.width = rect.width / parentWidth;
                      this.height = rect.height / parentHeight;
                    } else {
                      this.width = rect.height / parentWidth;
                      this.height = rect.width / parentHeight;
                    }
                    this.fixAndSetPosition();
                  }
                  commit() {
                    if (!this.isInEditMode()) {
                      return;
                    }
                    super.commit();
                    this.disableEditMode();
                    const savedText = this.#content;
                    const newText = this.#content = this.#extractText().trimEnd();
                    if (savedText === newText) {
                      return;
                    }
                    const setText = (text) => {
                      this.#content = text;
                      if (!text) {
                        this.remove();
                        return;
                      }
                      this.#setContent();
                      this._uiManager.rebuild(this);
                      this.#setEditorDimensions();
                    };
                    this.addCommands({
                      cmd: () => {
                        setText(newText);
                      },
                      undo: () => {
                        setText(savedText);
                      },
                      mustExec: false
                    });
                    this.#setEditorDimensions();
                  }
                  shouldGetKeyboardEvents() {
                    return this.isInEditMode();
                  }
                  enterInEditMode() {
                    this.enableEditMode();
                    this.editorDiv.focus();
                  }
                  dblclick(event) {
                    this.enterInEditMode();
                  }
                  keydown(event) {
                    if (event.target === this.div && event.key === "Enter") {
                      this.enterInEditMode();
                      event.preventDefault();
                    }
                  }
                  editorDivKeydown(event) {
                    FreeTextEditor._keyboardManager.exec(this, event);
                  }
                  editorDivFocus(event) {
                    this.isEditing = true;
                  }
                  editorDivBlur(event) {
                    this.isEditing = false;
                  }
                  editorDivInput(event) {
                    this.parent.div.classList.toggle("freeTextEditing", this.isEmpty());
                  }
                  disableEditing() {
                    this.editorDiv.setAttribute("role", "comment");
                    this.editorDiv.removeAttribute("aria-multiline");
                  }
                  enableEditing() {
                    this.editorDiv.setAttribute("role", "textbox");
                    this.editorDiv.setAttribute("aria-multiline", true);
                  }
                  render() {
                    if (this.div) {
                      return this.div;
                    }
                    let baseX, baseY;
                    if (this.width) {
                      baseX = this.x;
                      baseY = this.y;
                    }
                    super.render();
                    this.editorDiv = document.createElement("div");
                    this.editorDiv.className = "internal";
                    this.editorDiv.setAttribute("id", this.#editorDivId);
                    this.enableEditing();
                    _editor.AnnotationEditor._l10nPromise.get("editor_free_text2_aria_label").then((msg) => this.editorDiv?.setAttribute("aria-label", msg));
                    _editor.AnnotationEditor._l10nPromise.get("free_text2_default_content").then((msg) => this.editorDiv?.setAttribute("default-content", msg));
                    this.editorDiv.contentEditable = true;
                    const {
                      style
                    } = this.editorDiv;
                    style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;
                    style.color = this.#color;
                    this.div.append(this.editorDiv);
                    this.overlayDiv = document.createElement("div");
                    this.overlayDiv.classList.add("overlay", "enabled");
                    this.div.append(this.overlayDiv);
                    (0, _tools.bindEvents)(this, this.div, ["dblclick", "keydown"]);
                    if (this.width) {
                      const [parentWidth, parentHeight] = this.parentDimensions;
                      if (this.annotationElementId) {
                        const {
                          position
                        } = this.#initialData;
                        let [tx, ty] = this.getInitialTranslation();
                        [tx, ty] = this.pageTranslationToScreen(tx, ty);
                        const [pageWidth, pageHeight] = this.pageDimensions;
                        const [pageX, pageY] = this.pageTranslation;
                        let posX, posY;
                        switch (this.rotation) {
                          case 0:
                            posX = baseX + (position[0] - pageX) / pageWidth;
                            posY = baseY + this.height - (position[1] - pageY) / pageHeight;
                            break;
                          case 90:
                            posX = baseX + (position[0] - pageX) / pageWidth;
                            posY = baseY - (position[1] - pageY) / pageHeight;
                            [tx, ty] = [ty, -tx];
                            break;
                          case 180:
                            posX = baseX - this.width + (position[0] - pageX) / pageWidth;
                            posY = baseY - (position[1] - pageY) / pageHeight;
                            [tx, ty] = [-tx, -ty];
                            break;
                          case 270:
                            posX = baseX + (position[0] - pageX - this.height * pageHeight) / pageWidth;
                            posY = baseY + (position[1] - pageY - this.width * pageWidth) / pageHeight;
                            [tx, ty] = [-ty, tx];
                            break;
                        }
                        this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);
                      } else {
                        this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);
                      }
                      this.#setContent();
                      this._isDraggable = true;
                      this.editorDiv.contentEditable = false;
                    } else {
                      this._isDraggable = false;
                      this.editorDiv.contentEditable = true;
                    }
                    return this.div;
                  }
                  #setContent() {
                    this.editorDiv.replaceChildren();
                    if (!this.#content) {
                      return;
                    }
                    for (const line of this.#content.split("\n")) {
                      const div = document.createElement("div");
                      div.append(line ? document.createTextNode(line) : document.createElement("br"));
                      this.editorDiv.append(div);
                    }
                  }
                  get contentDiv() {
                    return this.editorDiv;
                  }
                  static deserialize(data, parent, uiManager) {
                    let initialData = null;
                    if (data instanceof _annotation_layer.FreeTextAnnotationElement) {
                      const {
                        data: {
                          defaultAppearanceData: {
                            fontSize,
                            fontColor
                          },
                          rect,
                          rotation,
                          id
                        },
                        textContent,
                        textPosition,
                        parent: {
                          page: {
                            pageNumber
                          }
                        }
                      } = data;
                      if (!textContent || textContent.length === 0) {
                        return null;
                      }
                      initialData = data = {
                        annotationType: _util2.AnnotationEditorType.FREETEXT,
                        color: Array.from(fontColor),
                        fontSize,
                        value: textContent.join("\n"),
                        position: textPosition,
                        pageIndex: pageNumber - 1,
                        rect,
                        rotation,
                        id,
                        deleted: false
                      };
                    }
                    const editor = super.deserialize(data, parent, uiManager);
                    editor.#fontSize = data.fontSize;
                    editor.#color = _util2.Util.makeHexColor(...data.color);
                    editor.#content = data.value;
                    editor.annotationElementId = data.id || null;
                    editor.#initialData = initialData;
                    return editor;
                  }
                  serialize(isForCopying = false) {
                    if (this.isEmpty()) {
                      return null;
                    }
                    if (this.deleted) {
                      return {
                        pageIndex: this.pageIndex,
                        id: this.annotationElementId,
                        deleted: true
                      };
                    }
                    const padding = FreeTextEditor._internalPadding * this.parentScale;
                    const rect = this.getRect(padding, padding);
                    const color = _editor.AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#color);
                    const serialized = {
                      annotationType: _util2.AnnotationEditorType.FREETEXT,
                      color,
                      fontSize: this.#fontSize,
                      value: this.#content,
                      pageIndex: this.pageIndex,
                      rect,
                      rotation: this.rotation,
                      structTreeParentId: this._structTreeParentId
                    };
                    if (isForCopying) {
                      return serialized;
                    }
                    if (this.annotationElementId && !this.#hasElementChanged(serialized)) {
                      return null;
                    }
                    serialized.id = this.annotationElementId;
                    return serialized;
                  }
                  #hasElementChanged(serialized) {
                    const {
                      value,
                      fontSize,
                      color,
                      rect,
                      pageIndex
                    } = this.#initialData;
                    return serialized.value !== value || serialized.fontSize !== fontSize || serialized.rect.some((x, i) => Math.abs(x - rect[i]) >= 1) || serialized.color.some((c, i) => c !== color[i]) || serialized.pageIndex !== pageIndex;
                  }
                  #cheatInitialRect(delayed = false) {
                    if (!this.annotationElementId) {
                      return;
                    }
                    this.#setEditorDimensions();
                    if (!delayed && (this.width === 0 || this.height === 0)) {
                      setTimeout(() => this.#cheatInitialRect(true), 0);
                      return;
                    }
                    const padding = FreeTextEditor._internalPadding * this.parentScale;
                    this.#initialData.rect = this.getRect(padding, padding);
                  }
                }
                exports2.FreeTextEditor = FreeTextEditor;
              },
              /* 29 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.StampAnnotationElement = exports2.InkAnnotationElement = exports2.FreeTextAnnotationElement = exports2.AnnotationLayer = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _display_utils2 = __w_pdfjs_require__2(6);
                var _annotation_storage2 = __w_pdfjs_require__2(3);
                var _scripting_utils = __w_pdfjs_require__2(30);
                var _displayL10n_utils = __w_pdfjs_require__2(31);
                var _xfa_layer = __w_pdfjs_require__2(32);
                const DEFAULT_TAB_INDEX = 1e3;
                const DEFAULT_FONT_SIZE = 9;
                const GetElementsByNameSet = /* @__PURE__ */ new WeakSet();
                function getRectDims(rect) {
                  return {
                    width: rect[2] - rect[0],
                    height: rect[3] - rect[1]
                  };
                }
                class AnnotationElementFactory {
                  static create(parameters) {
                    const subtype = parameters.data.annotationType;
                    switch (subtype) {
                      case _util2.AnnotationType.LINK:
                        return new LinkAnnotationElement(parameters);
                      case _util2.AnnotationType.TEXT:
                        return new TextAnnotationElement(parameters);
                      case _util2.AnnotationType.WIDGET:
                        const fieldType = parameters.data.fieldType;
                        switch (fieldType) {
                          case "Tx":
                            return new TextWidgetAnnotationElement(parameters);
                          case "Btn":
                            if (parameters.data.radioButton) {
                              return new RadioButtonWidgetAnnotationElement(parameters);
                            } else if (parameters.data.checkBox) {
                              return new CheckboxWidgetAnnotationElement(parameters);
                            }
                            return new PushButtonWidgetAnnotationElement(parameters);
                          case "Ch":
                            return new ChoiceWidgetAnnotationElement(parameters);
                          case "Sig":
                            return new SignatureWidgetAnnotationElement(parameters);
                        }
                        return new WidgetAnnotationElement(parameters);
                      case _util2.AnnotationType.POPUP:
                        return new PopupAnnotationElement(parameters);
                      case _util2.AnnotationType.FREETEXT:
                        return new FreeTextAnnotationElement(parameters);
                      case _util2.AnnotationType.LINE:
                        return new LineAnnotationElement(parameters);
                      case _util2.AnnotationType.SQUARE:
                        return new SquareAnnotationElement(parameters);
                      case _util2.AnnotationType.CIRCLE:
                        return new CircleAnnotationElement(parameters);
                      case _util2.AnnotationType.POLYLINE:
                        return new PolylineAnnotationElement(parameters);
                      case _util2.AnnotationType.CARET:
                        return new CaretAnnotationElement(parameters);
                      case _util2.AnnotationType.INK:
                        return new InkAnnotationElement(parameters);
                      case _util2.AnnotationType.POLYGON:
                        return new PolygonAnnotationElement(parameters);
                      case _util2.AnnotationType.HIGHLIGHT:
                        return new HighlightAnnotationElement(parameters);
                      case _util2.AnnotationType.UNDERLINE:
                        return new UnderlineAnnotationElement(parameters);
                      case _util2.AnnotationType.SQUIGGLY:
                        return new SquigglyAnnotationElement(parameters);
                      case _util2.AnnotationType.STRIKEOUT:
                        return new StrikeOutAnnotationElement(parameters);
                      case _util2.AnnotationType.STAMP:
                        return new StampAnnotationElement(parameters);
                      case _util2.AnnotationType.FILEATTACHMENT:
                        return new FileAttachmentAnnotationElement(parameters);
                      default:
                        return new AnnotationElement(parameters);
                    }
                  }
                }
                class AnnotationElement {
                  #hasBorder = false;
                  constructor(parameters, {
                    isRenderable = false,
                    ignoreBorder = false,
                    createQuadrilaterals = false
                  } = {}) {
                    this.isRenderable = isRenderable;
                    this.data = parameters.data;
                    this.layer = parameters.layer;
                    this.linkService = parameters.linkService;
                    this.downloadManager = parameters.downloadManager;
                    this.imageResourcesPath = parameters.imageResourcesPath;
                    this.renderForms = parameters.renderForms;
                    this.svgFactory = parameters.svgFactory;
                    this.annotationStorage = parameters.annotationStorage;
                    this.enableScripting = parameters.enableScripting;
                    this.hasJSActions = parameters.hasJSActions;
                    this._fieldObjects = parameters.fieldObjects;
                    this.parent = parameters.parent;
                    if (isRenderable) {
                      this.container = this._createContainer(ignoreBorder);
                    }
                    if (createQuadrilaterals) {
                      this._createQuadrilaterals();
                    }
                  }
                  static _hasPopupData({
                    titleObj,
                    contentsObj,
                    richText
                  }) {
                    return !!(titleObj?.str || contentsObj?.str || richText?.str);
                  }
                  get hasPopupData() {
                    return AnnotationElement._hasPopupData(this.data);
                  }
                  _createContainer(ignoreBorder) {
                    const {
                      data,
                      parent: {
                        page,
                        viewport
                      }
                    } = this;
                    const container = document.createElement("section");
                    container.setAttribute("data-annotation-id", data.id);
                    if (!(this instanceof WidgetAnnotationElement)) {
                      container.tabIndex = DEFAULT_TAB_INDEX;
                    }
                    container.style.zIndex = this.parent.zIndex++;
                    if (this.data.popupRef) {
                      container.setAttribute("aria-haspopup", "dialog");
                    }
                    if (data.noRotate) {
                      container.classList.add("norotate");
                    }
                    const {
                      pageWidth,
                      pageHeight,
                      pageX,
                      pageY
                    } = viewport.rawDims;
                    if (!data.rect || this instanceof PopupAnnotationElement) {
                      const {
                        rotation: rotation2
                      } = data;
                      if (!data.hasOwnCanvas && rotation2 !== 0) {
                        this.setRotation(rotation2, container);
                      }
                      return container;
                    }
                    const {
                      width,
                      height
                    } = getRectDims(data.rect);
                    const rect = _util2.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);
                    if (!ignoreBorder && data.borderStyle.width > 0) {
                      container.style.borderWidth = `${data.borderStyle.width}px`;
                      const horizontalRadius = data.borderStyle.horizontalCornerRadius;
                      const verticalRadius = data.borderStyle.verticalCornerRadius;
                      if (horizontalRadius > 0 || verticalRadius > 0) {
                        const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;
                        container.style.borderRadius = radius;
                      } else if (this instanceof RadioButtonWidgetAnnotationElement) {
                        const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;
                        container.style.borderRadius = radius;
                      }
                      switch (data.borderStyle.style) {
                        case _util2.AnnotationBorderStyleType.SOLID:
                          container.style.borderStyle = "solid";
                          break;
                        case _util2.AnnotationBorderStyleType.DASHED:
                          container.style.borderStyle = "dashed";
                          break;
                        case _util2.AnnotationBorderStyleType.BEVELED:
                          (0, _util2.warn)("Unimplemented border style: beveled");
                          break;
                        case _util2.AnnotationBorderStyleType.INSET:
                          (0, _util2.warn)("Unimplemented border style: inset");
                          break;
                        case _util2.AnnotationBorderStyleType.UNDERLINE:
                          container.style.borderBottomStyle = "solid";
                          break;
                        default:
                          break;
                      }
                      const borderColor = data.borderColor || null;
                      if (borderColor) {
                        this.#hasBorder = true;
                        container.style.borderColor = _util2.Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);
                      } else {
                        container.style.borderWidth = 0;
                      }
                    }
                    container.style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;
                    container.style.top = `${100 * (rect[1] - pageY) / pageHeight}%`;
                    const {
                      rotation
                    } = data;
                    if (data.hasOwnCanvas || rotation === 0) {
                      container.style.width = `${100 * width / pageWidth}%`;
                      container.style.height = `${100 * height / pageHeight}%`;
                    } else {
                      this.setRotation(rotation, container);
                    }
                    return container;
                  }
                  setRotation(angle, container = this.container) {
                    if (!this.data.rect) {
                      return;
                    }
                    const {
                      pageWidth,
                      pageHeight
                    } = this.parent.viewport.rawDims;
                    const {
                      width,
                      height
                    } = getRectDims(this.data.rect);
                    let elementWidth, elementHeight;
                    if (angle % 180 === 0) {
                      elementWidth = 100 * width / pageWidth;
                      elementHeight = 100 * height / pageHeight;
                    } else {
                      elementWidth = 100 * height / pageWidth;
                      elementHeight = 100 * width / pageHeight;
                    }
                    container.style.width = `${elementWidth}%`;
                    container.style.height = `${elementHeight}%`;
                    container.setAttribute("data-main-rotation", (360 - angle) % 360);
                  }
                  get _commonActions() {
                    const setColor = (jsName, styleName, event) => {
                      const color = event.detail[jsName];
                      const colorType = color[0];
                      const colorArray = color.slice(1);
                      event.target.style[styleName] = _scripting_utils.ColorConverters[`${colorType}_HTML`](colorArray);
                      this.annotationStorage.setValue(this.data.id, {
                        [styleName]: _scripting_utils.ColorConverters[`${colorType}_rgb`](colorArray)
                      });
                    };
                    return (0, _util2.shadow)(this, "_commonActions", {
                      display: (event) => {
                        const {
                          display
                        } = event.detail;
                        const hidden = display % 2 === 1;
                        this.container.style.visibility = hidden ? "hidden" : "visible";
                        this.annotationStorage.setValue(this.data.id, {
                          noView: hidden,
                          noPrint: display === 1 || display === 2
                        });
                      },
                      print: (event) => {
                        this.annotationStorage.setValue(this.data.id, {
                          noPrint: !event.detail.print
                        });
                      },
                      hidden: (event) => {
                        const {
                          hidden
                        } = event.detail;
                        this.container.style.visibility = hidden ? "hidden" : "visible";
                        this.annotationStorage.setValue(this.data.id, {
                          noPrint: hidden,
                          noView: hidden
                        });
                      },
                      focus: (event) => {
                        setTimeout(() => event.target.focus({
                          preventScroll: false
                        }), 0);
                      },
                      userName: (event) => {
                        event.target.title = event.detail.userName;
                      },
                      readonly: (event) => {
                        event.target.disabled = event.detail.readonly;
                      },
                      required: (event) => {
                        this._setRequired(event.target, event.detail.required);
                      },
                      bgColor: (event) => {
                        setColor("bgColor", "backgroundColor", event);
                      },
                      fillColor: (event) => {
                        setColor("fillColor", "backgroundColor", event);
                      },
                      fgColor: (event) => {
                        setColor("fgColor", "color", event);
                      },
                      textColor: (event) => {
                        setColor("textColor", "color", event);
                      },
                      borderColor: (event) => {
                        setColor("borderColor", "borderColor", event);
                      },
                      strokeColor: (event) => {
                        setColor("strokeColor", "borderColor", event);
                      },
                      rotation: (event) => {
                        const angle = event.detail.rotation;
                        this.setRotation(angle);
                        this.annotationStorage.setValue(this.data.id, {
                          rotation: angle
                        });
                      }
                    });
                  }
                  _dispatchEventFromSandbox(actions, jsEvent) {
                    const commonActions = this._commonActions;
                    for (const name of Object.keys(jsEvent.detail)) {
                      const action = actions[name] || commonActions[name];
                      action?.(jsEvent);
                    }
                  }
                  _setDefaultPropertiesFromJS(element) {
                    if (!this.enableScripting) {
                      return;
                    }
                    const storedData = this.annotationStorage.getRawValue(this.data.id);
                    if (!storedData) {
                      return;
                    }
                    const commonActions = this._commonActions;
                    for (const [actionName, detail] of Object.entries(storedData)) {
                      const action = commonActions[actionName];
                      if (action) {
                        const eventProxy = {
                          detail: {
                            [actionName]: detail
                          },
                          target: element
                        };
                        action(eventProxy);
                        delete storedData[actionName];
                      }
                    }
                  }
                  _createQuadrilaterals() {
                    if (!this.container) {
                      return;
                    }
                    const {
                      quadPoints
                    } = this.data;
                    if (!quadPoints) {
                      return;
                    }
                    const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect;
                    if (quadPoints.length === 1) {
                      const [, {
                        x: trX,
                        y: trY
                      }, {
                        x: blX,
                        y: blY
                      }] = quadPoints[0];
                      if (rectTrX === trX && rectTrY === trY && rectBlX === blX && rectBlY === blY) {
                        return;
                      }
                    }
                    const {
                      style
                    } = this.container;
                    let svgBuffer;
                    if (this.#hasBorder) {
                      const {
                        borderColor,
                        borderWidth
                      } = style;
                      style.borderWidth = 0;
                      svgBuffer = ["url('data:image/svg+xml;utf8,", `<svg xmlns="http://www.w3.org/2000/svg"`, ` preserveAspectRatio="none" viewBox="0 0 1 1">`, `<g fill="transparent" stroke="${borderColor}" stroke-width="${borderWidth}">`];
                      this.container.classList.add("hasBorder");
                    }
                    const width = rectTrX - rectBlX;
                    const height = rectTrY - rectBlY;
                    const {
                      svgFactory
                    } = this;
                    const svg = svgFactory.createElement("svg");
                    svg.classList.add("quadrilateralsContainer");
                    svg.setAttribute("width", 0);
                    svg.setAttribute("height", 0);
                    const defs = svgFactory.createElement("defs");
                    svg.append(defs);
                    const clipPath = svgFactory.createElement("clipPath");
                    const id = `clippath_${this.data.id}`;
                    clipPath.setAttribute("id", id);
                    clipPath.setAttribute("clipPathUnits", "objectBoundingBox");
                    defs.append(clipPath);
                    for (const [, {
                      x: trX,
                      y: trY
                    }, {
                      x: blX,
                      y: blY
                    }] of quadPoints) {
                      const rect = svgFactory.createElement("rect");
                      const x = (blX - rectBlX) / width;
                      const y = (rectTrY - trY) / height;
                      const rectWidth = (trX - blX) / width;
                      const rectHeight = (trY - blY) / height;
                      rect.setAttribute("x", x);
                      rect.setAttribute("y", y);
                      rect.setAttribute("width", rectWidth);
                      rect.setAttribute("height", rectHeight);
                      clipPath.append(rect);
                      svgBuffer?.push(`<rect vector-effect="non-scaling-stroke" x="${x}" y="${y}" width="${rectWidth}" height="${rectHeight}"/>`);
                    }
                    if (this.#hasBorder) {
                      svgBuffer.push(`</g></svg>')`);
                      style.backgroundImage = svgBuffer.join("");
                    }
                    this.container.append(svg);
                    this.container.style.clipPath = `url(#${id})`;
                  }
                  _createPopup() {
                    const {
                      container,
                      data
                    } = this;
                    container.setAttribute("aria-haspopup", "dialog");
                    const popup = new PopupAnnotationElement({
                      data: {
                        color: data.color,
                        titleObj: data.titleObj,
                        modificationDate: data.modificationDate,
                        contentsObj: data.contentsObj,
                        richText: data.richText,
                        parentRect: data.rect,
                        borderStyle: 0,
                        id: `popup_${data.id}`,
                        rotation: data.rotation
                      },
                      parent: this.parent,
                      elements: [this]
                    });
                    this.parent.div.append(popup.render());
                  }
                  render() {
                    (0, _util2.unreachable)("Abstract method `AnnotationElement.render` called");
                  }
                  _getElementsByName(name, skipId = null) {
                    const fields = [];
                    if (this._fieldObjects) {
                      const fieldObj = this._fieldObjects[name];
                      if (fieldObj) {
                        for (const {
                          page,
                          id,
                          exportValues
                        } of fieldObj) {
                          if (page === -1) {
                            continue;
                          }
                          if (id === skipId) {
                            continue;
                          }
                          const exportValue = typeof exportValues === "string" ? exportValues : null;
                          const domElement = document.querySelector(`[data-element-id="${id}"]`);
                          if (domElement && !GetElementsByNameSet.has(domElement)) {
                            (0, _util2.warn)(`_getElementsByName - element not allowed: ${id}`);
                            continue;
                          }
                          fields.push({
                            id,
                            exportValue,
                            domElement
                          });
                        }
                      }
                      return fields;
                    }
                    for (const domElement of document.getElementsByName(name)) {
                      const {
                        exportValue
                      } = domElement;
                      const id = domElement.getAttribute("data-element-id");
                      if (id === skipId) {
                        continue;
                      }
                      if (!GetElementsByNameSet.has(domElement)) {
                        continue;
                      }
                      fields.push({
                        id,
                        exportValue,
                        domElement
                      });
                    }
                    return fields;
                  }
                  show() {
                    if (this.container) {
                      this.container.hidden = false;
                    }
                    this.popup?.maybeShow();
                  }
                  hide() {
                    if (this.container) {
                      this.container.hidden = true;
                    }
                    this.popup?.forceHide();
                  }
                  getElementsToTriggerPopup() {
                    return this.container;
                  }
                  addHighlightArea() {
                    const triggers = this.getElementsToTriggerPopup();
                    if (Array.isArray(triggers)) {
                      for (const element of triggers) {
                        element.classList.add("highlightArea");
                      }
                    } else {
                      triggers.classList.add("highlightArea");
                    }
                  }
                  _editOnDoubleClick() {
                    const {
                      annotationEditorType: mode,
                      data: {
                        id: editId
                      }
                    } = this;
                    this.container.addEventListener("dblclick", () => {
                      this.linkService.eventBus?.dispatch("switchannotationeditormode", {
                        source: this,
                        mode,
                        editId
                      });
                    });
                  }
                }
                class LinkAnnotationElement extends AnnotationElement {
                  constructor(parameters, options = null) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: !!options?.ignoreBorder,
                      createQuadrilaterals: true
                    });
                    this.isTooltipOnly = parameters.data.isTooltipOnly;
                  }
                  render() {
                    const {
                      data,
                      linkService
                    } = this;
                    const link = document.createElement("a");
                    link.setAttribute("data-element-id", data.id);
                    let isBound = false;
                    if (data.url) {
                      linkService.addLinkAttributes(link, data.url, data.newWindow);
                      isBound = true;
                    } else if (data.action) {
                      this._bindNamedAction(link, data.action);
                      isBound = true;
                    } else if (data.attachment) {
                      this._bindAttachment(link, data.attachment);
                      isBound = true;
                    } else if (data.setOCGState) {
                      this.#bindSetOCGState(link, data.setOCGState);
                      isBound = true;
                    } else if (data.dest) {
                      this._bindLink(link, data.dest);
                      isBound = true;
                    } else {
                      if (data.actions && (data.actions.Action || data.actions["Mouse Up"] || data.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions) {
                        this._bindJSAction(link, data);
                        isBound = true;
                      }
                      if (data.resetForm) {
                        this._bindResetFormAction(link, data.resetForm);
                        isBound = true;
                      } else if (this.isTooltipOnly && !isBound) {
                        this._bindLink(link, "");
                        isBound = true;
                      }
                    }
                    this.container.classList.add("linkAnnotation");
                    if (isBound) {
                      this.container.append(link);
                    }
                    return this.container;
                  }
                  #setInternalLink() {
                    this.container.setAttribute("data-internal-link", "");
                  }
                  _bindLink(link, destination) {
                    link.href = this.linkService.getDestinationHash(destination);
                    link.onclick = () => {
                      if (destination) {
                        this.linkService.goToDestination(destination);
                      }
                      return false;
                    };
                    if (destination || destination === "") {
                      this.#setInternalLink();
                    }
                  }
                  _bindNamedAction(link, action) {
                    link.href = this.linkService.getAnchorUrl("");
                    link.onclick = () => {
                      this.linkService.executeNamedAction(action);
                      return false;
                    };
                    this.#setInternalLink();
                  }
                  _bindAttachment(link, attachment) {
                    link.href = this.linkService.getAnchorUrl("");
                    link.onclick = () => {
                      this.downloadManager?.openOrDownloadData(this.container, attachment.content, attachment.filename);
                      return false;
                    };
                    this.#setInternalLink();
                  }
                  #bindSetOCGState(link, action) {
                    link.href = this.linkService.getAnchorUrl("");
                    link.onclick = () => {
                      this.linkService.executeSetOCGState(action);
                      return false;
                    };
                    this.#setInternalLink();
                  }
                  _bindJSAction(link, data) {
                    link.href = this.linkService.getAnchorUrl("");
                    const map = /* @__PURE__ */ new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
                    for (const name of Object.keys(data.actions)) {
                      const jsName = map.get(name);
                      if (!jsName) {
                        continue;
                      }
                      link[jsName] = () => {
                        this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                          source: this,
                          detail: {
                            id: data.id,
                            name
                          }
                        });
                        return false;
                      };
                    }
                    if (!link.onclick) {
                      link.onclick = () => false;
                    }
                    this.#setInternalLink();
                  }
                  _bindResetFormAction(link, resetForm) {
                    const otherClickAction = link.onclick;
                    if (!otherClickAction) {
                      link.href = this.linkService.getAnchorUrl("");
                    }
                    this.#setInternalLink();
                    if (!this._fieldObjects) {
                      (0, _util2.warn)(`_bindResetFormAction - "resetForm" action not supported, ensure that the \`fieldObjects\` parameter is provided.`);
                      if (!otherClickAction) {
                        link.onclick = () => false;
                      }
                      return;
                    }
                    link.onclick = () => {
                      otherClickAction?.();
                      const {
                        fields: resetFormFields,
                        refs: resetFormRefs,
                        include
                      } = resetForm;
                      const allFields = [];
                      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {
                        const fieldIds = new Set(resetFormRefs);
                        for (const fieldName of resetFormFields) {
                          const fields = this._fieldObjects[fieldName] || [];
                          for (const {
                            id
                          } of fields) {
                            fieldIds.add(id);
                          }
                        }
                        for (const fields of Object.values(this._fieldObjects)) {
                          for (const field of fields) {
                            if (fieldIds.has(field.id) === include) {
                              allFields.push(field);
                            }
                          }
                        }
                      } else {
                        for (const fields of Object.values(this._fieldObjects)) {
                          allFields.push(...fields);
                        }
                      }
                      const storage = this.annotationStorage;
                      const allIds = [];
                      for (const field of allFields) {
                        const {
                          id
                        } = field;
                        allIds.push(id);
                        switch (field.type) {
                          case "text": {
                            const value = field.defaultValue || "";
                            storage.setValue(id, {
                              value
                            });
                            break;
                          }
                          case "checkbox":
                          case "radiobutton": {
                            const value = field.defaultValue === field.exportValues;
                            storage.setValue(id, {
                              value
                            });
                            break;
                          }
                          case "combobox":
                          case "listbox": {
                            const value = field.defaultValue || "";
                            storage.setValue(id, {
                              value
                            });
                            break;
                          }
                          default:
                            continue;
                        }
                        const domElement = document.querySelector(`[data-element-id="${id}"]`);
                        if (!domElement) {
                          continue;
                        } else if (!GetElementsByNameSet.has(domElement)) {
                          (0, _util2.warn)(`_bindResetFormAction - element not allowed: ${id}`);
                          continue;
                        }
                        domElement.dispatchEvent(new Event("resetform"));
                      }
                      if (this.enableScripting) {
                        this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                          source: this,
                          detail: {
                            id: "app",
                            ids: allIds,
                            name: "ResetForm"
                          }
                        });
                      }
                      return false;
                    };
                  }
                }
                class TextAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true
                    });
                  }
                  render() {
                    this.container.classList.add("textAnnotation");
                    const image = document.createElement("img");
                    image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
                    image.alt = "[{{type}} Annotation]";
                    image.dataset.l10nId = "text_annotation_type";
                    image.dataset.l10nArgs = JSON.stringify({
                      type: this.data.name
                    });
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    this.container.append(image);
                    return this.container;
                  }
                }
                class WidgetAnnotationElement extends AnnotationElement {
                  render() {
                    if (this.data.alternativeText) {
                      this.container.title = this.data.alternativeText;
                    }
                    return this.container;
                  }
                  showElementAndHideCanvas(element) {
                    if (this.data.hasOwnCanvas) {
                      if (element.previousSibling?.nodeName === "CANVAS") {
                        element.previousSibling.hidden = true;
                      }
                      element.hidden = false;
                    }
                  }
                  _getKeyModifier(event) {
                    const {
                      isWin,
                      isMac
                    } = _util2.FeatureTest.platform;
                    return isWin && event.ctrlKey || isMac && event.metaKey;
                  }
                  _setEventListener(element, elementData, baseName, eventName, valueGetter) {
                    if (baseName.includes("mouse")) {
                      element.addEventListener(baseName, (event) => {
                        this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                          source: this,
                          detail: {
                            id: this.data.id,
                            name: eventName,
                            value: valueGetter(event),
                            shift: event.shiftKey,
                            modifier: this._getKeyModifier(event)
                          }
                        });
                      });
                    } else {
                      element.addEventListener(baseName, (event) => {
                        if (baseName === "blur") {
                          if (!elementData.focused || !event.relatedTarget) {
                            return;
                          }
                          elementData.focused = false;
                        } else if (baseName === "focus") {
                          if (elementData.focused) {
                            return;
                          }
                          elementData.focused = true;
                        }
                        if (!valueGetter) {
                          return;
                        }
                        this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                          source: this,
                          detail: {
                            id: this.data.id,
                            name: eventName,
                            value: valueGetter(event)
                          }
                        });
                      });
                    }
                  }
                  _setEventListeners(element, elementData, names, getter) {
                    for (const [baseName, eventName] of names) {
                      if (eventName === "Action" || this.data.actions?.[eventName]) {
                        if (eventName === "Focus" || eventName === "Blur") {
                          elementData ||= {
                            focused: false
                          };
                        }
                        this._setEventListener(element, elementData, baseName, eventName, getter);
                        if (eventName === "Focus" && !this.data.actions?.Blur) {
                          this._setEventListener(element, elementData, "blur", "Blur", null);
                        } else if (eventName === "Blur" && !this.data.actions?.Focus) {
                          this._setEventListener(element, elementData, "focus", "Focus", null);
                        }
                      }
                    }
                  }
                  _setBackgroundColor(element) {
                    const color = this.data.backgroundColor || null;
                    element.style.backgroundColor = color === null ? "transparent" : _util2.Util.makeHexColor(color[0], color[1], color[2]);
                  }
                  _setTextStyle(element) {
                    const TEXT_ALIGNMENT = ["left", "center", "right"];
                    const {
                      fontColor
                    } = this.data.defaultAppearanceData;
                    const fontSize = this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;
                    const style = element.style;
                    let computedFontSize;
                    const BORDER_SIZE = 2;
                    const roundToOneDecimal = (x) => Math.round(10 * x) / 10;
                    if (this.data.multiLine) {
                      const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);
                      const numberOfLines = Math.round(height / (_util2.LINE_FACTOR * fontSize)) || 1;
                      const lineHeight = height / numberOfLines;
                      computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / _util2.LINE_FACTOR));
                    } else {
                      const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);
                      computedFontSize = Math.min(fontSize, roundToOneDecimal(height / _util2.LINE_FACTOR));
                    }
                    style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;
                    style.color = _util2.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);
                    if (this.data.textAlignment !== null) {
                      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
                    }
                  }
                  _setRequired(element, isRequired) {
                    if (isRequired) {
                      element.setAttribute("required", true);
                    } else {
                      element.removeAttribute("required");
                    }
                    element.setAttribute("aria-required", isRequired);
                  }
                }
                class TextWidgetAnnotationElement extends WidgetAnnotationElement {
                  constructor(parameters) {
                    const isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
                    super(parameters, {
                      isRenderable
                    });
                  }
                  setPropertyOnSiblings(base, key, value, keyInStorage) {
                    const storage = this.annotationStorage;
                    for (const element of this._getElementsByName(base.name, base.id)) {
                      if (element.domElement) {
                        element.domElement[key] = value;
                      }
                      storage.setValue(element.id, {
                        [keyInStorage]: value
                      });
                    }
                  }
                  render() {
                    const storage = this.annotationStorage;
                    const id = this.data.id;
                    this.container.classList.add("textWidgetAnnotation");
                    let element = null;
                    if (this.renderForms) {
                      const storedData = storage.getValue(id, {
                        value: this.data.fieldValue
                      });
                      let textContent = storedData.value || "";
                      const maxLen = storage.getValue(id, {
                        charLimit: this.data.maxLen
                      }).charLimit;
                      if (maxLen && textContent.length > maxLen) {
                        textContent = textContent.slice(0, maxLen);
                      }
                      let fieldFormattedValues = storedData.formattedValue || this.data.textContent?.join("\n") || null;
                      if (fieldFormattedValues && this.data.comb) {
                        fieldFormattedValues = fieldFormattedValues.replaceAll(/\s+/g, "");
                      }
                      const elementData = {
                        userValue: textContent,
                        formattedValue: fieldFormattedValues,
                        lastCommittedValue: null,
                        commitKey: 1,
                        focused: false
                      };
                      if (this.data.multiLine) {
                        element = document.createElement("textarea");
                        element.textContent = fieldFormattedValues ?? textContent;
                        if (this.data.doNotScroll) {
                          element.style.overflowY = "hidden";
                        }
                      } else {
                        element = document.createElement("input");
                        element.type = "text";
                        element.setAttribute("value", fieldFormattedValues ?? textContent);
                        if (this.data.doNotScroll) {
                          element.style.overflowX = "hidden";
                        }
                      }
                      if (this.data.hasOwnCanvas) {
                        element.hidden = true;
                      }
                      GetElementsByNameSet.add(element);
                      element.setAttribute("data-element-id", id);
                      element.disabled = this.data.readOnly;
                      element.name = this.data.fieldName;
                      element.tabIndex = DEFAULT_TAB_INDEX;
                      this._setRequired(element, this.data.required);
                      if (maxLen) {
                        element.maxLength = maxLen;
                      }
                      element.addEventListener("input", (event) => {
                        storage.setValue(id, {
                          value: event.target.value
                        });
                        this.setPropertyOnSiblings(element, "value", event.target.value, "value");
                        elementData.formattedValue = null;
                      });
                      element.addEventListener("resetform", (event) => {
                        const defaultValue = this.data.defaultFieldValue ?? "";
                        element.value = elementData.userValue = defaultValue;
                        elementData.formattedValue = null;
                      });
                      let blurListener = (event) => {
                        const {
                          formattedValue
                        } = elementData;
                        if (formattedValue !== null && formattedValue !== void 0) {
                          event.target.value = formattedValue;
                        }
                        event.target.scrollLeft = 0;
                      };
                      if (this.enableScripting && this.hasJSActions) {
                        element.addEventListener("focus", (event) => {
                          if (elementData.focused) {
                            return;
                          }
                          const {
                            target
                          } = event;
                          if (elementData.userValue) {
                            target.value = elementData.userValue;
                          }
                          elementData.lastCommittedValue = target.value;
                          elementData.commitKey = 1;
                          elementData.focused = true;
                        });
                        element.addEventListener("updatefromsandbox", (jsEvent) => {
                          this.showElementAndHideCanvas(jsEvent.target);
                          const actions = {
                            value(event) {
                              elementData.userValue = event.detail.value ?? "";
                              storage.setValue(id, {
                                value: elementData.userValue.toString()
                              });
                              event.target.value = elementData.userValue;
                            },
                            formattedValue(event) {
                              const {
                                formattedValue
                              } = event.detail;
                              elementData.formattedValue = formattedValue;
                              if (formattedValue !== null && formattedValue !== void 0 && event.target !== document.activeElement) {
                                event.target.value = formattedValue;
                              }
                              storage.setValue(id, {
                                formattedValue
                              });
                            },
                            selRange(event) {
                              event.target.setSelectionRange(...event.detail.selRange);
                            },
                            charLimit: (event) => {
                              const {
                                charLimit
                              } = event.detail;
                              const {
                                target
                              } = event;
                              if (charLimit === 0) {
                                target.removeAttribute("maxLength");
                                return;
                              }
                              target.setAttribute("maxLength", charLimit);
                              let value = elementData.userValue;
                              if (!value || value.length <= charLimit) {
                                return;
                              }
                              value = value.slice(0, charLimit);
                              target.value = elementData.userValue = value;
                              storage.setValue(id, {
                                value
                              });
                              this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                                source: this,
                                detail: {
                                  id,
                                  name: "Keystroke",
                                  value,
                                  willCommit: true,
                                  commitKey: 1,
                                  selStart: target.selectionStart,
                                  selEnd: target.selectionEnd
                                }
                              });
                            }
                          };
                          this._dispatchEventFromSandbox(actions, jsEvent);
                        });
                        element.addEventListener("keydown", (event) => {
                          elementData.commitKey = 1;
                          let commitKey = -1;
                          if (event.key === "Escape") {
                            commitKey = 0;
                          } else if (event.key === "Enter" && !this.data.multiLine) {
                            commitKey = 2;
                          } else if (event.key === "Tab") {
                            elementData.commitKey = 3;
                          }
                          if (commitKey === -1) {
                            return;
                          }
                          const {
                            value
                          } = event.target;
                          if (elementData.lastCommittedValue === value) {
                            return;
                          }
                          elementData.lastCommittedValue = value;
                          elementData.userValue = value;
                          this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                            source: this,
                            detail: {
                              id,
                              name: "Keystroke",
                              value,
                              willCommit: true,
                              commitKey,
                              selStart: event.target.selectionStart,
                              selEnd: event.target.selectionEnd
                            }
                          });
                        });
                        const _blurListener = blurListener;
                        blurListener = null;
                        element.addEventListener("blur", (event) => {
                          if (!elementData.focused || !event.relatedTarget) {
                            return;
                          }
                          elementData.focused = false;
                          const {
                            value
                          } = event.target;
                          elementData.userValue = value;
                          if (elementData.lastCommittedValue !== value) {
                            this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                              source: this,
                              detail: {
                                id,
                                name: "Keystroke",
                                value,
                                willCommit: true,
                                commitKey: elementData.commitKey,
                                selStart: event.target.selectionStart,
                                selEnd: event.target.selectionEnd
                              }
                            });
                          }
                          _blurListener(event);
                        });
                        if (this.data.actions?.Keystroke) {
                          element.addEventListener("beforeinput", (event) => {
                            elementData.lastCommittedValue = null;
                            const {
                              data,
                              target
                            } = event;
                            const {
                              value,
                              selectionStart,
                              selectionEnd
                            } = target;
                            let selStart = selectionStart, selEnd = selectionEnd;
                            switch (event.inputType) {
                              case "deleteWordBackward": {
                                const match = value.substring(0, selectionStart).match(/\w*[^\w]*$/);
                                if (match) {
                                  selStart -= match[0].length;
                                }
                                break;
                              }
                              case "deleteWordForward": {
                                const match = value.substring(selectionStart).match(/^[^\w]*\w*/);
                                if (match) {
                                  selEnd += match[0].length;
                                }
                                break;
                              }
                              case "deleteContentBackward":
                                if (selectionStart === selectionEnd) {
                                  selStart -= 1;
                                }
                                break;
                              case "deleteContentForward":
                                if (selectionStart === selectionEnd) {
                                  selEnd += 1;
                                }
                                break;
                            }
                            event.preventDefault();
                            this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                              source: this,
                              detail: {
                                id,
                                name: "Keystroke",
                                value,
                                change: data || "",
                                willCommit: false,
                                selStart,
                                selEnd
                              }
                            });
                          });
                        }
                        this._setEventListeners(element, elementData, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (event) => event.target.value);
                      }
                      if (blurListener) {
                        element.addEventListener("blur", blurListener);
                      }
                      if (this.data.comb) {
                        const fieldWidth = this.data.rect[2] - this.data.rect[0];
                        const combWidth = fieldWidth / maxLen;
                        element.classList.add("comb");
                        element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;
                      }
                    } else {
                      element = document.createElement("div");
                      element.textContent = this.data.fieldValue;
                      element.style.verticalAlign = "middle";
                      element.style.display = "table-cell";
                    }
                    this._setTextStyle(element);
                    this._setBackgroundColor(element);
                    this._setDefaultPropertiesFromJS(element);
                    this.container.append(element);
                    return this.container;
                  }
                }
                class SignatureWidgetAnnotationElement extends WidgetAnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: !!parameters.data.hasOwnCanvas
                    });
                  }
                }
                class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: parameters.renderForms
                    });
                  }
                  render() {
                    const storage = this.annotationStorage;
                    const data = this.data;
                    const id = data.id;
                    let value = storage.getValue(id, {
                      value: data.exportValue === data.fieldValue
                    }).value;
                    if (typeof value === "string") {
                      value = value !== "Off";
                      storage.setValue(id, {
                        value
                      });
                    }
                    this.container.classList.add("buttonWidgetAnnotation", "checkBox");
                    const element = document.createElement("input");
                    GetElementsByNameSet.add(element);
                    element.setAttribute("data-element-id", id);
                    element.disabled = data.readOnly;
                    this._setRequired(element, this.data.required);
                    element.type = "checkbox";
                    element.name = data.fieldName;
                    if (value) {
                      element.setAttribute("checked", true);
                    }
                    element.setAttribute("exportValue", data.exportValue);
                    element.tabIndex = DEFAULT_TAB_INDEX;
                    element.addEventListener("change", (event) => {
                      const {
                        name,
                        checked
                      } = event.target;
                      for (const checkbox of this._getElementsByName(name, id)) {
                        const curChecked = checked && checkbox.exportValue === data.exportValue;
                        if (checkbox.domElement) {
                          checkbox.domElement.checked = curChecked;
                        }
                        storage.setValue(checkbox.id, {
                          value: curChecked
                        });
                      }
                      storage.setValue(id, {
                        value: checked
                      });
                    });
                    element.addEventListener("resetform", (event) => {
                      const defaultValue = data.defaultFieldValue || "Off";
                      event.target.checked = defaultValue === data.exportValue;
                    });
                    if (this.enableScripting && this.hasJSActions) {
                      element.addEventListener("updatefromsandbox", (jsEvent) => {
                        const actions = {
                          value(event) {
                            event.target.checked = event.detail.value !== "Off";
                            storage.setValue(id, {
                              value: event.target.checked
                            });
                          }
                        };
                        this._dispatchEventFromSandbox(actions, jsEvent);
                      });
                      this._setEventListeners(element, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (event) => event.target.checked);
                    }
                    this._setBackgroundColor(element);
                    this._setDefaultPropertiesFromJS(element);
                    this.container.append(element);
                    return this.container;
                  }
                }
                class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: parameters.renderForms
                    });
                  }
                  render() {
                    this.container.classList.add("buttonWidgetAnnotation", "radioButton");
                    const storage = this.annotationStorage;
                    const data = this.data;
                    const id = data.id;
                    let value = storage.getValue(id, {
                      value: data.fieldValue === data.buttonValue
                    }).value;
                    if (typeof value === "string") {
                      value = value !== data.buttonValue;
                      storage.setValue(id, {
                        value
                      });
                    }
                    const element = document.createElement("input");
                    GetElementsByNameSet.add(element);
                    element.setAttribute("data-element-id", id);
                    element.disabled = data.readOnly;
                    this._setRequired(element, this.data.required);
                    element.type = "radio";
                    element.name = data.fieldName;
                    if (value) {
                      element.setAttribute("checked", true);
                    }
                    element.tabIndex = DEFAULT_TAB_INDEX;
                    element.addEventListener("change", (event) => {
                      const {
                        name,
                        checked
                      } = event.target;
                      for (const radio of this._getElementsByName(name, id)) {
                        storage.setValue(radio.id, {
                          value: false
                        });
                      }
                      storage.setValue(id, {
                        value: checked
                      });
                    });
                    element.addEventListener("resetform", (event) => {
                      const defaultValue = data.defaultFieldValue;
                      event.target.checked = defaultValue !== null && defaultValue !== void 0 && defaultValue === data.buttonValue;
                    });
                    if (this.enableScripting && this.hasJSActions) {
                      const pdfButtonValue = data.buttonValue;
                      element.addEventListener("updatefromsandbox", (jsEvent) => {
                        const actions = {
                          value: (event) => {
                            const checked = pdfButtonValue === event.detail.value;
                            for (const radio of this._getElementsByName(event.target.name)) {
                              const curChecked = checked && radio.id === id;
                              if (radio.domElement) {
                                radio.domElement.checked = curChecked;
                              }
                              storage.setValue(radio.id, {
                                value: curChecked
                              });
                            }
                          }
                        };
                        this._dispatchEventFromSandbox(actions, jsEvent);
                      });
                      this._setEventListeners(element, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (event) => event.target.checked);
                    }
                    this._setBackgroundColor(element);
                    this._setDefaultPropertiesFromJS(element);
                    this.container.append(element);
                    return this.container;
                  }
                }
                class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      ignoreBorder: parameters.data.hasAppearance
                    });
                  }
                  render() {
                    const container = super.render();
                    container.classList.add("buttonWidgetAnnotation", "pushButton");
                    if (this.data.alternativeText) {
                      container.title = this.data.alternativeText;
                    }
                    const linkElement = container.lastChild;
                    if (this.enableScripting && this.hasJSActions && linkElement) {
                      this._setDefaultPropertiesFromJS(linkElement);
                      linkElement.addEventListener("updatefromsandbox", (jsEvent) => {
                        this._dispatchEventFromSandbox({}, jsEvent);
                      });
                    }
                    return container;
                  }
                }
                class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: parameters.renderForms
                    });
                  }
                  render() {
                    this.container.classList.add("choiceWidgetAnnotation");
                    const storage = this.annotationStorage;
                    const id = this.data.id;
                    const storedData = storage.getValue(id, {
                      value: this.data.fieldValue
                    });
                    const selectElement = document.createElement("select");
                    GetElementsByNameSet.add(selectElement);
                    selectElement.setAttribute("data-element-id", id);
                    selectElement.disabled = this.data.readOnly;
                    this._setRequired(selectElement, this.data.required);
                    selectElement.name = this.data.fieldName;
                    selectElement.tabIndex = DEFAULT_TAB_INDEX;
                    let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;
                    if (!this.data.combo) {
                      selectElement.size = this.data.options.length;
                      if (this.data.multiSelect) {
                        selectElement.multiple = true;
                      }
                    }
                    selectElement.addEventListener("resetform", (event) => {
                      const defaultValue = this.data.defaultFieldValue;
                      for (const option of selectElement.options) {
                        option.selected = option.value === defaultValue;
                      }
                    });
                    for (const option of this.data.options) {
                      const optionElement = document.createElement("option");
                      optionElement.textContent = option.displayValue;
                      optionElement.value = option.exportValue;
                      if (storedData.value.includes(option.exportValue)) {
                        optionElement.setAttribute("selected", true);
                        addAnEmptyEntry = false;
                      }
                      selectElement.append(optionElement);
                    }
                    let removeEmptyEntry = null;
                    if (addAnEmptyEntry) {
                      const noneOptionElement = document.createElement("option");
                      noneOptionElement.value = " ";
                      noneOptionElement.setAttribute("hidden", true);
                      noneOptionElement.setAttribute("selected", true);
                      selectElement.prepend(noneOptionElement);
                      removeEmptyEntry = () => {
                        noneOptionElement.remove();
                        selectElement.removeEventListener("input", removeEmptyEntry);
                        removeEmptyEntry = null;
                      };
                      selectElement.addEventListener("input", removeEmptyEntry);
                    }
                    const getValue = (isExport) => {
                      const name = isExport ? "value" : "textContent";
                      const {
                        options,
                        multiple
                      } = selectElement;
                      if (!multiple) {
                        return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];
                      }
                      return Array.prototype.filter.call(options, (option) => option.selected).map((option) => option[name]);
                    };
                    let selectedValues = getValue(false);
                    const getItems = (event) => {
                      const options = event.target.options;
                      return Array.prototype.map.call(options, (option) => {
                        return {
                          displayValue: option.textContent,
                          exportValue: option.value
                        };
                      });
                    };
                    if (this.enableScripting && this.hasJSActions) {
                      selectElement.addEventListener("updatefromsandbox", (jsEvent) => {
                        const actions = {
                          value(event) {
                            removeEmptyEntry?.();
                            const value = event.detail.value;
                            const values = new Set(Array.isArray(value) ? value : [value]);
                            for (const option of selectElement.options) {
                              option.selected = values.has(option.value);
                            }
                            storage.setValue(id, {
                              value: getValue(true)
                            });
                            selectedValues = getValue(false);
                          },
                          multipleSelection(event) {
                            selectElement.multiple = true;
                          },
                          remove(event) {
                            const options = selectElement.options;
                            const index = event.detail.remove;
                            options[index].selected = false;
                            selectElement.remove(index);
                            if (options.length > 0) {
                              const i = Array.prototype.findIndex.call(options, (option) => option.selected);
                              if (i === -1) {
                                options[0].selected = true;
                              }
                            }
                            storage.setValue(id, {
                              value: getValue(true),
                              items: getItems(event)
                            });
                            selectedValues = getValue(false);
                          },
                          clear(event) {
                            while (selectElement.length !== 0) {
                              selectElement.remove(0);
                            }
                            storage.setValue(id, {
                              value: null,
                              items: []
                            });
                            selectedValues = getValue(false);
                          },
                          insert(event) {
                            const {
                              index,
                              displayValue,
                              exportValue
                            } = event.detail.insert;
                            const selectChild = selectElement.children[index];
                            const optionElement = document.createElement("option");
                            optionElement.textContent = displayValue;
                            optionElement.value = exportValue;
                            if (selectChild) {
                              selectChild.before(optionElement);
                            } else {
                              selectElement.append(optionElement);
                            }
                            storage.setValue(id, {
                              value: getValue(true),
                              items: getItems(event)
                            });
                            selectedValues = getValue(false);
                          },
                          items(event) {
                            const {
                              items
                            } = event.detail;
                            while (selectElement.length !== 0) {
                              selectElement.remove(0);
                            }
                            for (const item of items) {
                              const {
                                displayValue,
                                exportValue
                              } = item;
                              const optionElement = document.createElement("option");
                              optionElement.textContent = displayValue;
                              optionElement.value = exportValue;
                              selectElement.append(optionElement);
                            }
                            if (selectElement.options.length > 0) {
                              selectElement.options[0].selected = true;
                            }
                            storage.setValue(id, {
                              value: getValue(true),
                              items: getItems(event)
                            });
                            selectedValues = getValue(false);
                          },
                          indices(event) {
                            const indices = new Set(event.detail.indices);
                            for (const option of event.target.options) {
                              option.selected = indices.has(option.index);
                            }
                            storage.setValue(id, {
                              value: getValue(true)
                            });
                            selectedValues = getValue(false);
                          },
                          editable(event) {
                            event.target.disabled = !event.detail.editable;
                          }
                        };
                        this._dispatchEventFromSandbox(actions, jsEvent);
                      });
                      selectElement.addEventListener("input", (event) => {
                        const exportValue = getValue(true);
                        storage.setValue(id, {
                          value: exportValue
                        });
                        event.preventDefault();
                        this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                          source: this,
                          detail: {
                            id,
                            name: "Keystroke",
                            value: selectedValues,
                            changeEx: exportValue,
                            willCommit: false,
                            commitKey: 1,
                            keyDown: false
                          }
                        });
                      });
                      this._setEventListeners(selectElement, null, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"], ["input", "Validate"]], (event) => event.target.value);
                    } else {
                      selectElement.addEventListener("input", function(event) {
                        storage.setValue(id, {
                          value: getValue(true)
                        });
                      });
                    }
                    if (this.data.combo) {
                      this._setTextStyle(selectElement);
                    } else {
                    }
                    this._setBackgroundColor(selectElement);
                    this._setDefaultPropertiesFromJS(selectElement);
                    this.container.append(selectElement);
                    return this.container;
                  }
                }
                class PopupAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    const {
                      data,
                      elements
                    } = parameters;
                    super(parameters, {
                      isRenderable: AnnotationElement._hasPopupData(data)
                    });
                    this.elements = elements;
                  }
                  render() {
                    this.container.classList.add("popupAnnotation");
                    const popup = new PopupElement({
                      container: this.container,
                      color: this.data.color,
                      titleObj: this.data.titleObj,
                      modificationDate: this.data.modificationDate,
                      contentsObj: this.data.contentsObj,
                      richText: this.data.richText,
                      rect: this.data.rect,
                      parentRect: this.data.parentRect || null,
                      parent: this.parent,
                      elements: this.elements,
                      open: this.data.open
                    });
                    const elementIds = [];
                    for (const element of this.elements) {
                      element.popup = popup;
                      elementIds.push(element.data.id);
                      element.addHighlightArea();
                    }
                    this.container.setAttribute("aria-controls", elementIds.map((id) => `${_util2.AnnotationPrefix}${id}`).join(","));
                    return this.container;
                  }
                }
                class PopupElement {
                  #dateTimePromise = null;
                  #boundKeyDown = this.#keyDown.bind(this);
                  #boundHide = this.#hide.bind(this);
                  #boundShow = this.#show.bind(this);
                  #boundToggle = this.#toggle.bind(this);
                  #color = null;
                  #container = null;
                  #contentsObj = null;
                  #elements = null;
                  #parent = null;
                  #parentRect = null;
                  #pinned = false;
                  #popup = null;
                  #rect = null;
                  #richText = null;
                  #titleObj = null;
                  #wasVisible = false;
                  constructor({
                    container,
                    color,
                    elements,
                    titleObj,
                    modificationDate,
                    contentsObj,
                    richText,
                    parent,
                    rect,
                    parentRect,
                    open
                  }) {
                    this.#container = container;
                    this.#titleObj = titleObj;
                    this.#contentsObj = contentsObj;
                    this.#richText = richText;
                    this.#parent = parent;
                    this.#color = color;
                    this.#rect = rect;
                    this.#parentRect = parentRect;
                    this.#elements = elements;
                    const dateObject = _display_utils2.PDFDateString.toDateObject(modificationDate);
                    if (dateObject) {
                      this.#dateTimePromise = parent.l10n.get("annotation_date_string", {
                        date: dateObject.toLocaleDateString(),
                        time: dateObject.toLocaleTimeString()
                      });
                    }
                    this.trigger = elements.flatMap((e) => e.getElementsToTriggerPopup());
                    for (const element of this.trigger) {
                      element.addEventListener("click", this.#boundToggle);
                      element.addEventListener("mouseenter", this.#boundShow);
                      element.addEventListener("mouseleave", this.#boundHide);
                      element.classList.add("popupTriggerArea");
                    }
                    for (const element of elements) {
                      element.container?.addEventListener("keydown", this.#boundKeyDown);
                    }
                    this.#container.hidden = true;
                    if (open) {
                      this.#toggle();
                    }
                  }
                  render() {
                    if (this.#popup) {
                      return;
                    }
                    const {
                      page: {
                        view
                      },
                      viewport: {
                        rawDims: {
                          pageWidth,
                          pageHeight,
                          pageX,
                          pageY
                        }
                      }
                    } = this.#parent;
                    const popup = this.#popup = document.createElement("div");
                    popup.className = "popup";
                    if (this.#color) {
                      const baseColor = popup.style.outlineColor = _util2.Util.makeHexColor(...this.#color);
                      if (CSS.supports("background-color", "color-mix(in srgb, red 30%, white)")) {
                        popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;
                      } else {
                        const BACKGROUND_ENLIGHT = 0.7;
                        popup.style.backgroundColor = _util2.Util.makeHexColor(...this.#color.map((c) => Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)));
                      }
                    }
                    const header = document.createElement("span");
                    header.className = "header";
                    const title = document.createElement("h1");
                    header.append(title);
                    ({
                      dir: title.dir,
                      str: title.textContent
                    } = this.#titleObj);
                    popup.append(header);
                    if (this.#dateTimePromise) {
                      const modificationDate = document.createElement("span");
                      modificationDate.classList.add("popupDate");
                      this.#dateTimePromise.then((localized) => {
                        modificationDate.textContent = localized;
                      });
                      header.append(modificationDate);
                    }
                    const contentsObj = this.#contentsObj;
                    const richText = this.#richText;
                    if (richText?.str && (!contentsObj?.str || contentsObj.str === richText.str)) {
                      _xfa_layer.XfaLayer.render({
                        xfaHtml: richText.html,
                        intent: "richText",
                        div: popup
                      });
                      popup.lastChild.classList.add("richText", "popupContent");
                    } else {
                      const contents = this._formatContents(contentsObj);
                      popup.append(contents);
                    }
                    let useParentRect = !!this.#parentRect;
                    let rect = useParentRect ? this.#parentRect : this.#rect;
                    for (const element of this.#elements) {
                      if (!rect || _util2.Util.intersect(element.data.rect, rect) !== null) {
                        rect = element.data.rect;
                        useParentRect = true;
                        break;
                      }
                    }
                    const normalizedRect = _util2.Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);
                    const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;
                    const parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;
                    const popupLeft = normalizedRect[0] + parentWidth;
                    const popupTop = normalizedRect[1];
                    const {
                      style
                    } = this.#container;
                    style.left = `${100 * (popupLeft - pageX) / pageWidth}%`;
                    style.top = `${100 * (popupTop - pageY) / pageHeight}%`;
                    this.#container.append(popup);
                  }
                  _formatContents({
                    str,
                    dir
                  }) {
                    const p = document.createElement("p");
                    p.classList.add("popupContent");
                    p.dir = dir;
                    const lines = str.split(/(?:\r\n?|\n)/);
                    for (let i = 0, ii = lines.length; i < ii; ++i) {
                      const line = lines[i];
                      p.append(document.createTextNode(line));
                      if (i < ii - 1) {
                        p.append(document.createElement("br"));
                      }
                    }
                    return p;
                  }
                  #keyDown(event) {
                    if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {
                      return;
                    }
                    if (event.key === "Enter" || event.key === "Escape" && this.#pinned) {
                      this.#toggle();
                    }
                  }
                  #toggle() {
                    this.#pinned = !this.#pinned;
                    if (this.#pinned) {
                      this.#show();
                      this.#container.addEventListener("click", this.#boundToggle);
                      this.#container.addEventListener("keydown", this.#boundKeyDown);
                    } else {
                      this.#hide();
                      this.#container.removeEventListener("click", this.#boundToggle);
                      this.#container.removeEventListener("keydown", this.#boundKeyDown);
                    }
                  }
                  #show() {
                    if (!this.#popup) {
                      this.render();
                    }
                    if (!this.isVisible) {
                      this.#container.hidden = false;
                      this.#container.style.zIndex = parseInt(this.#container.style.zIndex) + 1e3;
                    } else if (this.#pinned) {
                      this.#container.classList.add("focused");
                    }
                  }
                  #hide() {
                    this.#container.classList.remove("focused");
                    if (this.#pinned || !this.isVisible) {
                      return;
                    }
                    this.#container.hidden = true;
                    this.#container.style.zIndex = parseInt(this.#container.style.zIndex) - 1e3;
                  }
                  forceHide() {
                    this.#wasVisible = this.isVisible;
                    if (!this.#wasVisible) {
                      return;
                    }
                    this.#container.hidden = true;
                  }
                  maybeShow() {
                    if (!this.#wasVisible) {
                      return;
                    }
                    this.#wasVisible = false;
                    this.#container.hidden = false;
                  }
                  get isVisible() {
                    return this.#container.hidden === false;
                  }
                }
                class FreeTextAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                    this.textContent = parameters.data.textContent;
                    this.textPosition = parameters.data.textPosition;
                    this.annotationEditorType = _util2.AnnotationEditorType.FREETEXT;
                  }
                  render() {
                    this.container.classList.add("freeTextAnnotation");
                    if (this.textContent) {
                      const content = document.createElement("div");
                      content.classList.add("annotationTextContent");
                      content.setAttribute("role", "comment");
                      for (const line of this.textContent) {
                        const lineSpan = document.createElement("span");
                        lineSpan.textContent = line;
                        content.append(lineSpan);
                      }
                      this.container.append(content);
                    }
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    this._editOnDoubleClick();
                    return this.container;
                  }
                }
                exports2.FreeTextAnnotationElement = FreeTextAnnotationElement;
                class LineAnnotationElement extends AnnotationElement {
                  #line = null;
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                  }
                  render() {
                    this.container.classList.add("lineAnnotation");
                    const data = this.data;
                    const {
                      width,
                      height
                    } = getRectDims(data.rect);
                    const svg = this.svgFactory.create(width, height, true);
                    const line = this.#line = this.svgFactory.createElement("svg:line");
                    line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);
                    line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);
                    line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);
                    line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);
                    line.setAttribute("stroke-width", data.borderStyle.width || 1);
                    line.setAttribute("stroke", "transparent");
                    line.setAttribute("fill", "transparent");
                    svg.append(line);
                    this.container.append(svg);
                    if (!data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    return this.container;
                  }
                  getElementsToTriggerPopup() {
                    return this.#line;
                  }
                  addHighlightArea() {
                    this.container.classList.add("highlightArea");
                  }
                }
                class SquareAnnotationElement extends AnnotationElement {
                  #square = null;
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                  }
                  render() {
                    this.container.classList.add("squareAnnotation");
                    const data = this.data;
                    const {
                      width,
                      height
                    } = getRectDims(data.rect);
                    const svg = this.svgFactory.create(width, height, true);
                    const borderWidth = data.borderStyle.width;
                    const square = this.#square = this.svgFactory.createElement("svg:rect");
                    square.setAttribute("x", borderWidth / 2);
                    square.setAttribute("y", borderWidth / 2);
                    square.setAttribute("width", width - borderWidth);
                    square.setAttribute("height", height - borderWidth);
                    square.setAttribute("stroke-width", borderWidth || 1);
                    square.setAttribute("stroke", "transparent");
                    square.setAttribute("fill", "transparent");
                    svg.append(square);
                    this.container.append(svg);
                    if (!data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    return this.container;
                  }
                  getElementsToTriggerPopup() {
                    return this.#square;
                  }
                  addHighlightArea() {
                    this.container.classList.add("highlightArea");
                  }
                }
                class CircleAnnotationElement extends AnnotationElement {
                  #circle = null;
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                  }
                  render() {
                    this.container.classList.add("circleAnnotation");
                    const data = this.data;
                    const {
                      width,
                      height
                    } = getRectDims(data.rect);
                    const svg = this.svgFactory.create(width, height, true);
                    const borderWidth = data.borderStyle.width;
                    const circle = this.#circle = this.svgFactory.createElement("svg:ellipse");
                    circle.setAttribute("cx", width / 2);
                    circle.setAttribute("cy", height / 2);
                    circle.setAttribute("rx", width / 2 - borderWidth / 2);
                    circle.setAttribute("ry", height / 2 - borderWidth / 2);
                    circle.setAttribute("stroke-width", borderWidth || 1);
                    circle.setAttribute("stroke", "transparent");
                    circle.setAttribute("fill", "transparent");
                    svg.append(circle);
                    this.container.append(svg);
                    if (!data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    return this.container;
                  }
                  getElementsToTriggerPopup() {
                    return this.#circle;
                  }
                  addHighlightArea() {
                    this.container.classList.add("highlightArea");
                  }
                }
                class PolylineAnnotationElement extends AnnotationElement {
                  #polyline = null;
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                    this.containerClassName = "polylineAnnotation";
                    this.svgElementName = "svg:polyline";
                  }
                  render() {
                    this.container.classList.add(this.containerClassName);
                    const data = this.data;
                    const {
                      width,
                      height
                    } = getRectDims(data.rect);
                    const svg = this.svgFactory.create(width, height, true);
                    let points = [];
                    for (const coordinate of data.vertices) {
                      const x = coordinate.x - data.rect[0];
                      const y = data.rect[3] - coordinate.y;
                      points.push(x + "," + y);
                    }
                    points = points.join(" ");
                    const polyline = this.#polyline = this.svgFactory.createElement(this.svgElementName);
                    polyline.setAttribute("points", points);
                    polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
                    polyline.setAttribute("stroke", "transparent");
                    polyline.setAttribute("fill", "transparent");
                    svg.append(polyline);
                    this.container.append(svg);
                    if (!data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    return this.container;
                  }
                  getElementsToTriggerPopup() {
                    return this.#polyline;
                  }
                  addHighlightArea() {
                    this.container.classList.add("highlightArea");
                  }
                }
                class PolygonAnnotationElement extends PolylineAnnotationElement {
                  constructor(parameters) {
                    super(parameters);
                    this.containerClassName = "polygonAnnotation";
                    this.svgElementName = "svg:polygon";
                  }
                }
                class CaretAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                  }
                  render() {
                    this.container.classList.add("caretAnnotation");
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    return this.container;
                  }
                }
                class InkAnnotationElement extends AnnotationElement {
                  #polylines = [];
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                    this.containerClassName = "inkAnnotation";
                    this.svgElementName = "svg:polyline";
                    this.annotationEditorType = _util2.AnnotationEditorType.INK;
                  }
                  render() {
                    this.container.classList.add(this.containerClassName);
                    const data = this.data;
                    const {
                      width,
                      height
                    } = getRectDims(data.rect);
                    const svg = this.svgFactory.create(width, height, true);
                    for (const inkList of data.inkLists) {
                      let points = [];
                      for (const coordinate of inkList) {
                        const x = coordinate.x - data.rect[0];
                        const y = data.rect[3] - coordinate.y;
                        points.push(`${x},${y}`);
                      }
                      points = points.join(" ");
                      const polyline = this.svgFactory.createElement(this.svgElementName);
                      this.#polylines.push(polyline);
                      polyline.setAttribute("points", points);
                      polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
                      polyline.setAttribute("stroke", "transparent");
                      polyline.setAttribute("fill", "transparent");
                      if (!data.popupRef && this.hasPopupData) {
                        this._createPopup();
                      }
                      svg.append(polyline);
                    }
                    this.container.append(svg);
                    return this.container;
                  }
                  getElementsToTriggerPopup() {
                    return this.#polylines;
                  }
                  addHighlightArea() {
                    this.container.classList.add("highlightArea");
                  }
                }
                exports2.InkAnnotationElement = InkAnnotationElement;
                class HighlightAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true,
                      createQuadrilaterals: true
                    });
                  }
                  render() {
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    this.container.classList.add("highlightAnnotation");
                    return this.container;
                  }
                }
                class UnderlineAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true,
                      createQuadrilaterals: true
                    });
                  }
                  render() {
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    this.container.classList.add("underlineAnnotation");
                    return this.container;
                  }
                }
                class SquigglyAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true,
                      createQuadrilaterals: true
                    });
                  }
                  render() {
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    this.container.classList.add("squigglyAnnotation");
                    return this.container;
                  }
                }
                class StrikeOutAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true,
                      createQuadrilaterals: true
                    });
                  }
                  render() {
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    this.container.classList.add("strikeoutAnnotation");
                    return this.container;
                  }
                }
                class StampAnnotationElement extends AnnotationElement {
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true,
                      ignoreBorder: true
                    });
                  }
                  render() {
                    this.container.classList.add("stampAnnotation");
                    if (!this.data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    }
                    return this.container;
                  }
                }
                exports2.StampAnnotationElement = StampAnnotationElement;
                class FileAttachmentAnnotationElement extends AnnotationElement {
                  #trigger = null;
                  constructor(parameters) {
                    super(parameters, {
                      isRenderable: true
                    });
                    const {
                      filename,
                      content
                    } = this.data.file;
                    this.filename = (0, _display_utils2.getFilenameFromUrl)(filename, true);
                    this.content = content;
                    this.linkService.eventBus?.dispatch("fileattachmentannotation", {
                      source: this,
                      filename,
                      content
                    });
                  }
                  render() {
                    this.container.classList.add("fileAttachmentAnnotation");
                    const {
                      container,
                      data
                    } = this;
                    let trigger;
                    if (data.hasAppearance || data.fillAlpha === 0) {
                      trigger = document.createElement("div");
                    } else {
                      trigger = document.createElement("img");
                      trigger.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data.name) ? "paperclip" : "pushpin"}.svg`;
                      if (data.fillAlpha && data.fillAlpha < 1) {
                        trigger.style = `filter: opacity(${Math.round(data.fillAlpha * 100)}%);`;
                      }
                    }
                    trigger.addEventListener("dblclick", this.#download.bind(this));
                    this.#trigger = trigger;
                    const {
                      isMac
                    } = _util2.FeatureTest.platform;
                    container.addEventListener("keydown", (evt) => {
                      if (evt.key === "Enter" && (isMac ? evt.metaKey : evt.ctrlKey)) {
                        this.#download();
                      }
                    });
                    if (!data.popupRef && this.hasPopupData) {
                      this._createPopup();
                    } else {
                      trigger.classList.add("popupTriggerArea");
                    }
                    container.append(trigger);
                    return container;
                  }
                  getElementsToTriggerPopup() {
                    return this.#trigger;
                  }
                  addHighlightArea() {
                    this.container.classList.add("highlightArea");
                  }
                  #download() {
                    this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);
                  }
                }
                class AnnotationLayer {
                  #accessibilityManager = null;
                  #annotationCanvasMap = null;
                  #editableAnnotations = /* @__PURE__ */ new Map();
                  constructor({
                    div,
                    accessibilityManager,
                    annotationCanvasMap,
                    l10n,
                    page,
                    viewport
                  }) {
                    this.div = div;
                    this.#accessibilityManager = accessibilityManager;
                    this.#annotationCanvasMap = annotationCanvasMap;
                    this.l10n = l10n;
                    this.page = page;
                    this.viewport = viewport;
                    this.zIndex = 0;
                    this.l10n ||= _displayL10n_utils.NullL10n;
                  }
                  #appendElement(element, id) {
                    const contentElement = element.firstChild || element;
                    contentElement.id = `${_util2.AnnotationPrefix}${id}`;
                    this.div.append(element);
                    this.#accessibilityManager?.moveElementInDOM(this.div, element, contentElement, false);
                  }
                  async render(params) {
                    const {
                      annotations
                    } = params;
                    const layer = this.div;
                    (0, _display_utils2.setLayerDimensions)(layer, this.viewport);
                    const popupToElements = /* @__PURE__ */ new Map();
                    const elementParams = {
                      data: null,
                      layer,
                      linkService: params.linkService,
                      downloadManager: params.downloadManager,
                      imageResourcesPath: params.imageResourcesPath || "",
                      renderForms: params.renderForms !== false,
                      svgFactory: new _display_utils2.DOMSVGFactory(),
                      annotationStorage: params.annotationStorage || new _annotation_storage2.AnnotationStorage(),
                      enableScripting: params.enableScripting === true,
                      hasJSActions: params.hasJSActions,
                      fieldObjects: params.fieldObjects,
                      parent: this,
                      elements: null
                    };
                    for (const data of annotations) {
                      if (data.noHTML) {
                        continue;
                      }
                      const isPopupAnnotation = data.annotationType === _util2.AnnotationType.POPUP;
                      if (!isPopupAnnotation) {
                        const {
                          width,
                          height
                        } = getRectDims(data.rect);
                        if (width <= 0 || height <= 0) {
                          continue;
                        }
                      } else {
                        const elements = popupToElements.get(data.id);
                        if (!elements) {
                          continue;
                        }
                        elementParams.elements = elements;
                      }
                      elementParams.data = data;
                      const element = AnnotationElementFactory.create(elementParams);
                      if (!element.isRenderable) {
                        continue;
                      }
                      if (!isPopupAnnotation && data.popupRef) {
                        const elements = popupToElements.get(data.popupRef);
                        if (!elements) {
                          popupToElements.set(data.popupRef, [element]);
                        } else {
                          elements.push(element);
                        }
                      }
                      if (element.annotationEditorType > 0) {
                        this.#editableAnnotations.set(element.data.id, element);
                      }
                      const rendered = element.render();
                      if (data.hidden) {
                        rendered.style.visibility = "hidden";
                      }
                      this.#appendElement(rendered, data.id);
                    }
                    this.#setAnnotationCanvasMap();
                    await this.l10n.translate(layer);
                  }
                  update({
                    viewport
                  }) {
                    const layer = this.div;
                    this.viewport = viewport;
                    (0, _display_utils2.setLayerDimensions)(layer, {
                      rotation: viewport.rotation
                    });
                    this.#setAnnotationCanvasMap();
                    layer.hidden = false;
                  }
                  #setAnnotationCanvasMap() {
                    if (!this.#annotationCanvasMap) {
                      return;
                    }
                    const layer = this.div;
                    for (const [id, canvas] of this.#annotationCanvasMap) {
                      const element = layer.querySelector(`[data-annotation-id="${id}"]`);
                      if (!element) {
                        continue;
                      }
                      const {
                        firstChild
                      } = element;
                      if (!firstChild) {
                        element.append(canvas);
                      } else if (firstChild.nodeName === "CANVAS") {
                        firstChild.replaceWith(canvas);
                      } else {
                        firstChild.before(canvas);
                      }
                    }
                    this.#annotationCanvasMap.clear();
                  }
                  getEditableAnnotations() {
                    return Array.from(this.#editableAnnotations.values());
                  }
                  getEditableAnnotation(id) {
                    return this.#editableAnnotations.get(id);
                  }
                }
                exports2.AnnotationLayer = AnnotationLayer;
              },
              /* 30 */
              /***/
              (__unused_webpack_module2, exports2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.ColorConverters = void 0;
                function makeColorComp(n) {
                  return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, "0");
                }
                function scaleAndClamp(x) {
                  return Math.max(0, Math.min(255, 255 * x));
                }
                class ColorConverters {
                  static CMYK_G([c, y, m, k]) {
                    return ["G", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];
                  }
                  static G_CMYK([g]) {
                    return ["CMYK", 0, 0, 0, 1 - g];
                  }
                  static G_RGB([g]) {
                    return ["RGB", g, g, g];
                  }
                  static G_rgb([g]) {
                    g = scaleAndClamp(g);
                    return [g, g, g];
                  }
                  static G_HTML([g]) {
                    const G = makeColorComp(g);
                    return `#${G}${G}${G}`;
                  }
                  static RGB_G([r, g, b]) {
                    return ["G", 0.3 * r + 0.59 * g + 0.11 * b];
                  }
                  static RGB_rgb(color) {
                    return color.map(scaleAndClamp);
                  }
                  static RGB_HTML(color) {
                    return `#${color.map(makeColorComp).join("")}`;
                  }
                  static T_HTML() {
                    return "#00000000";
                  }
                  static T_rgb() {
                    return [null];
                  }
                  static CMYK_RGB([c, y, m, k]) {
                    return ["RGB", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];
                  }
                  static CMYK_rgb([c, y, m, k]) {
                    return [scaleAndClamp(1 - Math.min(1, c + k)), scaleAndClamp(1 - Math.min(1, m + k)), scaleAndClamp(1 - Math.min(1, y + k))];
                  }
                  static CMYK_HTML(components) {
                    const rgb = this.CMYK_RGB(components).slice(1);
                    return this.RGB_HTML(rgb);
                  }
                  static RGB_CMYK([r, g, b]) {
                    const c = 1 - r;
                    const m = 1 - g;
                    const y = 1 - b;
                    const k = Math.min(c, m, y);
                    return ["CMYK", c, m, y, k];
                  }
                }
                exports2.ColorConverters = ColorConverters;
              },
              /* 31 */
              /***/
              (__unused_webpack_module2, exports2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.NullL10n = void 0;
                exports2.getL10nFallback = getL10nFallback;
                const DEFAULT_L10N_STRINGS = {
                  of_pages: "of {{pagesCount}}",
                  page_of_pages: "({{pageNumber}} of {{pagesCount}})",
                  document_properties_kb: "{{size_kb}} KB ({{size_b}} bytes)",
                  document_properties_mb: "{{size_mb}} MB ({{size_b}} bytes)",
                  document_properties_date_string: "{{date}}, {{time}}",
                  document_properties_page_size_unit_inches: "in",
                  document_properties_page_size_unit_millimeters: "mm",
                  document_properties_page_size_orientation_portrait: "portrait",
                  document_properties_page_size_orientation_landscape: "landscape",
                  document_properties_page_size_name_a3: "A3",
                  document_properties_page_size_name_a4: "A4",
                  document_properties_page_size_name_letter: "Letter",
                  document_properties_page_size_name_legal: "Legal",
                  document_properties_page_size_dimension_string: "{{width}} \xD7 {{height}} {{unit}} ({{orientation}})",
                  document_properties_page_size_dimension_name_string: "{{width}} \xD7 {{height}} {{unit}} ({{name}}, {{orientation}})",
                  document_properties_linearized_yes: "Yes",
                  document_properties_linearized_no: "No",
                  additional_layers: "Additional Layers",
                  page_landmark: "Page {{page}}",
                  thumb_page_title: "Page {{page}}",
                  thumb_page_canvas: "Thumbnail of Page {{page}}",
                  find_reached_top: "Reached top of document, continued from bottom",
                  find_reached_bottom: "Reached end of document, continued from top",
                  "find_match_count[one]": "{{current}} of {{total}} match",
                  "find_match_count[other]": "{{current}} of {{total}} matches",
                  "find_match_count_limit[one]": "More than {{limit}} match",
                  "find_match_count_limit[other]": "More than {{limit}} matches",
                  find_not_found: "Phrase not found",
                  page_scale_width: "Page Width",
                  page_scale_fit: "Page Fit",
                  page_scale_auto: "Automatic Zoom",
                  page_scale_actual: "Actual Size",
                  page_scale_percent: "{{scale}}%",
                  loading_error: "An error occurred while loading the PDF.",
                  invalid_file_error: "Invalid or corrupted PDF file.",
                  missing_file_error: "Missing PDF file.",
                  unexpected_response_error: "Unexpected server response.",
                  rendering_error: "An error occurred while rendering the page.",
                  annotation_date_string: "{{date}}, {{time}}",
                  printing_not_supported: "Warning: Printing is not fully supported by this browser.",
                  printing_not_ready: "Warning: The PDF is not fully loaded for printing.",
                  web_fonts_disabled: "Web fonts are disabled: unable to use embedded PDF fonts.",
                  free_text2_default_content: "Start typing\u2026",
                  editor_free_text2_aria_label: "Text Editor",
                  editor_ink2_aria_label: "Draw Editor",
                  editor_ink_canvas_aria_label: "User-created image",
                  editor_alt_text_button_label: "Alt text",
                  editor_alt_text_edit_button_label: "Edit alt text",
                  editor_alt_text_decorative_tooltip: "Marked as decorative"
                };
                {
                  DEFAULT_L10N_STRINGS.print_progress_percent = "{{progress}}%";
                }
                function getL10nFallback(key, args) {
                  switch (key) {
                    case "find_match_count":
                      key = `find_match_count[${args.total === 1 ? "one" : "other"}]`;
                      break;
                    case "find_match_count_limit":
                      key = `find_match_count_limit[${args.limit === 1 ? "one" : "other"}]`;
                      break;
                  }
                  return DEFAULT_L10N_STRINGS[key] || "";
                }
                function formatL10nValue(text, args) {
                  if (!args) {
                    return text;
                  }
                  return text.replaceAll(/\{\{\s*(\w+)\s*\}\}/g, (all, name) => {
                    return name in args ? args[name] : "{{" + name + "}}";
                  });
                }
                const NullL10n = {
                  async getLanguage() {
                    return "en-us";
                  },
                  async getDirection() {
                    return "ltr";
                  },
                  async get(key, args = null, fallback = getL10nFallback(key, args)) {
                    return formatL10nValue(fallback, args);
                  },
                  async translate(element) {
                  }
                };
                exports2.NullL10n = NullL10n;
              },
              /* 32 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.XfaLayer = void 0;
                var _xfa_text2 = __w_pdfjs_require__2(25);
                class XfaLayer {
                  static setupStorage(html, id, element, storage, intent) {
                    const storedData = storage.getValue(id, {
                      value: null
                    });
                    switch (element.name) {
                      case "textarea":
                        if (storedData.value !== null) {
                          html.textContent = storedData.value;
                        }
                        if (intent === "print") {
                          break;
                        }
                        html.addEventListener("input", (event) => {
                          storage.setValue(id, {
                            value: event.target.value
                          });
                        });
                        break;
                      case "input":
                        if (element.attributes.type === "radio" || element.attributes.type === "checkbox") {
                          if (storedData.value === element.attributes.xfaOn) {
                            html.setAttribute("checked", true);
                          } else if (storedData.value === element.attributes.xfaOff) {
                            html.removeAttribute("checked");
                          }
                          if (intent === "print") {
                            break;
                          }
                          html.addEventListener("change", (event) => {
                            storage.setValue(id, {
                              value: event.target.checked ? event.target.getAttribute("xfaOn") : event.target.getAttribute("xfaOff")
                            });
                          });
                        } else {
                          if (storedData.value !== null) {
                            html.setAttribute("value", storedData.value);
                          }
                          if (intent === "print") {
                            break;
                          }
                          html.addEventListener("input", (event) => {
                            storage.setValue(id, {
                              value: event.target.value
                            });
                          });
                        }
                        break;
                      case "select":
                        if (storedData.value !== null) {
                          html.setAttribute("value", storedData.value);
                          for (const option of element.children) {
                            if (option.attributes.value === storedData.value) {
                              option.attributes.selected = true;
                            } else if (option.attributes.hasOwnProperty("selected")) {
                              delete option.attributes.selected;
                            }
                          }
                        }
                        html.addEventListener("input", (event) => {
                          const options = event.target.options;
                          const value = options.selectedIndex === -1 ? "" : options[options.selectedIndex].value;
                          storage.setValue(id, {
                            value
                          });
                        });
                        break;
                    }
                  }
                  static setAttributes({
                    html,
                    element,
                    storage = null,
                    intent,
                    linkService
                  }) {
                    const {
                      attributes
                    } = element;
                    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;
                    if (attributes.type === "radio") {
                      attributes.name = `${attributes.name}-${intent}`;
                    }
                    for (const [key, value] of Object.entries(attributes)) {
                      if (value === null || value === void 0) {
                        continue;
                      }
                      switch (key) {
                        case "class":
                          if (value.length) {
                            html.setAttribute(key, value.join(" "));
                          }
                          break;
                        case "dataId":
                          break;
                        case "id":
                          html.setAttribute("data-element-id", value);
                          break;
                        case "style":
                          Object.assign(html.style, value);
                          break;
                        case "textContent":
                          html.textContent = value;
                          break;
                        default:
                          if (!isHTMLAnchorElement || key !== "href" && key !== "newWindow") {
                            html.setAttribute(key, value);
                          }
                      }
                    }
                    if (isHTMLAnchorElement) {
                      linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);
                    }
                    if (storage && attributes.dataId) {
                      this.setupStorage(html, attributes.dataId, element, storage);
                    }
                  }
                  static render(parameters) {
                    const storage = parameters.annotationStorage;
                    const linkService = parameters.linkService;
                    const root = parameters.xfaHtml;
                    const intent = parameters.intent || "display";
                    const rootHtml = document.createElement(root.name);
                    if (root.attributes) {
                      this.setAttributes({
                        html: rootHtml,
                        element: root,
                        intent,
                        linkService
                      });
                    }
                    const stack = [[root, -1, rootHtml]];
                    const rootDiv = parameters.div;
                    rootDiv.append(rootHtml);
                    if (parameters.viewport) {
                      const transform = `matrix(${parameters.viewport.transform.join(",")})`;
                      rootDiv.style.transform = transform;
                    }
                    if (intent !== "richText") {
                      rootDiv.setAttribute("class", "xfaLayer xfaFont");
                    }
                    const textDivs = [];
                    while (stack.length > 0) {
                      const [parent, i, html] = stack.at(-1);
                      if (i + 1 === parent.children.length) {
                        stack.pop();
                        continue;
                      }
                      const child = parent.children[++stack.at(-1)[1]];
                      if (child === null) {
                        continue;
                      }
                      const {
                        name
                      } = child;
                      if (name === "#text") {
                        const node = document.createTextNode(child.value);
                        textDivs.push(node);
                        html.append(node);
                        continue;
                      }
                      const childHtml = child?.attributes?.xmlns ? document.createElementNS(child.attributes.xmlns, name) : document.createElement(name);
                      html.append(childHtml);
                      if (child.attributes) {
                        this.setAttributes({
                          html: childHtml,
                          element: child,
                          storage,
                          intent,
                          linkService
                        });
                      }
                      if (child.children && child.children.length > 0) {
                        stack.push([child, -1, childHtml]);
                      } else if (child.value) {
                        const node = document.createTextNode(child.value);
                        if (_xfa_text2.XfaText.shouldBuildText(name)) {
                          textDivs.push(node);
                        }
                        childHtml.append(node);
                      }
                    }
                    for (const el of rootDiv.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea")) {
                      el.setAttribute("readOnly", true);
                    }
                    return {
                      textDivs
                    };
                  }
                  static update(parameters) {
                    const transform = `matrix(${parameters.viewport.transform.join(",")})`;
                    parameters.div.style.transform = transform;
                    parameters.div.hidden = false;
                  }
                }
                exports2.XfaLayer = XfaLayer;
              },
              /* 33 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.InkEditor = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _editor = __w_pdfjs_require__2(4);
                var _annotation_layer = __w_pdfjs_require__2(29);
                var _display_utils2 = __w_pdfjs_require__2(6);
                var _tools = __w_pdfjs_require__2(5);
                class InkEditor extends _editor.AnnotationEditor {
                  #baseHeight = 0;
                  #baseWidth = 0;
                  #boundCanvasPointermove = this.canvasPointermove.bind(this);
                  #boundCanvasPointerleave = this.canvasPointerleave.bind(this);
                  #boundCanvasPointerup = this.canvasPointerup.bind(this);
                  #boundCanvasPointerdown = this.canvasPointerdown.bind(this);
                  #currentPath2D = new Path2D();
                  #disableEditing = false;
                  #hasSomethingToDraw = false;
                  #isCanvasInitialized = false;
                  #observer = null;
                  #realWidth = 0;
                  #realHeight = 0;
                  #requestFrameCallback = null;
                  static _defaultColor = null;
                  static _defaultOpacity = 1;
                  static _defaultThickness = 1;
                  static _type = "ink";
                  constructor(params) {
                    super({
                      ...params,
                      name: "inkEditor"
                    });
                    this.color = params.color || null;
                    this.thickness = params.thickness || null;
                    this.opacity = params.opacity || null;
                    this.paths = [];
                    this.bezierPath2D = [];
                    this.allRawPaths = [];
                    this.currentPath = [];
                    this.scaleFactor = 1;
                    this.translationX = this.translationY = 0;
                    this.x = 0;
                    this.y = 0;
                    this._willKeepAspectRatio = true;
                  }
                  static initialize(l10n) {
                    _editor.AnnotationEditor.initialize(l10n, {
                      strings: ["editor_ink_canvas_aria_label", "editor_ink2_aria_label"]
                    });
                  }
                  static updateDefaultParams(type, value) {
                    switch (type) {
                      case _util2.AnnotationEditorParamsType.INK_THICKNESS:
                        InkEditor._defaultThickness = value;
                        break;
                      case _util2.AnnotationEditorParamsType.INK_COLOR:
                        InkEditor._defaultColor = value;
                        break;
                      case _util2.AnnotationEditorParamsType.INK_OPACITY:
                        InkEditor._defaultOpacity = value / 100;
                        break;
                    }
                  }
                  updateParams(type, value) {
                    switch (type) {
                      case _util2.AnnotationEditorParamsType.INK_THICKNESS:
                        this.#updateThickness(value);
                        break;
                      case _util2.AnnotationEditorParamsType.INK_COLOR:
                        this.#updateColor(value);
                        break;
                      case _util2.AnnotationEditorParamsType.INK_OPACITY:
                        this.#updateOpacity(value);
                        break;
                    }
                  }
                  static get defaultPropertiesToUpdate() {
                    return [[_util2.AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness], [_util2.AnnotationEditorParamsType.INK_COLOR, InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor], [_util2.AnnotationEditorParamsType.INK_OPACITY, Math.round(InkEditor._defaultOpacity * 100)]];
                  }
                  get propertiesToUpdate() {
                    return [[_util2.AnnotationEditorParamsType.INK_THICKNESS, this.thickness || InkEditor._defaultThickness], [_util2.AnnotationEditorParamsType.INK_COLOR, this.color || InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor], [_util2.AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity))]];
                  }
                  #updateThickness(thickness) {
                    const savedThickness = this.thickness;
                    this.addCommands({
                      cmd: () => {
                        this.thickness = thickness;
                        this.#fitToContent();
                      },
                      undo: () => {
                        this.thickness = savedThickness;
                        this.#fitToContent();
                      },
                      mustExec: true,
                      type: _util2.AnnotationEditorParamsType.INK_THICKNESS,
                      overwriteIfSameType: true,
                      keepUndo: true
                    });
                  }
                  #updateColor(color) {
                    const savedColor = this.color;
                    this.addCommands({
                      cmd: () => {
                        this.color = color;
                        this.#redraw();
                      },
                      undo: () => {
                        this.color = savedColor;
                        this.#redraw();
                      },
                      mustExec: true,
                      type: _util2.AnnotationEditorParamsType.INK_COLOR,
                      overwriteIfSameType: true,
                      keepUndo: true
                    });
                  }
                  #updateOpacity(opacity) {
                    opacity /= 100;
                    const savedOpacity = this.opacity;
                    this.addCommands({
                      cmd: () => {
                        this.opacity = opacity;
                        this.#redraw();
                      },
                      undo: () => {
                        this.opacity = savedOpacity;
                        this.#redraw();
                      },
                      mustExec: true,
                      type: _util2.AnnotationEditorParamsType.INK_OPACITY,
                      overwriteIfSameType: true,
                      keepUndo: true
                    });
                  }
                  rebuild() {
                    if (!this.parent) {
                      return;
                    }
                    super.rebuild();
                    if (this.div === null) {
                      return;
                    }
                    if (!this.canvas) {
                      this.#createCanvas();
                      this.#createObserver();
                    }
                    if (!this.isAttachedToDOM) {
                      this.parent.add(this);
                      this.#setCanvasDims();
                    }
                    this.#fitToContent();
                  }
                  remove() {
                    if (this.canvas === null) {
                      return;
                    }
                    if (!this.isEmpty()) {
                      this.commit();
                    }
                    this.canvas.width = this.canvas.height = 0;
                    this.canvas.remove();
                    this.canvas = null;
                    this.#observer.disconnect();
                    this.#observer = null;
                    super.remove();
                  }
                  setParent(parent) {
                    if (!this.parent && parent) {
                      this._uiManager.removeShouldRescale(this);
                    } else if (this.parent && parent === null) {
                      this._uiManager.addShouldRescale(this);
                    }
                    super.setParent(parent);
                  }
                  onScaleChanging() {
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    const width = this.width * parentWidth;
                    const height = this.height * parentHeight;
                    this.setDimensions(width, height);
                  }
                  enableEditMode() {
                    if (this.#disableEditing || this.canvas === null) {
                      return;
                    }
                    super.enableEditMode();
                    this._isDraggable = false;
                    this.canvas.addEventListener("pointerdown", this.#boundCanvasPointerdown);
                  }
                  disableEditMode() {
                    if (!this.isInEditMode() || this.canvas === null) {
                      return;
                    }
                    super.disableEditMode();
                    this._isDraggable = !this.isEmpty();
                    this.div.classList.remove("editing");
                    this.canvas.removeEventListener("pointerdown", this.#boundCanvasPointerdown);
                  }
                  onceAdded() {
                    this._isDraggable = !this.isEmpty();
                  }
                  isEmpty() {
                    return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;
                  }
                  #getInitialBBox() {
                    const {
                      parentRotation,
                      parentDimensions: [width, height]
                    } = this;
                    switch (parentRotation) {
                      case 90:
                        return [0, height, height, width];
                      case 180:
                        return [width, height, width, height];
                      case 270:
                        return [width, 0, height, width];
                      default:
                        return [0, 0, width, height];
                    }
                  }
                  #setStroke() {
                    const {
                      ctx,
                      color,
                      opacity,
                      thickness,
                      parentScale,
                      scaleFactor
                    } = this;
                    ctx.lineWidth = thickness * parentScale / scaleFactor;
                    ctx.lineCap = "round";
                    ctx.lineJoin = "round";
                    ctx.miterLimit = 10;
                    ctx.strokeStyle = `${color}${(0, _tools.opacityToHex)(opacity)}`;
                  }
                  #startDrawing(x, y) {
                    this.canvas.addEventListener("contextmenu", _display_utils2.noContextMenu);
                    this.canvas.addEventListener("pointerleave", this.#boundCanvasPointerleave);
                    this.canvas.addEventListener("pointermove", this.#boundCanvasPointermove);
                    this.canvas.addEventListener("pointerup", this.#boundCanvasPointerup);
                    this.canvas.removeEventListener("pointerdown", this.#boundCanvasPointerdown);
                    this.isEditing = true;
                    if (!this.#isCanvasInitialized) {
                      this.#isCanvasInitialized = true;
                      this.#setCanvasDims();
                      this.thickness ||= InkEditor._defaultThickness;
                      this.color ||= InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor;
                      this.opacity ??= InkEditor._defaultOpacity;
                    }
                    this.currentPath.push([x, y]);
                    this.#hasSomethingToDraw = false;
                    this.#setStroke();
                    this.#requestFrameCallback = () => {
                      this.#drawPoints();
                      if (this.#requestFrameCallback) {
                        window.requestAnimationFrame(this.#requestFrameCallback);
                      }
                    };
                    window.requestAnimationFrame(this.#requestFrameCallback);
                  }
                  #draw(x, y) {
                    const [lastX, lastY] = this.currentPath.at(-1);
                    if (this.currentPath.length > 1 && x === lastX && y === lastY) {
                      return;
                    }
                    const currentPath = this.currentPath;
                    let path2D = this.#currentPath2D;
                    currentPath.push([x, y]);
                    this.#hasSomethingToDraw = true;
                    if (currentPath.length <= 2) {
                      path2D.moveTo(...currentPath[0]);
                      path2D.lineTo(x, y);
                      return;
                    }
                    if (currentPath.length === 3) {
                      this.#currentPath2D = path2D = new Path2D();
                      path2D.moveTo(...currentPath[0]);
                    }
                    this.#makeBezierCurve(path2D, ...currentPath.at(-3), ...currentPath.at(-2), x, y);
                  }
                  #endPath() {
                    if (this.currentPath.length === 0) {
                      return;
                    }
                    const lastPoint = this.currentPath.at(-1);
                    this.#currentPath2D.lineTo(...lastPoint);
                  }
                  #stopDrawing(x, y) {
                    this.#requestFrameCallback = null;
                    x = Math.min(Math.max(x, 0), this.canvas.width);
                    y = Math.min(Math.max(y, 0), this.canvas.height);
                    this.#draw(x, y);
                    this.#endPath();
                    let bezier;
                    if (this.currentPath.length !== 1) {
                      bezier = this.#generateBezierPoints();
                    } else {
                      const xy = [x, y];
                      bezier = [[xy, xy.slice(), xy.slice(), xy]];
                    }
                    const path2D = this.#currentPath2D;
                    const currentPath = this.currentPath;
                    this.currentPath = [];
                    this.#currentPath2D = new Path2D();
                    const cmd = () => {
                      this.allRawPaths.push(currentPath);
                      this.paths.push(bezier);
                      this.bezierPath2D.push(path2D);
                      this.rebuild();
                    };
                    const undo = () => {
                      this.allRawPaths.pop();
                      this.paths.pop();
                      this.bezierPath2D.pop();
                      if (this.paths.length === 0) {
                        this.remove();
                      } else {
                        if (!this.canvas) {
                          this.#createCanvas();
                          this.#createObserver();
                        }
                        this.#fitToContent();
                      }
                    };
                    this.addCommands({
                      cmd,
                      undo,
                      mustExec: true
                    });
                  }
                  #drawPoints() {
                    if (!this.#hasSomethingToDraw) {
                      return;
                    }
                    this.#hasSomethingToDraw = false;
                    const thickness = Math.ceil(this.thickness * this.parentScale);
                    const lastPoints = this.currentPath.slice(-3);
                    const x = lastPoints.map((xy) => xy[0]);
                    const y = lastPoints.map((xy) => xy[1]);
                    const xMin = Math.min(...x) - thickness;
                    const xMax = Math.max(...x) + thickness;
                    const yMin = Math.min(...y) - thickness;
                    const yMax = Math.max(...y) + thickness;
                    const {
                      ctx
                    } = this;
                    ctx.save();
                    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    for (const path of this.bezierPath2D) {
                      ctx.stroke(path);
                    }
                    ctx.stroke(this.#currentPath2D);
                    ctx.restore();
                  }
                  #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {
                    const prevX = (x0 + x1) / 2;
                    const prevY = (y0 + y1) / 2;
                    const x3 = (x1 + x2) / 2;
                    const y3 = (y1 + y2) / 2;
                    path2D.bezierCurveTo(prevX + 2 * (x1 - prevX) / 3, prevY + 2 * (y1 - prevY) / 3, x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3, x3, y3);
                  }
                  #generateBezierPoints() {
                    const path = this.currentPath;
                    if (path.length <= 2) {
                      return [[path[0], path[0], path.at(-1), path.at(-1)]];
                    }
                    const bezierPoints = [];
                    let i;
                    let [x0, y0] = path[0];
                    for (i = 1; i < path.length - 2; i++) {
                      const [x12, y12] = path[i];
                      const [x22, y22] = path[i + 1];
                      const x3 = (x12 + x22) / 2;
                      const y3 = (y12 + y22) / 2;
                      const control12 = [x0 + 2 * (x12 - x0) / 3, y0 + 2 * (y12 - y0) / 3];
                      const control22 = [x3 + 2 * (x12 - x3) / 3, y3 + 2 * (y12 - y3) / 3];
                      bezierPoints.push([[x0, y0], control12, control22, [x3, y3]]);
                      [x0, y0] = [x3, y3];
                    }
                    const [x1, y1] = path[i];
                    const [x2, y2] = path[i + 1];
                    const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];
                    const control2 = [x2 + 2 * (x1 - x2) / 3, y2 + 2 * (y1 - y2) / 3];
                    bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);
                    return bezierPoints;
                  }
                  #redraw() {
                    if (this.isEmpty()) {
                      this.#updateTransform();
                      return;
                    }
                    this.#setStroke();
                    const {
                      canvas,
                      ctx
                    } = this;
                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    this.#updateTransform();
                    for (const path of this.bezierPath2D) {
                      ctx.stroke(path);
                    }
                  }
                  commit() {
                    if (this.#disableEditing) {
                      return;
                    }
                    super.commit();
                    this.isEditing = false;
                    this.disableEditMode();
                    this.setInForeground();
                    this.#disableEditing = true;
                    this.div.classList.add("disabled");
                    this.#fitToContent(true);
                    this.makeResizable();
                    this.parent.addInkEditorIfNeeded(true);
                    this.moveInDOM();
                    this.div.focus({
                      preventScroll: true
                    });
                  }
                  focusin(event) {
                    if (!this._focusEventsAllowed) {
                      return;
                    }
                    super.focusin(event);
                    this.enableEditMode();
                  }
                  canvasPointerdown(event) {
                    if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {
                      return;
                    }
                    this.setInForeground();
                    event.preventDefault();
                    if (event.type !== "mouse") {
                      this.div.focus();
                    }
                    this.#startDrawing(event.offsetX, event.offsetY);
                  }
                  canvasPointermove(event) {
                    event.preventDefault();
                    this.#draw(event.offsetX, event.offsetY);
                  }
                  canvasPointerup(event) {
                    event.preventDefault();
                    this.#endDrawing(event);
                  }
                  canvasPointerleave(event) {
                    this.#endDrawing(event);
                  }
                  #endDrawing(event) {
                    this.canvas.removeEventListener("pointerleave", this.#boundCanvasPointerleave);
                    this.canvas.removeEventListener("pointermove", this.#boundCanvasPointermove);
                    this.canvas.removeEventListener("pointerup", this.#boundCanvasPointerup);
                    this.canvas.addEventListener("pointerdown", this.#boundCanvasPointerdown);
                    setTimeout(() => {
                      this.canvas.removeEventListener("contextmenu", _display_utils2.noContextMenu);
                    }, 10);
                    this.#stopDrawing(event.offsetX, event.offsetY);
                    this.addToAnnotationStorage();
                    this.setInBackground();
                  }
                  #createCanvas() {
                    this.canvas = document.createElement("canvas");
                    this.canvas.width = this.canvas.height = 0;
                    this.canvas.className = "inkEditorCanvas";
                    _editor.AnnotationEditor._l10nPromise.get("editor_ink_canvas_aria_label").then((msg) => this.canvas?.setAttribute("aria-label", msg));
                    this.div.append(this.canvas);
                    this.ctx = this.canvas.getContext("2d");
                  }
                  #createObserver() {
                    this.#observer = new ResizeObserver((entries) => {
                      const rect = entries[0].contentRect;
                      if (rect.width && rect.height) {
                        this.setDimensions(rect.width, rect.height);
                      }
                    });
                    this.#observer.observe(this.div);
                  }
                  get isResizable() {
                    return !this.isEmpty() && this.#disableEditing;
                  }
                  render() {
                    if (this.div) {
                      return this.div;
                    }
                    let baseX, baseY;
                    if (this.width) {
                      baseX = this.x;
                      baseY = this.y;
                    }
                    super.render();
                    _editor.AnnotationEditor._l10nPromise.get("editor_ink2_aria_label").then((msg) => this.div?.setAttribute("aria-label", msg));
                    const [x, y, w, h] = this.#getInitialBBox();
                    this.setAt(x, y, 0, 0);
                    this.setDims(w, h);
                    this.#createCanvas();
                    if (this.width) {
                      const [parentWidth, parentHeight] = this.parentDimensions;
                      this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);
                      this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);
                      this.#isCanvasInitialized = true;
                      this.#setCanvasDims();
                      this.setDims(this.width * parentWidth, this.height * parentHeight);
                      this.#redraw();
                      this.div.classList.add("disabled");
                    } else {
                      this.div.classList.add("editing");
                      this.enableEditMode();
                    }
                    this.#createObserver();
                    return this.div;
                  }
                  #setCanvasDims() {
                    if (!this.#isCanvasInitialized) {
                      return;
                    }
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    this.canvas.width = Math.ceil(this.width * parentWidth);
                    this.canvas.height = Math.ceil(this.height * parentHeight);
                    this.#updateTransform();
                  }
                  setDimensions(width, height) {
                    const roundedWidth = Math.round(width);
                    const roundedHeight = Math.round(height);
                    if (this.#realWidth === roundedWidth && this.#realHeight === roundedHeight) {
                      return;
                    }
                    this.#realWidth = roundedWidth;
                    this.#realHeight = roundedHeight;
                    this.canvas.style.visibility = "hidden";
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    this.width = width / parentWidth;
                    this.height = height / parentHeight;
                    this.fixAndSetPosition();
                    if (this.#disableEditing) {
                      this.#setScaleFactor(width, height);
                    }
                    this.#setCanvasDims();
                    this.#redraw();
                    this.canvas.style.visibility = "visible";
                    this.fixDims();
                  }
                  #setScaleFactor(width, height) {
                    const padding = this.#getPadding();
                    const scaleFactorW = (width - padding) / this.#baseWidth;
                    const scaleFactorH = (height - padding) / this.#baseHeight;
                    this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);
                  }
                  #updateTransform() {
                    const padding = this.#getPadding() / 2;
                    this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding, this.translationY * this.scaleFactor + padding);
                  }
                  static #buildPath2D(bezier) {
                    const path2D = new Path2D();
                    for (let i = 0, ii = bezier.length; i < ii; i++) {
                      const [first, control1, control2, second] = bezier[i];
                      if (i === 0) {
                        path2D.moveTo(...first);
                      }
                      path2D.bezierCurveTo(control1[0], control1[1], control2[0], control2[1], second[0], second[1]);
                    }
                    return path2D;
                  }
                  static #toPDFCoordinates(points, rect, rotation) {
                    const [blX, blY, trX, trY] = rect;
                    switch (rotation) {
                      case 0:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          points[i] += blX;
                          points[i + 1] = trY - points[i + 1];
                        }
                        break;
                      case 90:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          const x = points[i];
                          points[i] = points[i + 1] + blX;
                          points[i + 1] = x + blY;
                        }
                        break;
                      case 180:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          points[i] = trX - points[i];
                          points[i + 1] += blY;
                        }
                        break;
                      case 270:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          const x = points[i];
                          points[i] = trX - points[i + 1];
                          points[i + 1] = trY - x;
                        }
                        break;
                      default:
                        throw new Error("Invalid rotation");
                    }
                    return points;
                  }
                  static #fromPDFCoordinates(points, rect, rotation) {
                    const [blX, blY, trX, trY] = rect;
                    switch (rotation) {
                      case 0:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          points[i] -= blX;
                          points[i + 1] = trY - points[i + 1];
                        }
                        break;
                      case 90:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          const x = points[i];
                          points[i] = points[i + 1] - blY;
                          points[i + 1] = x - blX;
                        }
                        break;
                      case 180:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          points[i] = trX - points[i];
                          points[i + 1] -= blY;
                        }
                        break;
                      case 270:
                        for (let i = 0, ii = points.length; i < ii; i += 2) {
                          const x = points[i];
                          points[i] = trY - points[i + 1];
                          points[i + 1] = trX - x;
                        }
                        break;
                      default:
                        throw new Error("Invalid rotation");
                    }
                    return points;
                  }
                  #serializePaths(s, tx, ty, rect) {
                    const paths = [];
                    const padding = this.thickness / 2;
                    const shiftX = s * tx + padding;
                    const shiftY = s * ty + padding;
                    for (const bezier of this.paths) {
                      const buffer = [];
                      const points = [];
                      for (let j = 0, jj = bezier.length; j < jj; j++) {
                        const [first, control1, control2, second] = bezier[j];
                        const p10 = s * first[0] + shiftX;
                        const p11 = s * first[1] + shiftY;
                        const p20 = s * control1[0] + shiftX;
                        const p21 = s * control1[1] + shiftY;
                        const p30 = s * control2[0] + shiftX;
                        const p31 = s * control2[1] + shiftY;
                        const p40 = s * second[0] + shiftX;
                        const p41 = s * second[1] + shiftY;
                        if (j === 0) {
                          buffer.push(p10, p11);
                          points.push(p10, p11);
                        }
                        buffer.push(p20, p21, p30, p31, p40, p41);
                        points.push(p20, p21);
                        if (j === jj - 1) {
                          points.push(p40, p41);
                        }
                      }
                      paths.push({
                        bezier: InkEditor.#toPDFCoordinates(buffer, rect, this.rotation),
                        points: InkEditor.#toPDFCoordinates(points, rect, this.rotation)
                      });
                    }
                    return paths;
                  }
                  #getBbox() {
                    let xMin = Infinity;
                    let xMax = -Infinity;
                    let yMin = Infinity;
                    let yMax = -Infinity;
                    for (const path of this.paths) {
                      for (const [first, control1, control2, second] of path) {
                        const bbox = _util2.Util.bezierBoundingBox(...first, ...control1, ...control2, ...second);
                        xMin = Math.min(xMin, bbox[0]);
                        yMin = Math.min(yMin, bbox[1]);
                        xMax = Math.max(xMax, bbox[2]);
                        yMax = Math.max(yMax, bbox[3]);
                      }
                    }
                    return [xMin, yMin, xMax, yMax];
                  }
                  #getPadding() {
                    return this.#disableEditing ? Math.ceil(this.thickness * this.parentScale) : 0;
                  }
                  #fitToContent(firstTime = false) {
                    if (this.isEmpty()) {
                      return;
                    }
                    if (!this.#disableEditing) {
                      this.#redraw();
                      return;
                    }
                    const bbox = this.#getBbox();
                    const padding = this.#getPadding();
                    this.#baseWidth = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);
                    this.#baseHeight = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);
                    const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);
                    const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    this.width = width / parentWidth;
                    this.height = height / parentHeight;
                    this.setAspectRatio(width, height);
                    const prevTranslationX = this.translationX;
                    const prevTranslationY = this.translationY;
                    this.translationX = -bbox[0];
                    this.translationY = -bbox[1];
                    this.#setCanvasDims();
                    this.#redraw();
                    this.#realWidth = width;
                    this.#realHeight = height;
                    this.setDims(width, height);
                    const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;
                    this.translate(prevTranslationX - this.translationX - unscaledPadding, prevTranslationY - this.translationY - unscaledPadding);
                  }
                  static deserialize(data, parent, uiManager) {
                    if (data instanceof _annotation_layer.InkAnnotationElement) {
                      return null;
                    }
                    const editor = super.deserialize(data, parent, uiManager);
                    editor.thickness = data.thickness;
                    editor.color = _util2.Util.makeHexColor(...data.color);
                    editor.opacity = data.opacity;
                    const [pageWidth, pageHeight] = editor.pageDimensions;
                    const width = editor.width * pageWidth;
                    const height = editor.height * pageHeight;
                    const scaleFactor = editor.parentScale;
                    const padding = data.thickness / 2;
                    editor.#disableEditing = true;
                    editor.#realWidth = Math.round(width);
                    editor.#realHeight = Math.round(height);
                    const {
                      paths,
                      rect,
                      rotation
                    } = data;
                    for (let {
                      bezier
                    } of paths) {
                      bezier = InkEditor.#fromPDFCoordinates(bezier, rect, rotation);
                      const path = [];
                      editor.paths.push(path);
                      let p0 = scaleFactor * (bezier[0] - padding);
                      let p1 = scaleFactor * (bezier[1] - padding);
                      for (let i = 2, ii = bezier.length; i < ii; i += 6) {
                        const p10 = scaleFactor * (bezier[i] - padding);
                        const p11 = scaleFactor * (bezier[i + 1] - padding);
                        const p20 = scaleFactor * (bezier[i + 2] - padding);
                        const p21 = scaleFactor * (bezier[i + 3] - padding);
                        const p30 = scaleFactor * (bezier[i + 4] - padding);
                        const p31 = scaleFactor * (bezier[i + 5] - padding);
                        path.push([[p0, p1], [p10, p11], [p20, p21], [p30, p31]]);
                        p0 = p30;
                        p1 = p31;
                      }
                      const path2D = this.#buildPath2D(path);
                      editor.bezierPath2D.push(path2D);
                    }
                    const bbox = editor.#getBbox();
                    editor.#baseWidth = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);
                    editor.#baseHeight = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);
                    editor.#setScaleFactor(width, height);
                    return editor;
                  }
                  serialize() {
                    if (this.isEmpty()) {
                      return null;
                    }
                    const rect = this.getRect(0, 0);
                    const color = _editor.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);
                    return {
                      annotationType: _util2.AnnotationEditorType.INK,
                      color,
                      thickness: this.thickness,
                      opacity: this.opacity,
                      paths: this.#serializePaths(this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect),
                      pageIndex: this.pageIndex,
                      rect,
                      rotation: this.rotation,
                      structTreeParentId: this._structTreeParentId
                    };
                  }
                }
                exports2.InkEditor = InkEditor;
              },
              /* 34 */
              /***/
              (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
                Object.defineProperty(exports2, "__esModule", {
                  value: true
                });
                exports2.StampEditor = void 0;
                var _util2 = __w_pdfjs_require__2(1);
                var _editor = __w_pdfjs_require__2(4);
                var _display_utils2 = __w_pdfjs_require__2(6);
                var _annotation_layer = __w_pdfjs_require__2(29);
                class StampEditor extends _editor.AnnotationEditor {
                  #bitmap = null;
                  #bitmapId = null;
                  #bitmapPromise = null;
                  #bitmapUrl = null;
                  #bitmapFile = null;
                  #canvas = null;
                  #observer = null;
                  #resizeTimeoutId = null;
                  #isSvg = false;
                  #hasBeenAddedInUndoStack = false;
                  static _type = "stamp";
                  constructor(params) {
                    super({
                      ...params,
                      name: "stampEditor"
                    });
                    this.#bitmapUrl = params.bitmapUrl;
                    this.#bitmapFile = params.bitmapFile;
                  }
                  static initialize(l10n) {
                    _editor.AnnotationEditor.initialize(l10n);
                  }
                  static get supportedTypes() {
                    const types = ["apng", "avif", "bmp", "gif", "jpeg", "png", "svg+xml", "webp", "x-icon"];
                    return (0, _util2.shadow)(this, "supportedTypes", types.map((type) => `image/${type}`));
                  }
                  static get supportedTypesStr() {
                    return (0, _util2.shadow)(this, "supportedTypesStr", this.supportedTypes.join(","));
                  }
                  static isHandlingMimeForPasting(mime) {
                    return this.supportedTypes.includes(mime);
                  }
                  static paste(item, parent) {
                    parent.pasteEditor(_util2.AnnotationEditorType.STAMP, {
                      bitmapFile: item.getAsFile()
                    });
                  }
                  #getBitmapFetched(data, fromId = false) {
                    if (!data) {
                      this.remove();
                      return;
                    }
                    this.#bitmap = data.bitmap;
                    if (!fromId) {
                      this.#bitmapId = data.id;
                      this.#isSvg = data.isSvg;
                    }
                    this.#createCanvas();
                  }
                  #getBitmapDone() {
                    this.#bitmapPromise = null;
                    this._uiManager.enableWaiting(false);
                    if (this.#canvas) {
                      this.div.focus();
                    }
                  }
                  #getBitmap() {
                    if (this.#bitmapId) {
                      this._uiManager.enableWaiting(true);
                      this._uiManager.imageManager.getFromId(this.#bitmapId).then((data) => this.#getBitmapFetched(data, true)).finally(() => this.#getBitmapDone());
                      return;
                    }
                    if (this.#bitmapUrl) {
                      const url = this.#bitmapUrl;
                      this.#bitmapUrl = null;
                      this._uiManager.enableWaiting(true);
                      this.#bitmapPromise = this._uiManager.imageManager.getFromUrl(url).then((data) => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());
                      return;
                    }
                    if (this.#bitmapFile) {
                      const file = this.#bitmapFile;
                      this.#bitmapFile = null;
                      this._uiManager.enableWaiting(true);
                      this.#bitmapPromise = this._uiManager.imageManager.getFromFile(file).then((data) => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());
                      return;
                    }
                    const input = document.createElement("input");
                    input.type = "file";
                    input.accept = StampEditor.supportedTypesStr;
                    this.#bitmapPromise = new Promise((resolve) => {
                      input.addEventListener("change", async () => {
                        if (!input.files || input.files.length === 0) {
                          this.remove();
                        } else {
                          this._uiManager.enableWaiting(true);
                          const data = await this._uiManager.imageManager.getFromFile(input.files[0]);
                          this.#getBitmapFetched(data);
                        }
                        resolve();
                      });
                      input.addEventListener("cancel", () => {
                        this.remove();
                        resolve();
                      });
                    }).finally(() => this.#getBitmapDone());
                    input.click();
                  }
                  remove() {
                    if (this.#bitmapId) {
                      this.#bitmap = null;
                      this._uiManager.imageManager.deleteId(this.#bitmapId);
                      this.#canvas?.remove();
                      this.#canvas = null;
                      this.#observer?.disconnect();
                      this.#observer = null;
                    }
                    super.remove();
                  }
                  rebuild() {
                    if (!this.parent) {
                      if (this.#bitmapId) {
                        this.#getBitmap();
                      }
                      return;
                    }
                    super.rebuild();
                    if (this.div === null) {
                      return;
                    }
                    if (this.#bitmapId) {
                      this.#getBitmap();
                    }
                    if (!this.isAttachedToDOM) {
                      this.parent.add(this);
                    }
                  }
                  onceAdded() {
                    this._isDraggable = true;
                    this.div.focus();
                  }
                  isEmpty() {
                    return !(this.#bitmapPromise || this.#bitmap || this.#bitmapUrl || this.#bitmapFile);
                  }
                  get isResizable() {
                    return true;
                  }
                  render() {
                    if (this.div) {
                      return this.div;
                    }
                    let baseX, baseY;
                    if (this.width) {
                      baseX = this.x;
                      baseY = this.y;
                    }
                    super.render();
                    this.div.hidden = true;
                    if (this.#bitmap) {
                      this.#createCanvas();
                    } else {
                      this.#getBitmap();
                    }
                    if (this.width) {
                      const [parentWidth, parentHeight] = this.parentDimensions;
                      this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);
                    }
                    return this.div;
                  }
                  #createCanvas() {
                    const {
                      div
                    } = this;
                    let {
                      width,
                      height
                    } = this.#bitmap;
                    const [pageWidth, pageHeight] = this.pageDimensions;
                    const MAX_RATIO = 0.75;
                    if (this.width) {
                      width = this.width * pageWidth;
                      height = this.height * pageHeight;
                    } else if (width > MAX_RATIO * pageWidth || height > MAX_RATIO * pageHeight) {
                      const factor = Math.min(MAX_RATIO * pageWidth / width, MAX_RATIO * pageHeight / height);
                      width *= factor;
                      height *= factor;
                    }
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    this.setDims(width * parentWidth / pageWidth, height * parentHeight / pageHeight);
                    this._uiManager.enableWaiting(false);
                    const canvas = this.#canvas = document.createElement("canvas");
                    div.append(canvas);
                    div.hidden = false;
                    this.#drawBitmap(width, height);
                    this.#createObserver();
                    if (!this.#hasBeenAddedInUndoStack) {
                      this.parent.addUndoableEditor(this);
                      this.#hasBeenAddedInUndoStack = true;
                    }
                    this._uiManager._eventBus.dispatch("reporttelemetry", {
                      source: this,
                      details: {
                        type: "editing",
                        subtype: this.editorType,
                        data: {
                          action: "inserted_image"
                        }
                      }
                    });
                    this.addAltTextButton();
                  }
                  #setDimensions(width, height) {
                    const [parentWidth, parentHeight] = this.parentDimensions;
                    this.width = width / parentWidth;
                    this.height = height / parentHeight;
                    this.setDims(width, height);
                    if (this._initialOptions?.isCentered) {
                      this.center();
                    } else {
                      this.fixAndSetPosition();
                    }
                    this._initialOptions = null;
                    if (this.#resizeTimeoutId !== null) {
                      clearTimeout(this.#resizeTimeoutId);
                    }
                    const TIME_TO_WAIT = 200;
                    this.#resizeTimeoutId = setTimeout(() => {
                      this.#resizeTimeoutId = null;
                      this.#drawBitmap(width, height);
                    }, TIME_TO_WAIT);
                  }
                  #scaleBitmap(width, height) {
                    const {
                      width: bitmapWidth,
                      height: bitmapHeight
                    } = this.#bitmap;
                    let newWidth = bitmapWidth;
                    let newHeight = bitmapHeight;
                    let bitmap = this.#bitmap;
                    while (newWidth > 2 * width || newHeight > 2 * height) {
                      const prevWidth = newWidth;
                      const prevHeight = newHeight;
                      if (newWidth > 2 * width) {
                        newWidth = newWidth >= 16384 ? Math.floor(newWidth / 2) - 1 : Math.ceil(newWidth / 2);
                      }
                      if (newHeight > 2 * height) {
                        newHeight = newHeight >= 16384 ? Math.floor(newHeight / 2) - 1 : Math.ceil(newHeight / 2);
                      }
                      const offscreen = new OffscreenCanvas(newWidth, newHeight);
                      const ctx = offscreen.getContext("2d");
                      ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);
                      bitmap = offscreen.transferToImageBitmap();
                    }
                    return bitmap;
                  }
                  #drawBitmap(width, height) {
                    width = Math.ceil(width);
                    height = Math.ceil(height);
                    const canvas = this.#canvas;
                    if (!canvas || canvas.width === width && canvas.height === height) {
                      return;
                    }
                    canvas.width = width;
                    canvas.height = height;
                    const bitmap = this.#isSvg ? this.#bitmap : this.#scaleBitmap(width, height);
                    const ctx = canvas.getContext("2d");
                    ctx.filter = this._uiManager.hcmFilter;
                    ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, width, height);
                  }
                  #serializeBitmap(toUrl) {
                    if (toUrl) {
                      if (this.#isSvg) {
                        const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);
                        if (url) {
                          return url;
                        }
                      }
                      const canvas = document.createElement("canvas");
                      ({
                        width: canvas.width,
                        height: canvas.height
                      } = this.#bitmap);
                      const ctx = canvas.getContext("2d");
                      ctx.drawImage(this.#bitmap, 0, 0);
                      return canvas.toDataURL();
                    }
                    if (this.#isSvg) {
                      const [pageWidth, pageHeight] = this.pageDimensions;
                      const width = Math.round(this.width * pageWidth * _display_utils2.PixelsPerInch.PDF_TO_CSS_UNITS);
                      const height = Math.round(this.height * pageHeight * _display_utils2.PixelsPerInch.PDF_TO_CSS_UNITS);
                      const offscreen = new OffscreenCanvas(width, height);
                      const ctx = offscreen.getContext("2d");
                      ctx.drawImage(this.#bitmap, 0, 0, this.#bitmap.width, this.#bitmap.height, 0, 0, width, height);
                      return offscreen.transferToImageBitmap();
                    }
                    return structuredClone(this.#bitmap);
                  }
                  #createObserver() {
                    this.#observer = new ResizeObserver((entries) => {
                      const rect = entries[0].contentRect;
                      if (rect.width && rect.height) {
                        this.#setDimensions(rect.width, rect.height);
                      }
                    });
                    this.#observer.observe(this.div);
                  }
                  static deserialize(data, parent, uiManager) {
                    if (data instanceof _annotation_layer.StampAnnotationElement) {
                      return null;
                    }
                    const editor = super.deserialize(data, parent, uiManager);
                    const {
                      rect,
                      bitmapUrl,
                      bitmapId,
                      isSvg,
                      accessibilityData
                    } = data;
                    if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {
                      editor.#bitmapId = bitmapId;
                    } else {
                      editor.#bitmapUrl = bitmapUrl;
                    }
                    editor.#isSvg = isSvg;
                    const [parentWidth, parentHeight] = editor.pageDimensions;
                    editor.width = (rect[2] - rect[0]) / parentWidth;
                    editor.height = (rect[3] - rect[1]) / parentHeight;
                    if (accessibilityData) {
                      editor.altTextData = accessibilityData;
                    }
                    return editor;
                  }
                  serialize(isForCopying = false, context = null) {
                    if (this.isEmpty()) {
                      return null;
                    }
                    const serialized = {
                      annotationType: _util2.AnnotationEditorType.STAMP,
                      bitmapId: this.#bitmapId,
                      pageIndex: this.pageIndex,
                      rect: this.getRect(0, 0),
                      rotation: this.rotation,
                      isSvg: this.#isSvg,
                      structTreeParentId: this._structTreeParentId
                    };
                    if (isForCopying) {
                      serialized.bitmapUrl = this.#serializeBitmap(true);
                      serialized.accessibilityData = this.altTextData;
                      return serialized;
                    }
                    const {
                      decorative,
                      altText
                    } = this.altTextData;
                    if (!decorative && altText) {
                      serialized.accessibilityData = {
                        type: "Figure",
                        alt: altText
                      };
                    }
                    if (context === null) {
                      return serialized;
                    }
                    context.stamps ||= /* @__PURE__ */ new Map();
                    const area = this.#isSvg ? (serialized.rect[2] - serialized.rect[0]) * (serialized.rect[3] - serialized.rect[1]) : null;
                    if (!context.stamps.has(this.#bitmapId)) {
                      context.stamps.set(this.#bitmapId, {
                        area,
                        serialized
                      });
                      serialized.bitmap = this.#serializeBitmap(false);
                    } else if (this.#isSvg) {
                      const prevData = context.stamps.get(this.#bitmapId);
                      if (area > prevData.area) {
                        prevData.area = area;
                        prevData.serialized.bitmap.close();
                        prevData.serialized.bitmap = this.#serializeBitmap(false);
                      }
                    }
                    return serialized;
                  }
                }
                exports2.StampEditor = StampEditor;
              }
              /******/
            ];
            var __webpack_module_cache__ = {};
            function __w_pdfjs_require__(moduleId) {
              var cachedModule = __webpack_module_cache__[moduleId];
              if (cachedModule !== void 0) {
                return cachedModule.exports;
              }
              var module2 = __webpack_module_cache__[moduleId] = {
                /******/
                // no module.id needed
                /******/
                // no module.loaded needed
                /******/
                exports: {}
                /******/
              };
              __webpack_modules__[moduleId](module2, module2.exports, __w_pdfjs_require__);
              return module2.exports;
            }
            var __webpack_exports__ = {};
            (() => {
              var exports2 = __webpack_exports__;
              Object.defineProperty(exports2, "__esModule", {
                value: true
              });
              Object.defineProperty(exports2, "AbortException", {
                enumerable: true,
                get: function() {
                  return _util2.AbortException;
                }
              });
              Object.defineProperty(exports2, "AnnotationEditorLayer", {
                enumerable: true,
                get: function() {
                  return _annotation_editor_layer.AnnotationEditorLayer;
                }
              });
              Object.defineProperty(exports2, "AnnotationEditorParamsType", {
                enumerable: true,
                get: function() {
                  return _util2.AnnotationEditorParamsType;
                }
              });
              Object.defineProperty(exports2, "AnnotationEditorType", {
                enumerable: true,
                get: function() {
                  return _util2.AnnotationEditorType;
                }
              });
              Object.defineProperty(exports2, "AnnotationEditorUIManager", {
                enumerable: true,
                get: function() {
                  return _tools.AnnotationEditorUIManager;
                }
              });
              Object.defineProperty(exports2, "AnnotationLayer", {
                enumerable: true,
                get: function() {
                  return _annotation_layer.AnnotationLayer;
                }
              });
              Object.defineProperty(exports2, "AnnotationMode", {
                enumerable: true,
                get: function() {
                  return _util2.AnnotationMode;
                }
              });
              Object.defineProperty(exports2, "CMapCompressionType", {
                enumerable: true,
                get: function() {
                  return _util2.CMapCompressionType;
                }
              });
              Object.defineProperty(exports2, "DOMSVGFactory", {
                enumerable: true,
                get: function() {
                  return _display_utils2.DOMSVGFactory;
                }
              });
              Object.defineProperty(exports2, "FeatureTest", {
                enumerable: true,
                get: function() {
                  return _util2.FeatureTest;
                }
              });
              Object.defineProperty(exports2, "GlobalWorkerOptions", {
                enumerable: true,
                get: function() {
                  return _worker_options2.GlobalWorkerOptions;
                }
              });
              Object.defineProperty(exports2, "ImageKind", {
                enumerable: true,
                get: function() {
                  return _util2.ImageKind;
                }
              });
              Object.defineProperty(exports2, "InvalidPDFException", {
                enumerable: true,
                get: function() {
                  return _util2.InvalidPDFException;
                }
              });
              Object.defineProperty(exports2, "MissingPDFException", {
                enumerable: true,
                get: function() {
                  return _util2.MissingPDFException;
                }
              });
              Object.defineProperty(exports2, "OPS", {
                enumerable: true,
                get: function() {
                  return _util2.OPS;
                }
              });
              Object.defineProperty(exports2, "PDFDataRangeTransport", {
                enumerable: true,
                get: function() {
                  return _api.PDFDataRangeTransport;
                }
              });
              Object.defineProperty(exports2, "PDFDateString", {
                enumerable: true,
                get: function() {
                  return _display_utils2.PDFDateString;
                }
              });
              Object.defineProperty(exports2, "PDFWorker", {
                enumerable: true,
                get: function() {
                  return _api.PDFWorker;
                }
              });
              Object.defineProperty(exports2, "PasswordResponses", {
                enumerable: true,
                get: function() {
                  return _util2.PasswordResponses;
                }
              });
              Object.defineProperty(exports2, "PermissionFlag", {
                enumerable: true,
                get: function() {
                  return _util2.PermissionFlag;
                }
              });
              Object.defineProperty(exports2, "PixelsPerInch", {
                enumerable: true,
                get: function() {
                  return _display_utils2.PixelsPerInch;
                }
              });
              Object.defineProperty(exports2, "PromiseCapability", {
                enumerable: true,
                get: function() {
                  return _util2.PromiseCapability;
                }
              });
              Object.defineProperty(exports2, "RenderingCancelledException", {
                enumerable: true,
                get: function() {
                  return _display_utils2.RenderingCancelledException;
                }
              });
              Object.defineProperty(exports2, "SVGGraphics", {
                enumerable: true,
                get: function() {
                  return _api.SVGGraphics;
                }
              });
              Object.defineProperty(exports2, "UnexpectedResponseException", {
                enumerable: true,
                get: function() {
                  return _util2.UnexpectedResponseException;
                }
              });
              Object.defineProperty(exports2, "Util", {
                enumerable: true,
                get: function() {
                  return _util2.Util;
                }
              });
              Object.defineProperty(exports2, "VerbosityLevel", {
                enumerable: true,
                get: function() {
                  return _util2.VerbosityLevel;
                }
              });
              Object.defineProperty(exports2, "XfaLayer", {
                enumerable: true,
                get: function() {
                  return _xfa_layer.XfaLayer;
                }
              });
              Object.defineProperty(exports2, "build", {
                enumerable: true,
                get: function() {
                  return _api.build;
                }
              });
              Object.defineProperty(exports2, "createValidAbsoluteUrl", {
                enumerable: true,
                get: function() {
                  return _util2.createValidAbsoluteUrl;
                }
              });
              Object.defineProperty(exports2, "getDocument", {
                enumerable: true,
                get: function() {
                  return _api.getDocument;
                }
              });
              Object.defineProperty(exports2, "getFilenameFromUrl", {
                enumerable: true,
                get: function() {
                  return _display_utils2.getFilenameFromUrl;
                }
              });
              Object.defineProperty(exports2, "getPdfFilenameFromUrl", {
                enumerable: true,
                get: function() {
                  return _display_utils2.getPdfFilenameFromUrl;
                }
              });
              Object.defineProperty(exports2, "getXfaPageViewport", {
                enumerable: true,
                get: function() {
                  return _display_utils2.getXfaPageViewport;
                }
              });
              Object.defineProperty(exports2, "isDataScheme", {
                enumerable: true,
                get: function() {
                  return _display_utils2.isDataScheme;
                }
              });
              Object.defineProperty(exports2, "isPdfFile", {
                enumerable: true,
                get: function() {
                  return _display_utils2.isPdfFile;
                }
              });
              Object.defineProperty(exports2, "loadScript", {
                enumerable: true,
                get: function() {
                  return _display_utils2.loadScript;
                }
              });
              Object.defineProperty(exports2, "noContextMenu", {
                enumerable: true,
                get: function() {
                  return _display_utils2.noContextMenu;
                }
              });
              Object.defineProperty(exports2, "normalizeUnicode", {
                enumerable: true,
                get: function() {
                  return _util2.normalizeUnicode;
                }
              });
              Object.defineProperty(exports2, "renderTextLayer", {
                enumerable: true,
                get: function() {
                  return _text_layer.renderTextLayer;
                }
              });
              Object.defineProperty(exports2, "setLayerDimensions", {
                enumerable: true,
                get: function() {
                  return _display_utils2.setLayerDimensions;
                }
              });
              Object.defineProperty(exports2, "shadow", {
                enumerable: true,
                get: function() {
                  return _util2.shadow;
                }
              });
              Object.defineProperty(exports2, "updateTextLayer", {
                enumerable: true,
                get: function() {
                  return _text_layer.updateTextLayer;
                }
              });
              Object.defineProperty(exports2, "version", {
                enumerable: true,
                get: function() {
                  return _api.version;
                }
              });
              var _util2 = __w_pdfjs_require__(1);
              var _api = __w_pdfjs_require__(2);
              var _display_utils2 = __w_pdfjs_require__(6);
              var _text_layer = __w_pdfjs_require__(26);
              var _annotation_editor_layer = __w_pdfjs_require__(27);
              var _tools = __w_pdfjs_require__(5);
              var _annotation_layer = __w_pdfjs_require__(29);
              var _worker_options2 = __w_pdfjs_require__(14);
              var _xfa_layer = __w_pdfjs_require__(32);
              const pdfjsVersion = "3.11.174";
              const pdfjsBuild = "ce8716743";
            })();
            return __webpack_exports__;
          })()
        );
      });
    }
  });

  // node_modules/@react-pdf-viewer/core/lib/cjs/core.js
  var require_core = __commonJS({
    "node_modules/@react-pdf-viewer/core/lib/cjs/core.js"(exports2) {
      "use strict";
      var React = require_react();
      var PdfJsApi = require_pdf();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var PdfJsApi__namespace = /* @__PURE__ */ _interopNamespaceDefault(PdfJsApi);
      exports2.AnnotationType = void 0;
      (function(AnnotationType) {
        AnnotationType[AnnotationType["Text"] = 1] = "Text";
        AnnotationType[AnnotationType["Link"] = 2] = "Link";
        AnnotationType[AnnotationType["FreeText"] = 3] = "FreeText";
        AnnotationType[AnnotationType["Line"] = 4] = "Line";
        AnnotationType[AnnotationType["Square"] = 5] = "Square";
        AnnotationType[AnnotationType["Circle"] = 6] = "Circle";
        AnnotationType[AnnotationType["Polygon"] = 7] = "Polygon";
        AnnotationType[AnnotationType["Polyline"] = 8] = "Polyline";
        AnnotationType[AnnotationType["Highlight"] = 9] = "Highlight";
        AnnotationType[AnnotationType["Underline"] = 10] = "Underline";
        AnnotationType[AnnotationType["Squiggly"] = 11] = "Squiggly";
        AnnotationType[AnnotationType["StrikeOut"] = 12] = "StrikeOut";
        AnnotationType[AnnotationType["Stamp"] = 13] = "Stamp";
        AnnotationType[AnnotationType["Caret"] = 14] = "Caret";
        AnnotationType[AnnotationType["Ink"] = 15] = "Ink";
        AnnotationType[AnnotationType["Popup"] = 16] = "Popup";
        AnnotationType[AnnotationType["FileAttachment"] = 17] = "FileAttachment";
      })(exports2.AnnotationType || (exports2.AnnotationType = {}));
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
      }
      exports2.TextDirection = void 0;
      (function(TextDirection) {
        TextDirection["RightToLeft"] = "RTL";
        TextDirection["LeftToRight"] = "LTR";
      })(exports2.TextDirection || (exports2.TextDirection = {}));
      var ThemeContext = React__namespace.createContext({
        currentTheme: "light",
        direction: exports2.TextDirection.LeftToRight,
        setCurrentTheme: function() {
        }
      });
      var classNames = function(classes) {
        var result = [];
        Object.keys(classes).forEach(function(clazz) {
          if (clazz && classes[clazz]) {
            result.push(clazz);
          }
        });
        return result.join(" ");
      };
      var Button = function(_a) {
        var children = _a.children, testId = _a.testId, onClick = _a.onClick;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var attrs = testId ? { "data-testid": testId } : {};
        return React__namespace.createElement("button", __assign({ className: classNames({
          "rpv-core__button": true,
          "rpv-core__button--rtl": isRtl
        }), type: "button", onClick }, attrs), children);
      };
      var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React__namespace.useLayoutEffect : React__namespace.useEffect;
      var useIntersectionObserver = function(props) {
        var containerRef = React__namespace.useRef(null);
        var once = props.once, threshold = props.threshold, onVisibilityChanged = props.onVisibilityChanged;
        useIsomorphicLayoutEffect(function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          var intersectionTracker = new IntersectionObserver(function(entries) {
            entries.forEach(function(entry) {
              var isVisible = entry.isIntersecting;
              var ratio = entry.intersectionRatio;
              onVisibilityChanged({ isVisible, ratio });
              if (isVisible && once) {
                intersectionTracker.unobserve(container);
                intersectionTracker.disconnect();
              }
            });
          }, {
            threshold: threshold || 0
          });
          intersectionTracker.observe(container);
          return function() {
            intersectionTracker.unobserve(container);
            intersectionTracker.disconnect();
          };
        }, []);
        return containerRef;
      };
      var LazyRender = function(_a) {
        var attrs = _a.attrs, children = _a.children, testId = _a.testId;
        var _b = React__namespace.useState(false), visible = _b[0], setVisible = _b[1];
        var containerAttrs = testId ? __assign(__assign({}, attrs), { "data-testid": testId }) : attrs;
        var handleVisibilityChanged = function(params) {
          if (params.isVisible) {
            setVisible(true);
          }
        };
        var containerRef = useIntersectionObserver({
          once: true,
          onVisibilityChanged: handleVisibilityChanged
        });
        return React__namespace.createElement("div", __assign({ ref: containerRef }, containerAttrs), visible && children);
      };
      var Menu = function(_a) {
        var children = _a.children;
        var containerRef = React__namespace.useRef();
        var visibleMenuItemsRef = React__namespace.useRef([]);
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var handleKeyDown = function(e) {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          switch (e.key) {
            case "Tab":
              e.preventDefault();
              break;
            case "ArrowDown":
              e.preventDefault();
              moveToItem(function(_, currentIndex) {
                return currentIndex + 1;
              });
              break;
            case "ArrowUp":
              e.preventDefault();
              moveToItem(function(_, currentIndex) {
                return currentIndex - 1;
              });
              break;
            case "End":
              e.preventDefault();
              moveToItem(function(items, _) {
                return items.length - 1;
              });
              break;
            case "Home":
              e.preventDefault();
              moveToItem(function(_, __) {
                return 0;
              });
              break;
          }
        };
        var moveToItem = function(getNextItem) {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          var items = visibleMenuItemsRef.current;
          var currentIndex = items.findIndex(function(item) {
            return item.getAttribute("tabindex") === "0";
          });
          var targetIndex = Math.min(items.length - 1, Math.max(0, getNextItem(items, currentIndex)));
          if (currentIndex >= 0 && currentIndex <= items.length - 1) {
            items[currentIndex].setAttribute("tabindex", "-1");
          }
          items[targetIndex].setAttribute("tabindex", "0");
          items[targetIndex].focus();
        };
        var findVisibleItems = function(container) {
          var visibleItems = [];
          container.querySelectorAll('.rpv-core__menu-item[role="menuitem"]').forEach(function(item) {
            if (item instanceof HTMLElement) {
              var parent_1 = item.parentElement;
              if (parent_1 === container) {
                visibleItems.push(item);
              } else {
                if (window.getComputedStyle(parent_1).display !== "none") {
                  visibleItems.push(item);
                }
              }
            }
          });
          return visibleItems;
        };
        useIsomorphicLayoutEffect(function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          var visibleItems = findVisibleItems(container);
          visibleMenuItemsRef.current = visibleItems;
        }, []);
        useIsomorphicLayoutEffect(function() {
          document.addEventListener("keydown", handleKeyDown);
          return function() {
            document.removeEventListener("keydown", handleKeyDown);
          };
        }, []);
        return React__namespace.createElement("div", { ref: containerRef, "aria-orientation": "vertical", className: classNames({
          "rpv-core__menu": true,
          "rpv-core__menu--rtl": isRtl
        }), role: "menu", tabIndex: 0 }, children);
      };
      var MenuDivider = function() {
        return React__namespace.createElement("div", { "aria-orientation": "horizontal", className: "rpv-core__menu-divider", role: "separator" });
      };
      var Icon = function(_a) {
        var children = _a.children, _b = _a.ignoreDirection, ignoreDirection = _b === void 0 ? false : _b, _c = _a.size, size = _c === void 0 ? 24 : _c;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = !ignoreDirection && direction === exports2.TextDirection.RightToLeft;
        var width = "".concat(size || 24, "px");
        return React__namespace.createElement("svg", { "aria-hidden": "true", className: classNames({
          "rpv-core__icon": true,
          "rpv-core__icon--rtl": isRtl
        }), focusable: "false", height: width, viewBox: "0 0 24 24", width }, children);
      };
      var CheckIcon = function() {
        return React__namespace.createElement(
          Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M23.5,0.499l-16.5,23l-6.5-6.5" })
        );
      };
      var MenuItem = function(_a) {
        var _b = _a.checked, checked = _b === void 0 ? false : _b, children = _a.children, _c = _a.icon, icon = _c === void 0 ? null : _c, _d = _a.isDisabled, isDisabled = _d === void 0 ? false : _d, testId = _a.testId, onClick = _a.onClick;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var attrs = testId ? { "data-testid": testId } : {};
        return React__namespace.createElement(
          "button",
          __assign({ className: classNames({
            "rpv-core__menu-item": true,
            "rpv-core__menu-item--disabled": isDisabled,
            "rpv-core__menu-item--ltr": !isRtl,
            "rpv-core__menu-item--rtl": isRtl
          }), role: "menuitem", tabIndex: -1, type: "button", onClick }, attrs),
          React__namespace.createElement("div", { className: classNames({
            "rpv-core__menu-item-icon": true,
            "rpv-core__menu-item-icon--ltr": !isRtl,
            "rpv-core__menu-item-icon--rtl": isRtl
          }) }, icon),
          React__namespace.createElement("div", { className: classNames({
            "rpv-core__menu-item-label": true,
            "rpv-core__menu-item-label--ltr": !isRtl,
            "rpv-core__menu-item-label--rtl": isRtl
          }) }, children),
          React__namespace.createElement("div", { className: classNames({
            "rpv-core__menu-item-check": true,
            "rpv-core__menu-item-check--ltr": !isRtl,
            "rpv-core__menu-item-check--rtl": isRtl
          }) }, checked && React__namespace.createElement(CheckIcon, null))
        );
      };
      var MinimalButton = function(_a) {
        var _b = _a.ariaLabel, ariaLabel = _b === void 0 ? "" : _b, _c = _a.ariaKeyShortcuts, ariaKeyShortcuts = _c === void 0 ? "" : _c, children = _a.children, _d = _a.isDisabled, isDisabled = _d === void 0 ? false : _d, _e = _a.isSelected, isSelected = _e === void 0 ? false : _e, testId = _a.testId, onClick = _a.onClick;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var attrs = testId ? { "data-testid": testId } : {};
        return React__namespace.createElement("button", __assign({ "aria-label": ariaLabel }, ariaKeyShortcuts && { "aria-keyshortcuts": ariaKeyShortcuts }, isDisabled && { "aria-disabled": true }, { className: classNames({
          "rpv-core__minimal-button": true,
          "rpv-core__minimal-button--disabled": isDisabled,
          "rpv-core__minimal-button--rtl": isRtl,
          "rpv-core__minimal-button--selected": isSelected
        }), type: "button", onClick }, attrs), children);
      };
      var PrimaryButton = function(_a) {
        var children = _a.children, testId = _a.testId, onClick = _a.onClick;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var attrs = testId ? { "data-testid": testId } : {};
        return React__namespace.createElement("button", __assign({ className: classNames({
          "rpv-core__primary-button": true,
          "rpv-core__primary-button--rtl": isRtl
        }), type: "button", onClick }, attrs), children);
      };
      var ProgressBar = function(_a) {
        var progress = _a.progress;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        return React__namespace.createElement(
          "div",
          { className: classNames({
            "rpv-core__progress-bar": true,
            "rpv-core__progress-bar--rtl": isRtl
          }) },
          React__namespace.createElement(
            "div",
            { className: "rpv-core__progress-bar-progress", style: { width: "".concat(progress, "%") } },
            progress,
            "%"
          )
        );
      };
      var Separator = function() {
        return React__namespace.createElement("div", { className: "rpv-core__separator" });
      };
      var Spinner = function(_a) {
        var _b = _a.size, size = _b === void 0 ? "4rem" : _b, testId = _a.testId;
        var _c = React__namespace.useState(false), visible = _c[0], setVisible = _c[1];
        var attrs = testId ? { "data-testid": testId } : {};
        var handleVisibilityChanged = function(params) {
          setVisible(params.isVisible);
        };
        var containerRef = useIntersectionObserver({
          onVisibilityChanged: handleVisibilityChanged
        });
        return React__namespace.createElement("div", __assign({}, attrs, { className: classNames({
          "rpv-core__spinner": true,
          "rpv-core__spinner--animating": visible
        }), ref: containerRef, style: { height: size, width: size } }));
      };
      var Splitter = function(_a) {
        var constrain = _a.constrain;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var resizerRef = React__namespace.useRef();
        var leftSideRef = React__namespace.useRef();
        var rightSideRef = React__namespace.useRef();
        var xRef = React__namespace.useRef(0);
        var yRef = React__namespace.useRef(0);
        var leftWidthRef = React__namespace.useRef(0);
        var resizerWidthRef = React__namespace.useRef(0);
        var eventOptions = {
          capture: true
        };
        var handleMouseMove = function(e) {
          var resizerEle = resizerRef.current;
          var leftSide = leftSideRef.current;
          var rightSide = rightSideRef.current;
          if (!resizerEle || !leftSide || !rightSide) {
            return;
          }
          var resizerWidth = resizerWidthRef.current;
          var dx = e.clientX - xRef.current;
          var firstHalfSize = leftWidthRef.current + (isRtl ? -dx : dx);
          var containerWidth = resizerEle.parentElement.getBoundingClientRect().width;
          var firstHalfPercentage = firstHalfSize * 100 / containerWidth;
          resizerEle.classList.add("rpv-core__splitter--resizing");
          if (constrain) {
            var secondHalfSize = containerWidth - firstHalfSize - resizerWidth;
            var secondHalfPercentage = secondHalfSize * 100 / containerWidth;
            if (!constrain({ firstHalfPercentage, firstHalfSize, secondHalfPercentage, secondHalfSize })) {
              return;
            }
          }
          leftSide.style.width = "".concat(firstHalfPercentage, "%");
          document.body.classList.add("rpv-core__splitter-body--resizing");
          leftSide.classList.add("rpv-core__splitter-sibling--resizing");
          rightSide.classList.add("rpv-core__splitter-sibling--resizing");
        };
        var handleMouseUp = function(e) {
          var resizerEle = resizerRef.current;
          var leftSide = leftSideRef.current;
          var rightSide = rightSideRef.current;
          if (!resizerEle || !leftSide || !rightSide) {
            return;
          }
          document.body.classList.remove("rpv-core__splitter-body--resizing");
          resizerEle.classList.remove("rpv-core__splitter--resizing");
          leftSide.classList.remove("rpv-core__splitter-sibling--resizing");
          rightSide.classList.remove("rpv-core__splitter-sibling--resizing");
          document.removeEventListener("mousemove", handleMouseMove, eventOptions);
          document.removeEventListener("mouseup", handleMouseUp, eventOptions);
        };
        var handleMouseDown = function(e) {
          var leftSide = leftSideRef.current;
          if (!leftSide) {
            return;
          }
          xRef.current = e.clientX;
          yRef.current = e.clientY;
          leftWidthRef.current = leftSide.getBoundingClientRect().width;
          document.addEventListener("mousemove", handleMouseMove, eventOptions);
          document.addEventListener("mouseup", handleMouseUp, eventOptions);
        };
        React__namespace.useEffect(function() {
          var resizerEle = resizerRef.current;
          if (!resizerEle) {
            return;
          }
          resizerWidthRef.current = resizerEle.getBoundingClientRect().width;
          leftSideRef.current = resizerEle.previousElementSibling;
          rightSideRef.current = resizerEle.nextElementSibling;
        }, []);
        return React__namespace.createElement("div", { ref: resizerRef, className: "rpv-core__splitter", onMouseDown: handleMouseDown });
      };
      var TextBox = function(_a) {
        var _b = _a.ariaLabel, ariaLabel = _b === void 0 ? "" : _b, _c = _a.autoFocus, autoFocus = _c === void 0 ? false : _c, _d = _a.placeholder, placeholder = _d === void 0 ? "" : _d, testId = _a.testId, _e = _a.type, type = _e === void 0 ? "text" : _e, _f = _a.value, value = _f === void 0 ? "" : _f, onChange = _a.onChange, _g = _a.onKeyDown, onKeyDown = _g === void 0 ? function() {
        } : _g;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var textboxRef = React__namespace.useRef();
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var attrs = {
          ref: textboxRef,
          "data-testid": "",
          "aria-label": ariaLabel,
          className: classNames({
            "rpv-core__textbox": true,
            "rpv-core__textbox--rtl": isRtl
          }),
          placeholder,
          value,
          onChange: function(e) {
            return onChange(e.target.value);
          },
          onKeyDown
        };
        if (testId) {
          attrs["data-testid"] = testId;
        }
        useIsomorphicLayoutEffect(function() {
          if (autoFocus) {
            var textboxEle = textboxRef.current;
            if (textboxEle) {
              var x = window.scrollX;
              var y = window.scrollY;
              textboxEle.focus();
              window.scrollTo(x, y);
            }
          }
        }, []);
        return type === "text" ? React__namespace.createElement("input", __assign({ type: "text" }, attrs)) : React__namespace.createElement("input", __assign({ type: "password" }, attrs));
      };
      var Api;
      (function(Api2) {
        Api2[Api2["ExitFullScreen"] = 0] = "ExitFullScreen";
        Api2[Api2["FullScreenChange"] = 1] = "FullScreenChange";
        Api2[Api2["FullScreenElement"] = 2] = "FullScreenElement";
        Api2[Api2["FullScreenEnabled"] = 3] = "FullScreenEnabled";
        Api2[Api2["RequestFullScreen"] = 4] = "RequestFullScreen";
      })(Api || (Api = {}));
      var defaultVendor = {
        ExitFullScreen: "exitFullscreen",
        FullScreenChange: "fullscreenchange",
        FullScreenElement: "fullscreenElement",
        FullScreenEnabled: "fullscreenEnabled",
        RequestFullScreen: "requestFullscreen"
      };
      var webkitVendor = {
        ExitFullScreen: "webkitExitFullscreen",
        FullScreenChange: "webkitfullscreenchange",
        FullScreenElement: "webkitFullscreenElement",
        FullScreenEnabled: "webkitFullscreenEnabled",
        RequestFullScreen: "webkitRequestFullscreen"
      };
      var msVendor = {
        ExitFullScreen: "msExitFullscreen",
        FullScreenChange: "msFullscreenChange",
        FullScreenElement: "msFullscreenElement",
        FullScreenEnabled: "msFullscreenEnabled",
        RequestFullScreen: "msRequestFullscreen"
      };
      var isBrowser = typeof window !== "undefined";
      var vendor = isBrowser ? Api.FullScreenEnabled in document && defaultVendor || webkitVendor.FullScreenEnabled in document && webkitVendor || msVendor.FullScreenEnabled in document && msVendor || defaultVendor : defaultVendor;
      var isFullScreenEnabled = function() {
        return isBrowser && vendor.FullScreenEnabled in document && document[vendor.FullScreenEnabled] === true;
      };
      var addFullScreenChangeListener = function(handler) {
        if (isBrowser) {
          document.addEventListener(vendor.FullScreenChange, handler);
        }
      };
      var removeFullScreenChangeListener = function(handler) {
        if (isBrowser) {
          document.removeEventListener(vendor.FullScreenChange, handler);
        }
      };
      var exitFullScreen = function(element) {
        return isBrowser ? element[vendor.ExitFullScreen]() : Promise.resolve({});
      };
      var getFullScreenElement = function() {
        return isBrowser ? document[vendor.FullScreenElement] : null;
      };
      var requestFullScreen = function(element) {
        if (isBrowser) {
          element[vendor.RequestFullScreen]();
        }
      };
      var useDebounceCallback = function(callback, wait) {
        var timeout = React__namespace.useRef();
        var cleanup = function() {
          if (timeout.current) {
            clearTimeout(timeout.current);
          }
        };
        React__namespace.useEffect(function() {
          return function() {
            return cleanup();
          };
        }, []);
        return React__namespace.useCallback(function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          cleanup();
          timeout.current = setTimeout(function() {
            callback.apply(void 0, args);
          }, wait);
        }, [callback, wait]);
      };
      var useIsMounted = function() {
        var isMountedRef = React__namespace.useRef(false);
        React__namespace.useEffect(function() {
          isMountedRef.current = true;
          return function() {
            isMountedRef.current = false;
          };
        }, []);
        return isMountedRef;
      };
      var usePrevious = function(value) {
        var ref = React__namespace.useRef(value);
        React__namespace.useEffect(function() {
          ref.current = value;
        }, [value]);
        return ref.current;
      };
      var PageRenderStatus;
      (function(PageRenderStatus2) {
        PageRenderStatus2["NotRenderedYet"] = "NotRenderedYet";
        PageRenderStatus2["Rendering"] = "Rendering";
        PageRenderStatus2["Rendered"] = "Rendered";
      })(PageRenderStatus || (PageRenderStatus = {}));
      var OUT_OF_RANGE_VISIBILITY = -9999;
      var useRenderQueue = function(_a) {
        var doc = _a.doc;
        var numPages = doc.numPages;
        var docId = doc.loadingTask.docId;
        var initialPageVisibilities = React__namespace.useMemo(function() {
          return Array(numPages).fill(null).map(function(_, pageIndex) {
            return {
              pageIndex,
              renderStatus: PageRenderStatus.NotRenderedYet,
              visibility: OUT_OF_RANGE_VISIBILITY
            };
          });
        }, [docId]);
        var latestRef = React__namespace.useRef({
          currentRenderingPage: -1,
          startRange: 0,
          endRange: numPages - 1,
          visibilities: initialPageVisibilities
        });
        var markNotRendered = function() {
          for (var i = 0; i < numPages; i++) {
            latestRef.current.visibilities[i].renderStatus = PageRenderStatus.NotRenderedYet;
          }
        };
        var markRendered = function(pageIndex) {
          latestRef.current.visibilities[pageIndex].renderStatus = PageRenderStatus.Rendered;
        };
        var markRendering = function(pageIndex) {
          if (latestRef.current.currentRenderingPage !== -1 && latestRef.current.currentRenderingPage !== pageIndex && latestRef.current.visibilities[latestRef.current.currentRenderingPage].renderStatus === PageRenderStatus.Rendering) {
            latestRef.current.visibilities[latestRef.current.currentRenderingPage].renderStatus = PageRenderStatus.NotRenderedYet;
          }
          latestRef.current.visibilities[pageIndex].renderStatus = PageRenderStatus.Rendering;
          latestRef.current.currentRenderingPage = pageIndex;
        };
        var setRange = function(startIndex, endIndex) {
          latestRef.current.startRange = startIndex;
          latestRef.current.endRange = endIndex;
          for (var i = 0; i < numPages; i++) {
            if (i < startIndex || i > endIndex) {
              latestRef.current.visibilities[i].visibility = OUT_OF_RANGE_VISIBILITY;
              latestRef.current.visibilities[i].renderStatus = PageRenderStatus.NotRenderedYet;
            }
          }
        };
        var setOutOfRange = function(pageIndex) {
          setVisibility(pageIndex, OUT_OF_RANGE_VISIBILITY);
        };
        var setVisibility = function(pageIndex, visibility) {
          latestRef.current.visibilities[pageIndex].visibility = visibility;
        };
        var getHighestPriorityPage = function() {
          var visiblePages = latestRef.current.visibilities.slice(latestRef.current.startRange, latestRef.current.endRange + 1).filter(function(item) {
            return item.visibility > OUT_OF_RANGE_VISIBILITY;
          });
          if (!visiblePages.length) {
            return -1;
          }
          var firstVisiblePage = visiblePages[0].pageIndex;
          var lastVisiblePage = visiblePages[visiblePages.length - 1].pageIndex;
          var numVisiblePages = visiblePages.length;
          for (var i = 0; i < numVisiblePages; i++) {
            if (visiblePages[i].renderStatus === PageRenderStatus.Rendering) {
              return -1;
            }
            if (visiblePages[i].renderStatus === PageRenderStatus.NotRenderedYet) {
              return visiblePages[i].pageIndex;
            }
          }
          if (lastVisiblePage + 1 < numPages && latestRef.current.visibilities[lastVisiblePage + 1].renderStatus !== PageRenderStatus.Rendered) {
            return lastVisiblePage + 1;
          } else if (firstVisiblePage - 1 >= 0 && latestRef.current.visibilities[firstVisiblePage - 1].renderStatus !== PageRenderStatus.Rendered) {
            return firstVisiblePage - 1;
          }
          return -1;
        };
        var isInRange = function(pageIndex) {
          return pageIndex >= latestRef.current.startRange && pageIndex <= latestRef.current.endRange;
        };
        return {
          getHighestPriorityPage,
          isInRange,
          markNotRendered,
          markRendered,
          markRendering,
          setOutOfRange,
          setRange,
          setVisibility
        };
      };
      var core = {
        askingPassword: {
          requirePasswordToOpen: "This document requires a password to open",
          submit: "Submit"
        },
        wrongPassword: {
          tryAgain: "The password is wrong. Please try again"
        },
        pageLabel: "Page {{pageIndex}}"
      };
      var enUs = {
        core
      };
      var DefaultLocalization = enUs;
      var LocalizationContext = React__namespace.createContext({
        l10n: DefaultLocalization,
        setL10n: function() {
        }
      });
      var id = 0;
      var uniqueId = function() {
        return id++;
      };
      var useClickOutside = function(closeOnClickOutside, targetRef, onClickOutside) {
        var clickHandler = function(e) {
          var target = targetRef.current;
          if (!target) {
            return;
          }
          var clickedTarget = e.target;
          if (clickedTarget instanceof Element && clickedTarget.shadowRoot) {
            var paths = e.composedPath();
            if (paths.length > 0 && !target.contains(paths[0])) {
              onClickOutside();
            }
          } else if (!target.contains(clickedTarget)) {
            onClickOutside();
          }
        };
        React__namespace.useEffect(function() {
          if (!closeOnClickOutside) {
            return;
          }
          var eventOptions = {
            capture: true
          };
          document.addEventListener("click", clickHandler, eventOptions);
          return function() {
            document.removeEventListener("click", clickHandler, eventOptions);
          };
        }, []);
      };
      var useEscape = function(handler) {
        var keyUpHandler = function(e) {
          if (e.key === "Escape") {
            handler();
          }
        };
        React__namespace.useEffect(function() {
          document.addEventListener("keyup", keyUpHandler);
          return function() {
            document.removeEventListener("keyup", keyUpHandler);
          };
        }, []);
      };
      var useLockScroll = function() {
        React__namespace.useEffect(function() {
          var originalStyle = window.getComputedStyle(document.body).overflow;
          document.body.style.overflow = "hidden";
          return function() {
            document.body.style.overflow = originalStyle;
          };
        }, []);
      };
      var ModalBody = function(_a) {
        var ariaControlsSuffix = _a.ariaControlsSuffix, children = _a.children, closeOnClickOutside = _a.closeOnClickOutside, closeOnEscape = _a.closeOnEscape, onToggle = _a.onToggle;
        var contentRef = React__namespace.useRef();
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        useLockScroll();
        useEscape(function() {
          if (contentRef.current && closeOnEscape) {
            onToggle();
          }
        });
        useClickOutside(closeOnClickOutside, contentRef, onToggle);
        useIsomorphicLayoutEffect(function() {
          var contentEle = contentRef.current;
          if (!contentEle) {
            return;
          }
          var maxHeight = document.body.clientHeight * 0.75;
          if (contentEle.getBoundingClientRect().height >= maxHeight) {
            contentEle.style.overflow = "auto";
            contentEle.style.maxHeight = "".concat(maxHeight, "px");
          }
        }, []);
        return React__namespace.createElement("div", { "aria-modal": "true", className: classNames({
          "rpv-core__modal-body": true,
          "rpv-core__modal-body--rtl": isRtl
        }), id: "rpv-core__modal-body-".concat(ariaControlsSuffix), ref: contentRef, role: "dialog", tabIndex: -1 }, children);
      };
      var ModalOverlay = function(_a) {
        var children = _a.children;
        return React__namespace.createElement("div", { className: "rpv-core__modal-overlay" }, children);
      };
      exports2.ToggleStatus = void 0;
      (function(ToggleStatus) {
        ToggleStatus["Close"] = "Close";
        ToggleStatus["Open"] = "Open";
        ToggleStatus["Toggle"] = "Toggle";
      })(exports2.ToggleStatus || (exports2.ToggleStatus = {}));
      var useToggle = function(isOpened) {
        var _a = React__namespace.useState(isOpened), opened = _a[0], setOpened = _a[1];
        var toggle = function(status) {
          switch (status) {
            case exports2.ToggleStatus.Close:
              setOpened(false);
              break;
            case exports2.ToggleStatus.Open:
              setOpened(true);
              break;
            case exports2.ToggleStatus.Toggle:
            default:
              setOpened(function(isOpened2) {
                return !isOpened2;
              });
              break;
          }
        };
        return { opened, toggle };
      };
      var Portal = function(_a) {
        var content = _a.content, _b = _a.isOpened, isOpened = _b === void 0 ? false : _b, target = _a.target;
        var _c = useToggle(isOpened), opened = _c.opened, toggle = _c.toggle;
        return React__namespace.createElement(
          React__namespace.Fragment,
          null,
          target && target(toggle, opened),
          opened && content(toggle)
        );
      };
      var Modal = function(_a) {
        var ariaControlsSuffix = _a.ariaControlsSuffix, closeOnClickOutside = _a.closeOnClickOutside, closeOnEscape = _a.closeOnEscape, content = _a.content, _b = _a.isOpened, isOpened = _b === void 0 ? false : _b, target = _a.target;
        var controlsSuffix = ariaControlsSuffix || "".concat(uniqueId());
        var renderTarget = function(toggle, opened) {
          return React__namespace.createElement("div", { "aria-expanded": opened ? "true" : "false", "aria-haspopup": "dialog", "aria-controls": "rpv-core__modal-body-".concat(controlsSuffix) }, target(toggle, opened));
        };
        var renderContent = function(toggle) {
          return React__namespace.createElement(
            ModalOverlay,
            null,
            React__namespace.createElement(ModalBody, { ariaControlsSuffix: controlsSuffix, closeOnClickOutside, closeOnEscape, onToggle: toggle }, content(toggle))
          );
        };
        return React__namespace.createElement(Portal, { target: target ? renderTarget : null, content: renderContent, isOpened });
      };
      exports2.Position = void 0;
      (function(Position) {
        Position["TopLeft"] = "TOP_LEFT";
        Position["TopCenter"] = "TOP_CENTER";
        Position["TopRight"] = "TOP_RIGHT";
        Position["RightTop"] = "RIGHT_TOP";
        Position["RightCenter"] = "RIGHT_CENTER";
        Position["RightBottom"] = "RIGHT_BOTTOM";
        Position["BottomLeft"] = "BOTTOM_LEFT";
        Position["BottomCenter"] = "BOTTOM_CENTER";
        Position["BottomRight"] = "BOTTOM_RIGHT";
        Position["LeftTop"] = "LEFT_TOP";
        Position["LeftCenter"] = "LEFT_CENTER";
        Position["LeftBottom"] = "LEFT_BOTTOM";
      })(exports2.Position || (exports2.Position = {}));
      var calculatePosition = function(content, target, position, offset) {
        var targetRect = target.getBoundingClientRect();
        var contentRect = content.getBoundingClientRect();
        var height = contentRect.height, width = contentRect.width;
        var top = 0;
        var left = 0;
        switch (position) {
          case exports2.Position.TopLeft:
            top = targetRect.top - height;
            left = targetRect.left;
            break;
          case exports2.Position.TopCenter:
            top = targetRect.top - height;
            left = targetRect.left + targetRect.width / 2 - width / 2;
            break;
          case exports2.Position.TopRight:
            top = targetRect.top - height;
            left = targetRect.left + targetRect.width - width;
            break;
          case exports2.Position.RightTop:
            top = targetRect.top;
            left = targetRect.left + targetRect.width;
            break;
          case exports2.Position.RightCenter:
            top = targetRect.top + targetRect.height / 2 - height / 2;
            left = targetRect.left + targetRect.width;
            break;
          case exports2.Position.RightBottom:
            top = targetRect.top + targetRect.height - height;
            left = targetRect.left + targetRect.width;
            break;
          case exports2.Position.BottomLeft:
            top = targetRect.top + targetRect.height;
            left = targetRect.left;
            break;
          case exports2.Position.BottomCenter:
            top = targetRect.top + targetRect.height;
            left = targetRect.left + targetRect.width / 2 - width / 2;
            break;
          case exports2.Position.BottomRight:
            top = targetRect.top + targetRect.height;
            left = targetRect.left + targetRect.width - width;
            break;
          case exports2.Position.LeftTop:
            top = targetRect.top;
            left = targetRect.left - width;
            break;
          case exports2.Position.LeftCenter:
            top = targetRect.top + targetRect.height / 2 - height / 2;
            left = targetRect.left - width;
            break;
          case exports2.Position.LeftBottom:
            top = targetRect.top + targetRect.height - height;
            left = targetRect.left - width;
            break;
        }
        return {
          left: left + (offset.left || 0),
          top: top + (offset.top || 0)
        };
      };
      var usePosition = function(contentRef, targetRef, anchorRef, position, offset) {
        useIsomorphicLayoutEffect(function() {
          var targetEle = targetRef.current;
          var contentEle = contentRef.current;
          var anchorEle = anchorRef.current;
          if (!contentEle || !targetEle || !anchorEle) {
            return;
          }
          var anchorRect = anchorEle.getBoundingClientRect();
          var _a = calculatePosition(contentEle, targetEle, position, offset), top = _a.top, left = _a.left;
          contentEle.style.top = "".concat(top - anchorRect.top, "px");
          contentEle.style.left = "".concat(left - anchorRect.left, "px");
        }, []);
      };
      var Arrow = function(_a) {
        var _b;
        var customClassName = _a.customClassName, position = _a.position;
        return React__namespace.createElement("div", { className: classNames((_b = {
          "rpv-core__arrow": true,
          "rpv-core__arrow--tl": position === exports2.Position.TopLeft,
          "rpv-core__arrow--tc": position === exports2.Position.TopCenter,
          "rpv-core__arrow--tr": position === exports2.Position.TopRight,
          "rpv-core__arrow--rt": position === exports2.Position.RightTop,
          "rpv-core__arrow--rc": position === exports2.Position.RightCenter,
          "rpv-core__arrow--rb": position === exports2.Position.RightBottom,
          "rpv-core__arrow--bl": position === exports2.Position.BottomLeft,
          "rpv-core__arrow--bc": position === exports2.Position.BottomCenter,
          "rpv-core__arrow--br": position === exports2.Position.BottomRight,
          "rpv-core__arrow--lt": position === exports2.Position.LeftTop,
          "rpv-core__arrow--lc": position === exports2.Position.LeftCenter,
          "rpv-core__arrow--lb": position === exports2.Position.LeftBottom
        }, _b["".concat(customClassName)] = customClassName !== "", _b)) });
      };
      var PopoverBody = function(_a) {
        var ariaControlsSuffix = _a.ariaControlsSuffix, children = _a.children, closeOnClickOutside = _a.closeOnClickOutside, offset = _a.offset, position = _a.position, targetRef = _a.targetRef, onClose = _a.onClose;
        var contentRef = React__namespace.useRef();
        var innerRef = React__namespace.useRef();
        var anchorRef = React__namespace.useRef();
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        useClickOutside(closeOnClickOutside, contentRef, onClose);
        usePosition(contentRef, targetRef, anchorRef, position, offset);
        useIsomorphicLayoutEffect(function() {
          var innerContentEle = innerRef.current;
          if (!innerContentEle) {
            return;
          }
          var maxHeight = document.body.clientHeight * 0.75;
          if (innerContentEle.getBoundingClientRect().height >= maxHeight) {
            innerContentEle.style.overflow = "auto";
            innerContentEle.style.maxHeight = "".concat(maxHeight, "px");
          }
        }, []);
        var innerId = "rpv-core__popover-body-inner-".concat(ariaControlsSuffix);
        return React__namespace.createElement(
          React__namespace.Fragment,
          null,
          React__namespace.createElement("div", { ref: anchorRef, style: { left: 0, position: "absolute", top: 0 } }),
          React__namespace.createElement(
            "div",
            { "aria-describedby": innerId, className: classNames({
              "rpv-core__popover-body": true,
              "rpv-core__popover-body--rtl": isRtl
            }), id: "rpv-core__popover-body-".concat(ariaControlsSuffix), ref: contentRef, role: "dialog", tabIndex: -1 },
            React__namespace.createElement(Arrow, { customClassName: "rpv-core__popover-body-arrow", position }),
            React__namespace.createElement("div", { id: innerId, ref: innerRef }, children)
          )
        );
      };
      var PopoverOverlay = function(_a) {
        var closeOnEscape = _a.closeOnEscape, onClose = _a.onClose;
        var containerRef = React__namespace.useRef();
        useEscape(function() {
          if (containerRef.current && closeOnEscape) {
            onClose();
          }
        });
        return React__namespace.createElement("div", { className: "rpv-core__popover-overlay", ref: containerRef });
      };
      var Popover = function(_a) {
        var _b = _a.ariaHasPopup, ariaHasPopup = _b === void 0 ? "dialog" : _b, ariaControlsSuffix = _a.ariaControlsSuffix, closeOnClickOutside = _a.closeOnClickOutside, closeOnEscape = _a.closeOnEscape, content = _a.content, _c = _a.lockScroll, lockScroll = _c === void 0 ? true : _c, offset = _a.offset, position = _a.position, target = _a.target;
        var _d = useToggle(false), opened = _d.opened, toggle = _d.toggle;
        var targetRef = React__namespace.useRef();
        var controlsSuffix = React__namespace.useMemo(function() {
          return ariaControlsSuffix || "".concat(uniqueId());
        }, []);
        return React__namespace.createElement(
          "div",
          { ref: targetRef, "aria-expanded": opened ? "true" : "false", "aria-haspopup": ariaHasPopup, "aria-controls": "rpv-core__popver-body-".concat(controlsSuffix) },
          target(toggle, opened),
          opened && React__namespace.createElement(
            React__namespace.Fragment,
            null,
            lockScroll && React__namespace.createElement(PopoverOverlay, { closeOnEscape, onClose: toggle }),
            React__namespace.createElement(PopoverBody, { ariaControlsSuffix: controlsSuffix, closeOnClickOutside, offset, position, targetRef, onClose: toggle }, content(toggle))
          )
        );
      };
      var TooltipBody = function(_a) {
        var ariaControlsSuffix = _a.ariaControlsSuffix, children = _a.children, contentRef = _a.contentRef, offset = _a.offset, position = _a.position, targetRef = _a.targetRef;
        var anchorRef = React__namespace.useRef();
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        usePosition(contentRef, targetRef, anchorRef, position, offset);
        return React__namespace.createElement(
          React__namespace.Fragment,
          null,
          React__namespace.createElement("div", { ref: anchorRef, style: { left: 0, position: "absolute", top: 0 } }),
          React__namespace.createElement(
            "div",
            { className: classNames({
              "rpv-core__tooltip-body": true,
              "rpv-core__tooltip-body--rtl": isRtl
            }), id: "rpv-core__tooltip-body-".concat(ariaControlsSuffix), ref: contentRef, role: "tooltip" },
            React__namespace.createElement(Arrow, { customClassName: "rpv-core__tooltip-body-arrow", position }),
            React__namespace.createElement("div", { className: "rpv-core__tooltip-body-content" }, children)
          )
        );
      };
      var Tooltip = function(_a) {
        var ariaControlsSuffix = _a.ariaControlsSuffix, content = _a.content, offset = _a.offset, position = _a.position, target = _a.target;
        var _b = useToggle(false), opened = _b.opened, toggle = _b.toggle;
        var targetRef = React__namespace.useRef();
        var contentRef = React__namespace.useRef();
        var controlsSuffix = React__namespace.useMemo(function() {
          return ariaControlsSuffix || "".concat(uniqueId());
        }, []);
        useEscape(function() {
          if (targetRef.current && document.activeElement && targetRef.current.contains(document.activeElement)) {
            close();
          }
        });
        var open = function() {
          toggle(exports2.ToggleStatus.Open);
        };
        var close = function() {
          toggle(exports2.ToggleStatus.Close);
        };
        var onBlur = function(e) {
          var shouldHideTooltip = e.relatedTarget instanceof HTMLElement && e.currentTarget.parentElement && e.currentTarget.parentElement.contains(e.relatedTarget);
          if (shouldHideTooltip) {
            if (contentRef.current) {
              contentRef.current.style.display = "none";
            }
          } else {
            close();
          }
        };
        return React__namespace.createElement(
          React__namespace.Fragment,
          null,
          React__namespace.createElement("div", { ref: targetRef, "aria-describedby": "rpv-core__tooltip-body-".concat(controlsSuffix), onBlur, onFocus: open, onMouseEnter: open, onMouseLeave: close }, target),
          opened && React__namespace.createElement(TooltipBody, { ariaControlsSuffix: controlsSuffix, contentRef, offset, position, targetRef }, content())
        );
      };
      function createStore(initialState) {
        var state = initialState || {};
        var listeners = {};
        var update = function(key, data) {
          var _a;
          state = __assign(__assign({}, state), (_a = {}, _a[key] = data, _a));
          (listeners[key] || []).forEach(function(handler) {
            return handler(state[key]);
          });
        };
        var get = function(key) {
          return state[key];
        };
        return {
          subscribe: function(key, handler) {
            listeners[key] = (listeners[key] || []).concat(handler);
          },
          unsubscribe: function(key, handler) {
            listeners[key] = (listeners[key] || []).filter(function(f) {
              return f !== handler;
            });
          },
          update: function(key, data) {
            update(key, data);
          },
          updateCurrentValue: function(key, updater) {
            var currentValue = get(key);
            if (currentValue !== void 0) {
              update(key, updater(currentValue));
            }
          },
          get: function(key) {
            return get(key);
          }
        };
      }
      exports2.FullScreenMode = void 0;
      (function(FullScreenMode) {
        FullScreenMode["Normal"] = "Normal";
        FullScreenMode["Entering"] = "Entering";
        FullScreenMode["Entered"] = "Entered";
        FullScreenMode["EnteredCompletely"] = "EnteredCompletely";
        FullScreenMode["Exitting"] = "Exitting";
        FullScreenMode["Exited"] = "Exited";
      })(exports2.FullScreenMode || (exports2.FullScreenMode = {}));
      exports2.LayerRenderStatus = void 0;
      (function(LayerRenderStatus) {
        LayerRenderStatus[LayerRenderStatus["PreRender"] = 0] = "PreRender";
        LayerRenderStatus[LayerRenderStatus["DidRender"] = 1] = "DidRender";
      })(exports2.LayerRenderStatus || (exports2.LayerRenderStatus = {}));
      exports2.PageMode = void 0;
      (function(PageMode) {
        PageMode["Attachments"] = "UseAttachments";
        PageMode["Bookmarks"] = "UseOutlines";
        PageMode["ContentGroup"] = "UseOC";
        PageMode["Default"] = "UserNone";
        PageMode["FullScreen"] = "FullScreen";
        PageMode["Thumbnails"] = "UseThumbs";
      })(exports2.PageMode || (exports2.PageMode = {}));
      exports2.PasswordStatus = void 0;
      (function(PasswordStatus) {
        PasswordStatus["RequiredPassword"] = "RequiredPassword";
        PasswordStatus["WrongPassword"] = "WrongPassword";
      })(exports2.PasswordStatus || (exports2.PasswordStatus = {}));
      exports2.RotateDirection = void 0;
      (function(RotateDirection) {
        RotateDirection["Backward"] = "Backward";
        RotateDirection["Forward"] = "Forward";
      })(exports2.RotateDirection || (exports2.RotateDirection = {}));
      exports2.ScrollMode = void 0;
      (function(ScrollMode) {
        ScrollMode["Page"] = "Page";
        ScrollMode["Horizontal"] = "Horizontal";
        ScrollMode["Vertical"] = "Vertical";
        ScrollMode["Wrapped"] = "Wrapped";
      })(exports2.ScrollMode || (exports2.ScrollMode = {}));
      exports2.SpecialZoomLevel = void 0;
      (function(SpecialZoomLevel) {
        SpecialZoomLevel["ActualSize"] = "ActualSize";
        SpecialZoomLevel["PageFit"] = "PageFit";
        SpecialZoomLevel["PageWidth"] = "PageWidth";
      })(exports2.SpecialZoomLevel || (exports2.SpecialZoomLevel = {}));
      exports2.ViewMode = void 0;
      (function(ViewMode) {
        ViewMode["DualPage"] = "DualPage";
        ViewMode["DualPageWithCover"] = "DualPageWithCover";
        ViewMode["SinglePage"] = "SinglePage";
      })(exports2.ViewMode || (exports2.ViewMode = {}));
      var chunk = function(arr, size) {
        return arr.reduce(function(acc, e, i) {
          return i % size ? acc[acc.length - 1].push(e) : acc.push([e]), acc;
        }, []);
      };
      var isMac = function() {
        return typeof window !== "undefined" ? /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform) : false;
      };
      var normalizeDestination = function(pageIndex, destArray) {
        switch (destArray[1].name) {
          case "XYZ":
            return {
              bottomOffset: function(_, viewportHeight) {
                return destArray[3] === null ? viewportHeight : destArray[3];
              },
              leftOffset: function(_, __) {
                return destArray[2] === null ? 0 : destArray[2];
              },
              pageIndex,
              scaleTo: destArray[4]
            };
          case "Fit":
          case "FitB":
            return {
              bottomOffset: 0,
              leftOffset: 0,
              pageIndex,
              scaleTo: exports2.SpecialZoomLevel.PageFit
            };
          case "FitH":
          case "FitBH":
            return {
              bottomOffset: destArray[2],
              leftOffset: 0,
              pageIndex,
              scaleTo: exports2.SpecialZoomLevel.PageWidth
            };
          default:
            return {
              bottomOffset: 0,
              leftOffset: 0,
              pageIndex,
              scaleTo: 1
            };
        }
      };
      var pageOutlinesMap = /* @__PURE__ */ new Map();
      var pagesMap = /* @__PURE__ */ new Map();
      var generateRefKey = function(doc, outline) {
        return "".concat(doc.loadingTask.docId, "___").concat(outline.num, "R").concat(outline.gen === 0 ? "" : outline.gen);
      };
      var getPageIndex = function(doc, outline) {
        var key = generateRefKey(doc, outline);
        return pageOutlinesMap.has(key) ? pageOutlinesMap.get(key) : null;
      };
      var cacheOutlineRef = function(doc, outline, pageIndex) {
        pageOutlinesMap.set(generateRefKey(doc, outline), pageIndex);
      };
      var clearPagesCache = function() {
        pageOutlinesMap.clear();
        pagesMap.clear();
      };
      var getPage = function(doc, pageIndex) {
        if (!doc) {
          return Promise.reject("The document is not loaded yet");
        }
        var pageKey = "".concat(doc.loadingTask.docId, "___").concat(pageIndex);
        var page = pagesMap.get(pageKey);
        if (page) {
          return Promise.resolve(page);
        }
        return new Promise(function(resolve, _) {
          doc.getPage(pageIndex + 1).then(function(page2) {
            pagesMap.set(pageKey, page2);
            if (page2.ref) {
              cacheOutlineRef(doc, page2.ref, pageIndex);
            }
            resolve(page2);
          });
        });
      };
      var getDestination = function(doc, dest) {
        return new Promise(function(res) {
          new Promise(function(resolve) {
            if (typeof dest === "string") {
              doc.getDestination(dest).then(function(destArray) {
                resolve(destArray);
              });
            } else {
              resolve(dest);
            }
          }).then(function(destArray) {
            if ("object" === typeof destArray[0] && destArray[0] !== null) {
              var outlineRef_1 = destArray[0];
              var pageIndex = getPageIndex(doc, outlineRef_1);
              if (pageIndex === null) {
                doc.getPageIndex(outlineRef_1).then(function(pageIndex2) {
                  cacheOutlineRef(doc, outlineRef_1, pageIndex2);
                  getDestination(doc, dest).then(function(result) {
                    return res(result);
                  });
                });
              } else {
                res(normalizeDestination(pageIndex, destArray));
              }
            } else {
              var target = normalizeDestination(destArray[0], destArray);
              res(target);
            }
          });
        });
      };
      var useRunOnce = function(cb, condition) {
        var isCalledRef = React__namespace.useRef(false);
        useIsomorphicLayoutEffect(function() {
          if (condition && !isCalledRef.current) {
            isCalledRef.current = true;
            cb();
          }
        }, [cb, condition]);
      };
      var useTrackResize = function(_a) {
        var targetRef = _a.targetRef, onResize = _a.onResize;
        useIsomorphicLayoutEffect(function() {
          var io = new ResizeObserver(function(entries) {
            entries.forEach(function(entry) {
              onResize(entry.target);
            });
          });
          var container = targetRef.current;
          if (!container) {
            return;
          }
          io.observe(container);
          return function() {
            io.unobserve(container);
          };
        }, []);
      };
      var AnnotationBorderStyleType;
      (function(AnnotationBorderStyleType2) {
        AnnotationBorderStyleType2[AnnotationBorderStyleType2["Solid"] = 1] = "Solid";
        AnnotationBorderStyleType2[AnnotationBorderStyleType2["Dashed"] = 2] = "Dashed";
        AnnotationBorderStyleType2[AnnotationBorderStyleType2["Beveled"] = 3] = "Beveled";
        AnnotationBorderStyleType2[AnnotationBorderStyleType2["Inset"] = 4] = "Inset";
        AnnotationBorderStyleType2[AnnotationBorderStyleType2["Underline"] = 5] = "Underline";
      })(AnnotationBorderStyleType || (AnnotationBorderStyleType = {}));
      var dateRegex = new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
      var parse = function(value, min, max, defaultValue) {
        var parsed = parseInt(value, 10);
        return parsed >= min && parsed <= max ? parsed : defaultValue;
      };
      var convertDate = function(input) {
        var matches = dateRegex.exec(input);
        if (!matches) {
          return null;
        }
        var year = parseInt(matches[1], 10);
        var month = parse(matches[2], 1, 12, 1) - 1;
        var day = parse(matches[3], 1, 31, 1);
        var hour = parse(matches[4], 0, 23, 0);
        var minute = parse(matches[5], 0, 59, 0);
        var second = parse(matches[6], 0, 59, 0);
        var universalTimeRelation = matches[7] || "Z";
        var offsetHour = parse(matches[8], 0, 23, 0);
        var offsetMinute = parse(matches[9], 0, 59, 0);
        switch (universalTimeRelation) {
          case "-":
            hour += offsetHour;
            minute += offsetMinute;
            break;
          case "+":
            hour -= offsetHour;
            minute -= offsetMinute;
            break;
        }
        return new Date(Date.UTC(year, month, day, hour, minute, second));
      };
      var getContents = function(annotation) {
        return annotation.contentsObj ? annotation.contentsObj.str : annotation.contents || "";
      };
      var getTitle = function(annotation) {
        return annotation.titleObj ? annotation.titleObj.str : annotation.title || "";
      };
      var PopupWrapper = function(_a) {
        var annotation = _a.annotation;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var containerRef = React__namespace.useRef();
        var dateStr = "";
        if (annotation.modificationDate) {
          var date = convertDate(annotation.modificationDate);
          dateStr = date ? "".concat(date.toLocaleDateString(), ", ").concat(date.toLocaleTimeString()) : "";
        }
        React__namespace.useLayoutEffect(function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          var annotationEle = document.querySelector('[data-annotation-id="'.concat(annotation.id, '"]'));
          if (!annotationEle) {
            return;
          }
          var ele = annotationEle;
          ele.style.zIndex += 1;
          return function() {
            ele.style.zIndex = "".concat(parseInt(ele.style.zIndex, 10) - 1);
          };
        }, []);
        return React__namespace.createElement(
          "div",
          { ref: containerRef, className: classNames({
            "rpv-core__annotation-popup-wrapper": true,
            "rpv-core__annotation-popup-wrapper--rtl": isRtl
          }), style: {
            top: annotation.annotationType === exports2.AnnotationType.Popup ? "" : "100%"
          } },
          title && React__namespace.createElement(
            React__namespace.Fragment,
            null,
            React__namespace.createElement("div", { className: classNames({
              "rpv-core__annotation-popup-title": true,
              "rpv-core__annotation-popup-title--ltr": !isRtl,
              "rpv-core__annotation-popup-title--rtl": isRtl
            }) }, title),
            React__namespace.createElement("div", { className: "rpv-core__annotation-popup-date" }, dateStr)
          ),
          contents && React__namespace.createElement("div", { className: "rpv-core__annotation-popup-content" }, contents.split("\n").map(function(item, index) {
            return React__namespace.createElement(
              React__namespace.Fragment,
              { key: index },
              item,
              React__namespace.createElement("br", null)
            );
          }))
        );
      };
      var TogglePopupBy;
      (function(TogglePopupBy2) {
        TogglePopupBy2["Click"] = "Click";
        TogglePopupBy2["Hover"] = "Hover";
      })(TogglePopupBy || (TogglePopupBy = {}));
      var useTogglePopup = function() {
        var _a = useToggle(false), opened = _a.opened, toggle = _a.toggle;
        var _b = React__namespace.useState(TogglePopupBy.Hover), togglePopupBy = _b[0], setTooglePopupBy = _b[1];
        var toggleOnClick = function() {
          switch (togglePopupBy) {
            case TogglePopupBy.Click:
              opened && setTooglePopupBy(TogglePopupBy.Hover);
              toggle(exports2.ToggleStatus.Toggle);
              break;
            case TogglePopupBy.Hover:
              setTooglePopupBy(TogglePopupBy.Click);
              toggle(exports2.ToggleStatus.Open);
              break;
          }
        };
        var openOnHover = function() {
          togglePopupBy === TogglePopupBy.Hover && toggle(exports2.ToggleStatus.Open);
        };
        var closeOnHover = function() {
          togglePopupBy === TogglePopupBy.Hover && toggle(exports2.ToggleStatus.Close);
        };
        return {
          opened,
          closeOnHover,
          openOnHover,
          toggleOnClick
        };
      };
      var Annotation = function(_a) {
        var annotation = _a.annotation, children = _a.children, ignoreBorder = _a.ignoreBorder, hasPopup = _a.hasPopup, isRenderable = _a.isRenderable, page = _a.page, viewport = _a.viewport;
        var rect = annotation.rect;
        var _b = useTogglePopup(), closeOnHover = _b.closeOnHover, opened = _b.opened, openOnHover = _b.openOnHover, toggleOnClick = _b.toggleOnClick;
        var normalizeRect = function(r) {
          return [
            Math.min(r[0], r[2]),
            Math.min(r[1], r[3]),
            Math.max(r[0], r[2]),
            Math.max(r[1], r[3])
          ];
        };
        var bound = normalizeRect([
          rect[0],
          page.view[3] + page.view[1] - rect[1],
          rect[2],
          page.view[3] + page.view[1] - rect[3]
        ]);
        var width = rect[2] - rect[0];
        var height = rect[3] - rect[1];
        var styles = {
          borderColor: "",
          borderRadius: "",
          borderStyle: "",
          borderWidth: ""
        };
        if (!ignoreBorder && annotation.borderStyle.width > 0) {
          switch (annotation.borderStyle.style) {
            case AnnotationBorderStyleType.Dashed:
              styles.borderStyle = "dashed";
              break;
            case AnnotationBorderStyleType.Solid:
              styles.borderStyle = "solid";
              break;
            case AnnotationBorderStyleType.Underline:
              styles = Object.assign({
                borderBottomStyle: "solid"
              }, styles);
              break;
            case AnnotationBorderStyleType.Beveled:
            case AnnotationBorderStyleType.Inset:
          }
          var borderWidth = annotation.borderStyle.width;
          styles.borderWidth = "".concat(borderWidth, "px");
          if (annotation.borderStyle.style !== AnnotationBorderStyleType.Underline) {
            width = width - 2 * borderWidth;
            height = height - 2 * borderWidth;
          }
          var _c = annotation.borderStyle, horizontalCornerRadius = _c.horizontalCornerRadius, verticalCornerRadius = _c.verticalCornerRadius;
          if (horizontalCornerRadius > 0 || verticalCornerRadius > 0) {
            styles.borderRadius = "".concat(horizontalCornerRadius, "px / ").concat(verticalCornerRadius, "px");
          }
          annotation.color ? styles.borderColor = "rgb(".concat(annotation.color[0] | 0, ", ").concat(annotation.color[1] | 0, ", ").concat(annotation.color[2] | 0, ")") : styles.borderWidth = "0";
        }
        return React__namespace.createElement(React__namespace.Fragment, null, isRenderable && children({
          popup: {
            opened,
            closeOnHover,
            openOnHover,
            toggleOnClick
          },
          slot: {
            attrs: {
              style: Object.assign({
                height: "".concat(height, "px"),
                left: "".concat(bound[0], "px"),
                top: "".concat(bound[1], "px"),
                transform: "matrix(".concat(viewport.transform.join(","), ")"),
                transformOrigin: "-".concat(bound[0], "px -").concat(bound[1], "px"),
                width: "".concat(width, "px")
              }, styles)
            },
            children: React__namespace.createElement(React__namespace.Fragment, null, hasPopup && opened && React__namespace.createElement(PopupWrapper, { annotation }))
          }
        }));
      };
      var Caret = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--caret", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children);
        });
      };
      var Circle = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var rect = annotation.rect;
        var width = rect[2] - rect[0];
        var height = rect[3] - rect[1];
        var borderWidth = annotation.borderStyle.width;
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--circle", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }),
            React__namespace.createElement(
              "svg",
              { height: "".concat(height, "px"), preserveAspectRatio: "none", version: "1.1", viewBox: "0 0 ".concat(width, " ").concat(height), width: "".concat(width, "px") },
              React__namespace.createElement("circle", { cy: height / 2, fill: "none", rx: width / 2 - borderWidth / 2, ry: height / 2 - borderWidth / 2, stroke: "transparent", strokeWidth: borderWidth || 1 })
            ),
            props.slot.children
          );
        });
      };
      var getFileName = function(url) {
        var str = url.split("/").pop();
        return str ? str.split("#")[0].split("?")[0] : url;
      };
      var downloadFile = function(url, data) {
        var blobUrl = typeof data === "string" ? "" : URL.createObjectURL(new Blob([data], { type: "" }));
        var link = document.createElement("a");
        link.style.display = "none";
        link.href = blobUrl || url;
        link.setAttribute("download", getFileName(url));
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        if (blobUrl) {
          URL.revokeObjectURL(blobUrl);
        }
      };
      var FileAttachment = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var hasPopup = annotation.hasPopup === false && (!!title || !!contents);
        var doubleClick = function() {
          var file = annotation.file;
          file && downloadFile(file.filename, file.content);
        };
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable: true, page, viewport }, function(props) {
          return React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--file-attachment", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onDoubleClick: doubleClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children);
        });
      };
      var FreeText = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--free-text", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children);
        });
      };
      var Popup = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(title || contents);
        var ignoredParents = ["Circle", "Ink", "Line", "Polygon", "PolyLine", "Square"];
        var hasPopup = !annotation.parentType || ignoredParents.indexOf(annotation.parentType) !== -1;
        useIsomorphicLayoutEffect(function() {
          if (!annotation.parentId) {
            return;
          }
          var parent = document.querySelector('[data-annotation-id="'.concat(annotation.parentId, '"]'));
          var container = document.querySelector('[data-annotation-id="'.concat(annotation.id, '"]'));
          if (!parent || !container) {
            return;
          }
          var left = parseFloat(parent.style.left);
          var top = parseFloat(parent.style.top) + parseFloat(parent.style.height);
          container.style.left = "".concat(left, "px");
          container.style.top = "".concat(top, "px");
          container.style.transformOrigin = "-".concat(left, "px -").concat(top, "px");
        }, []);
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: false, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--popup", "data-annotation-id": annotation.id }),
            React__namespace.createElement(PopupWrapper, { annotation })
          );
        });
      };
      var Highlight = function(_a) {
        var annotation = _a.annotation, childAnnotation = _a.childAnnotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var hasQuadPoints = annotation.quadPoints && annotation.quadPoints.length > 0;
        if (hasQuadPoints) {
          var annotations = annotation.quadPoints.map(function(quadPoint) {
            return Object.assign({}, annotation, {
              rect: [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y],
              quadPoints: []
            });
          });
          return React__namespace.createElement(React__namespace.Fragment, null, annotations.map(function(ann, index) {
            return React__namespace.createElement(Highlight, { key: index, annotation: ann, childAnnotation, page, viewport });
          }));
        }
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            React__namespace.Fragment,
            null,
            React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--highlight", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children),
            childAnnotation && childAnnotation.annotationType === exports2.AnnotationType.Popup && props.popup.opened && React__namespace.createElement(Popup, { annotation: childAnnotation, page, viewport })
          );
        });
      };
      var Ink = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var rect = annotation.rect;
        var width = rect[2] - rect[0];
        var height = rect[3] - rect[1];
        var borderWidth = annotation.borderStyle.width;
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--ink", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }),
            annotation.inkLists && annotation.inkLists.length && React__namespace.createElement("svg", { height: "".concat(height, "px"), preserveAspectRatio: "none", version: "1.1", viewBox: "0 0 ".concat(width, " ").concat(height), width: "".concat(width, "px") }, annotation.inkLists.map(function(inkList, index) {
              return React__namespace.createElement("polyline", { key: index, fill: "none", stroke: "transparent", strokeWidth: borderWidth || 1, points: inkList.map(function(item) {
                return "".concat(item.x - rect[0], ",").concat(rect[3] - item.y);
              }).join(" ") });
            })),
            props.slot.children
          );
        });
      };
      var Line = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var rect = annotation.rect;
        var width = rect[2] - rect[0];
        var height = rect[3] - rect[1];
        var borderWidth = annotation.borderStyle.width;
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--line", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }),
            React__namespace.createElement(
              "svg",
              { height: "".concat(height, "px"), preserveAspectRatio: "none", version: "1.1", viewBox: "0 0 ".concat(width, " ").concat(height), width: "".concat(width, "px") },
              React__namespace.createElement("line", { stroke: "transparent", strokeWidth: borderWidth || 1, x1: rect[2] - annotation.lineCoordinates[0], x2: rect[2] - annotation.lineCoordinates[2], y1: rect[3] - annotation.lineCoordinates[1], y2: rect[3] - annotation.lineCoordinates[3] })
            ),
            props.slot.children
          );
        });
      };
      var INVALID_PROTOCOL = /^([^\w]*)(javascript|data|vbscript)/im;
      var HTML_ENTITIES = /&#(\w+)(^\w|;)?/g;
      var CTRL_CHARS = /[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim;
      var URL_SCHEME = /^([^:]+):/gm;
      var decodeHtmlEntities = function(str) {
        return str.replace(HTML_ENTITIES, function(_, dec) {
          return String.fromCharCode(dec);
        });
      };
      var sanitizeUrl = function(url, defaultUrl) {
        if (defaultUrl === void 0) {
          defaultUrl = "about:blank";
        }
        var result = decodeHtmlEntities(url || "").replace(CTRL_CHARS, "").trim();
        if (!result) {
          return defaultUrl;
        }
        var firstChar = result[0];
        if (firstChar === "." || firstChar === "/") {
          return result;
        }
        var parsedUrlScheme = result.match(URL_SCHEME);
        if (!parsedUrlScheme) {
          return result;
        }
        var scheme = parsedUrlScheme[0];
        return INVALID_PROTOCOL.test(scheme) ? defaultUrl : result;
      };
      var Link = function(_a) {
        var _b;
        var annotation = _a.annotation, annotationContainerRef = _a.annotationContainerRef, doc = _a.doc, outlines = _a.outlines, page = _a.page, pageIndex = _a.pageIndex, scale = _a.scale, viewport = _a.viewport, onExecuteNamedAction = _a.onExecuteNamedAction, onJumpFromLinkAnnotation = _a.onJumpFromLinkAnnotation, onJumpToDest = _a.onJumpToDest;
        var elementRef = React__namespace.useRef();
        var title = outlines && outlines.length && annotation.dest && typeof annotation.dest === "string" ? (_b = outlines.find(function(item) {
          return item.dest === annotation.dest;
        })) === null || _b === void 0 ? void 0 : _b.title : "";
        var link = function(e) {
          e.preventDefault();
          annotation.action ? onExecuteNamedAction(annotation.action) : getDestination(doc, annotation.dest).then(function(target) {
            var element = elementRef.current;
            var annotationContainer = annotationContainerRef.current;
            if (element && annotationContainer) {
              var linkRect = element.getBoundingClientRect();
              annotationContainer.style.setProperty("height", "100%");
              annotationContainer.style.setProperty("width", "100%");
              var annotationLayerRect = annotationContainer.getBoundingClientRect();
              annotationContainer.style.removeProperty("height");
              annotationContainer.style.removeProperty("width");
              var leftOffset = (linkRect.left - annotationLayerRect.left) / scale;
              var bottomOffset = (annotationLayerRect.bottom - linkRect.bottom + linkRect.height) / scale;
              onJumpFromLinkAnnotation({
                bottomOffset,
                label: title,
                leftOffset,
                pageIndex
              });
            }
            onJumpToDest(target);
          });
        };
        var isRenderable = !!(annotation.url || annotation.dest || annotation.action || annotation.unsafeUrl);
        var attrs = {};
        if (annotation.url || annotation.unsafeUrl) {
          var targetUrl = sanitizeUrl(annotation.url || annotation.unsafeUrl, "");
          if (targetUrl) {
            attrs = {
              "data-target": "external",
              href: targetUrl,
              rel: "noopener noreferrer nofollow",
              target: annotation.newWindow ? "_blank" : "",
              title: targetUrl
            };
          } else {
            isRenderable = false;
          }
        } else {
          attrs = {
            href: "",
            "data-annotation-link": annotation.id,
            onClick: link
          };
        }
        if (title) {
          attrs = Object.assign({}, attrs, {
            title,
            "aria-label": title
          });
        }
        return React__namespace.createElement(Annotation, { annotation, hasPopup: false, ignoreBorder: false, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--link", "data-annotation-id": annotation.id, "data-testid": "core__annotation--link-".concat(annotation.id) }),
            React__namespace.createElement("a", __assign({ ref: elementRef }, attrs))
          );
        });
      };
      var Polygon = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var rect = annotation.rect;
        var width = rect[2] - rect[0];
        var height = rect[3] - rect[1];
        var borderWidth = annotation.borderStyle.width;
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--polygon", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }),
            annotation.vertices && annotation.vertices.length && React__namespace.createElement(
              "svg",
              { height: "".concat(height, "px"), preserveAspectRatio: "none", version: "1.1", viewBox: "0 0 ".concat(width, " ").concat(height), width: "".concat(width, "px") },
              React__namespace.createElement("polygon", { fill: "none", stroke: "transparent", strokeWidth: borderWidth || 1, points: annotation.vertices.map(function(item) {
                return "".concat(item.x - rect[0], ",").concat(rect[3] - item.y);
              }).join(" ") })
            ),
            props.slot.children
          );
        });
      };
      var Polyline = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var rect = annotation.rect;
        var width = rect[2] - rect[0];
        var height = rect[3] - rect[1];
        var borderWidth = annotation.borderStyle.width;
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--polyline", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }),
            annotation.vertices && annotation.vertices.length && React__namespace.createElement(
              "svg",
              { height: "".concat(height, "px"), preserveAspectRatio: "none", version: "1.1", viewBox: "0 0 ".concat(width, " ").concat(height), width: "".concat(width, "px") },
              React__namespace.createElement("polyline", { fill: "none", stroke: "transparent", strokeWidth: borderWidth || 1, points: annotation.vertices.map(function(item) {
                return "".concat(item.x - rect[0], ",").concat(rect[3] - item.y);
              }).join(" ") })
            ),
            props.slot.children
          );
        });
      };
      var Square = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var rect = annotation.rect;
        var width = rect[2] - rect[0];
        var height = rect[3] - rect[1];
        var borderWidth = annotation.borderStyle.width;
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            "div",
            __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--square", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }),
            React__namespace.createElement(
              "svg",
              { height: "".concat(height, "px"), preserveAspectRatio: "none", version: "1.1", viewBox: "0 0 ".concat(width, " ").concat(height), width: "".concat(width, "px") },
              React__namespace.createElement("rect", { height: height - borderWidth, fill: "none", stroke: "transparent", strokeWidth: borderWidth || 1, x: borderWidth / 2, y: borderWidth / 2, width: width - borderWidth })
            ),
            props.slot.children
          );
        });
      };
      var Squiggly = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--squiggly", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children);
        });
      };
      var Stamp = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--stamp", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children);
        });
      };
      var StrikeOut = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--strike-out", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children);
        });
      };
      var CommentIcon = function() {
        return React__namespace.createElement(
          Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M.5,16.5a1,1,0,0,0,1,1h2v4l4-4h15a1,1,0,0,0,1-1V3.5a1,1,0,0,0-1-1H1.5a1,1,0,0,0-1,1Z" }),
          React__namespace.createElement("path", { d: "M7.25,9.75A.25.25,0,1,1,7,10a.25.25,0,0,1,.25-.25" }),
          React__namespace.createElement("path", { d: "M12,9.75a.25.25,0,1,1-.25.25A.25.25,0,0,1,12,9.75" }),
          React__namespace.createElement("path", { d: "M16.75,9.75a.25.25,0,1,1-.25.25.25.25,0,0,1,.25-.25" })
        );
      };
      var HelpIcon = function() {
        return React__namespace.createElement(
          Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M0.500 12.001 A11.500 11.500 0 1 0 23.500 12.001 A11.500 11.500 0 1 0 0.500 12.001 Z" }),
          React__namespace.createElement("path", { d: "M6.000 12.001 A6.000 6.000 0 1 0 18.000 12.001 A6.000 6.000 0 1 0 6.000 12.001 Z" }),
          React__namespace.createElement("path", { d: "M21.423 5.406L17.415 9.414" }),
          React__namespace.createElement("path", { d: "M14.587 6.585L18.607 2.565" }),
          React__namespace.createElement("path", { d: "M5.405 21.424L9.413 17.416" }),
          React__namespace.createElement("path", { d: "M6.585 14.588L2.577 18.596" }),
          React__namespace.createElement("path", { d: "M18.602 21.419L14.595 17.412" }),
          React__namespace.createElement("path", { d: "M17.419 14.58L21.428 18.589" }),
          React__namespace.createElement("path", { d: "M2.582 5.399L6.588 9.406" }),
          React__namespace.createElement("path", { d: "M9.421 6.581L5.412 2.572" })
        );
      };
      var KeyIcon = function() {
        return React__namespace.createElement(
          Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M4.000 18.500 A1.500 1.500 0 1 0 7.000 18.500 A1.500 1.500 0 1 0 4.000 18.500 Z" }),
          React__namespace.createElement("path", { d: "M20.5.5l-9.782,9.783a7,7,0,1,0,3,3L17,10h1.5V8.5L19,8h1.5V6.5L21,6h1.5V4.5l1-1V.5Z" })
        );
      };
      var NoteIcon = function() {
        return React__namespace.createElement(
          Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M2.000 2.500 L22.000 2.500 L22.000 23.500 L2.000 23.500 Z" }),
          React__namespace.createElement("path", { d: "M6 4.5L6 0.5" }),
          React__namespace.createElement("path", { d: "M18 4.5L18 0.5" }),
          React__namespace.createElement("path", { d: "M10 4.5L10 0.5" }),
          React__namespace.createElement("path", { d: "M14 4.5L14 0.5" })
        );
      };
      var ParagraphIcon = function() {
        return React__namespace.createElement(
          Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M17.5 0.498L17.5 23.498" }),
          React__namespace.createElement("path", { d: "M10.5 0.498L10.5 23.498" }),
          React__namespace.createElement("path", { d: "M23.5.5H6.5a6,6,0,0,0,0,12h4" })
        );
      };
      var TriangleIcon = function() {
        return React__namespace.createElement(
          Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M2.5 22.995L12 6.005 21.5 22.995 2.5 22.995z" })
        );
      };
      var Text = function(_a) {
        var annotation = _a.annotation, childAnnotation = _a.childAnnotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        var name = annotation.name ? annotation.name.toLowerCase() : "";
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: false, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement(
            React__namespace.Fragment,
            null,
            React__namespace.createElement(
              "div",
              __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--text", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }),
              name && React__namespace.createElement(
                "div",
                { className: "rpv-core__annotation-text-icon" },
                name === "check" && React__namespace.createElement(CheckIcon, null),
                name === "comment" && React__namespace.createElement(CommentIcon, null),
                name === "help" && React__namespace.createElement(HelpIcon, null),
                name === "insert" && React__namespace.createElement(TriangleIcon, null),
                name === "key" && React__namespace.createElement(KeyIcon, null),
                name === "note" && React__namespace.createElement(NoteIcon, null),
                (name === "newparagraph" || name === "paragraph") && React__namespace.createElement(ParagraphIcon, null)
              ),
              props.slot.children
            ),
            childAnnotation && childAnnotation.annotationType === exports2.AnnotationType.Popup && props.popup.opened && React__namespace.createElement(Popup, { annotation: childAnnotation, page, viewport })
          );
        });
      };
      var Underline = function(_a) {
        var annotation = _a.annotation, page = _a.page, viewport = _a.viewport;
        var hasPopup = annotation.hasPopup === false;
        var title = getTitle(annotation);
        var contents = getContents(annotation);
        var isRenderable = !!(annotation.hasPopup || title || contents);
        return React__namespace.createElement(Annotation, { annotation, hasPopup, ignoreBorder: true, isRenderable, page, viewport }, function(props) {
          return React__namespace.createElement("div", __assign({}, props.slot.attrs, { className: "rpv-core__annotation rpv-core__annotation--underline", "data-annotation-id": annotation.id, onClick: props.popup.toggleOnClick, onMouseEnter: props.popup.openOnHover, onMouseLeave: props.popup.closeOnHover }), props.slot.children);
        });
      };
      var AnnotationLayerBody = function(_a) {
        var annotations = _a.annotations, doc = _a.doc, outlines = _a.outlines, page = _a.page, pageIndex = _a.pageIndex, plugins = _a.plugins, rotation = _a.rotation, scale = _a.scale, onExecuteNamedAction = _a.onExecuteNamedAction, onJumpFromLinkAnnotation = _a.onJumpFromLinkAnnotation, onJumpToDest = _a.onJumpToDest;
        var containerRef = React__namespace.useRef();
        var viewport = page.getViewport({ rotation, scale });
        var clonedViewPort = viewport.clone({ dontFlip: true });
        var filterAnnotations = annotations.filter(function(annotation) {
          return !annotation.parentId;
        });
        useIsomorphicLayoutEffect(function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          plugins.forEach(function(plugin) {
            if (plugin.onAnnotationLayerRender) {
              plugin.onAnnotationLayerRender({
                annotations: filterAnnotations,
                container,
                pageIndex,
                rotation,
                scale
              });
            }
          });
        }, []);
        return React__namespace.createElement("div", { ref: containerRef, className: "rpv-core__annotation-layer", "data-testid": "core__annotation-layer-".concat(pageIndex) }, filterAnnotations.map(function(annotation) {
          var childAnnotation = annotations.find(function(item) {
            return item.parentId === annotation.id;
          });
          switch (annotation.annotationType) {
            case exports2.AnnotationType.Caret:
              return React__namespace.createElement(Caret, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Circle:
              return React__namespace.createElement(Circle, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.FileAttachment:
              return React__namespace.createElement(FileAttachment, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.FreeText:
              return React__namespace.createElement(FreeText, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Highlight:
              return React__namespace.createElement(Highlight, { key: annotation.id, annotation, childAnnotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Ink:
              return React__namespace.createElement(Ink, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Line:
              return React__namespace.createElement(Line, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Link:
              return React__namespace.createElement(Link, { key: annotation.id, annotation, annotationContainerRef: containerRef, doc, outlines, page, pageIndex, scale, viewport: clonedViewPort, onExecuteNamedAction, onJumpFromLinkAnnotation, onJumpToDest });
            case exports2.AnnotationType.Polygon:
              return React__namespace.createElement(Polygon, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Polyline:
              return React__namespace.createElement(Polyline, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Popup:
              return React__namespace.createElement(Popup, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Square:
              return React__namespace.createElement(Square, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Squiggly:
              return React__namespace.createElement(Squiggly, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Stamp:
              return React__namespace.createElement(Stamp, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.StrikeOut:
              return React__namespace.createElement(StrikeOut, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Text:
              return React__namespace.createElement(Text, { key: annotation.id, annotation, childAnnotation, page, viewport: clonedViewPort });
            case exports2.AnnotationType.Underline:
              return React__namespace.createElement(Underline, { key: annotation.id, annotation, page, viewport: clonedViewPort });
            default:
              return React__namespace.createElement(React__namespace.Fragment, { key: annotation.id });
          }
        }));
      };
      var AnnotationLoader = function(_a) {
        var page = _a.page, renderAnnotations = _a.renderAnnotations;
        var isMounted = useIsMounted();
        var _b = React__namespace.useState({
          loading: true,
          annotations: []
        }), status = _b[0], setStatus = _b[1];
        React__namespace.useEffect(function() {
          page.getAnnotations({ intent: "display" }).then(function(result) {
            if (isMounted.current) {
              setStatus({
                loading: false,
                annotations: result
              });
            }
          });
        }, []);
        return status.loading ? React__namespace.createElement(React__namespace.Fragment, null) : renderAnnotations(status.annotations);
      };
      var AnnotationLayer = function(_a) {
        var doc = _a.doc, outlines = _a.outlines, page = _a.page, pageIndex = _a.pageIndex, plugins = _a.plugins, rotation = _a.rotation, scale = _a.scale, onExecuteNamedAction = _a.onExecuteNamedAction, onJumpFromLinkAnnotation = _a.onJumpFromLinkAnnotation, onJumpToDest = _a.onJumpToDest;
        var renderAnnotations = function(annotations) {
          return React__namespace.createElement(AnnotationLayerBody, { annotations, doc, outlines, page, pageIndex, plugins, rotation, scale, onExecuteNamedAction, onJumpFromLinkAnnotation, onJumpToDest });
        };
        return React__namespace.createElement(AnnotationLoader, { page, renderAnnotations });
      };
      var floatToRatio = function(x, limit) {
        var _a, _b;
        if (Math.floor(x) === x) {
          return [x, 1];
        }
        var y = 1 / x;
        if (y > limit) {
          return [1, limit];
        }
        if (Math.floor(y) === y) {
          return [1, y];
        }
        var value = x > 1 ? y : x;
        var a = 0;
        var b = 1;
        var c = 1;
        var d = 1;
        while (true) {
          var numerator = a + c;
          var denominator = b + d;
          if (denominator > limit) {
            break;
          }
          value <= numerator / denominator ? (_a = [numerator, denominator], c = _a[0], d = _a[1], _a) : (_b = [numerator, denominator], a = _b[0], b = _b[1], _b);
        }
        var middle = (a / b + c / d) / 2;
        return value < middle ? value === x ? [a, b] : [b, a] : value === x ? [c, d] : [d, c];
      };
      var roundToDivide = function(a, b) {
        var remainder = a % b;
        return remainder === 0 ? a : Math.floor(a - remainder);
      };
      var MAX_CANVAS_SIZE = 4096 * 4096;
      var CanvasLayer = function(_a) {
        var canvasLayerRef = _a.canvasLayerRef, height = _a.height, page = _a.page, pageIndex = _a.pageIndex, plugins = _a.plugins, rotation = _a.rotation, scale = _a.scale, width = _a.width, onRenderCanvasCompleted = _a.onRenderCanvasCompleted;
        var renderTask = React__namespace.useRef();
        useIsomorphicLayoutEffect(function() {
          var task = renderTask.current;
          if (task) {
            task.cancel();
          }
          var canvasEle = canvasLayerRef.current;
          canvasEle.removeAttribute("data-testid");
          plugins.forEach(function(plugin) {
            if (plugin.onCanvasLayerRender) {
              plugin.onCanvasLayerRender({
                ele: canvasEle,
                pageIndex,
                rotation,
                scale,
                status: exports2.LayerRenderStatus.PreRender
              });
            }
          });
          var viewport = page.getViewport({
            rotation,
            scale
          });
          var outputScale = window.devicePixelRatio || 1;
          var maxScale = Math.sqrt(MAX_CANVAS_SIZE / (viewport.width * viewport.height));
          var shouldScaleByCSS = outputScale > maxScale;
          shouldScaleByCSS ? canvasEle.style.transform = "scale(1, 1)" : canvasEle.style.removeProperty("transform");
          var possibleScale = Math.min(maxScale, outputScale);
          var _a2 = floatToRatio(possibleScale, 8), x = _a2[0], y = _a2[1];
          canvasEle.width = roundToDivide(viewport.width * possibleScale, x);
          canvasEle.height = roundToDivide(viewport.height * possibleScale, x);
          canvasEle.style.width = "".concat(roundToDivide(viewport.width, y), "px");
          canvasEle.style.height = "".concat(roundToDivide(viewport.height, y), "px");
          canvasEle.hidden = true;
          var canvasContext = canvasEle.getContext("2d", { alpha: false });
          var transform = shouldScaleByCSS || outputScale !== 1 ? [possibleScale, 0, 0, possibleScale, 0, 0] : null;
          renderTask.current = page.render({ canvasContext, transform, viewport });
          renderTask.current.promise.then(function() {
            canvasEle.hidden = false;
            canvasEle.setAttribute("data-testid", "core__canvas-layer-".concat(pageIndex));
            plugins.forEach(function(plugin) {
              if (plugin.onCanvasLayerRender) {
                plugin.onCanvasLayerRender({
                  ele: canvasEle,
                  pageIndex,
                  rotation,
                  scale,
                  status: exports2.LayerRenderStatus.DidRender
                });
              }
            });
            onRenderCanvasCompleted();
          }, function() {
            onRenderCanvasCompleted();
          });
          return function() {
            if (canvasEle) {
              canvasEle.width = 0;
              canvasEle.height = 0;
            }
          };
        }, []);
        return React__namespace.createElement(
          "div",
          { className: "rpv-core__canvas-layer", style: {
            height: "".concat(height, "px"),
            width: "".concat(width, "px")
          } },
          React__namespace.createElement("canvas", { ref: canvasLayerRef })
        );
      };
      var SvgLayer = function(_a) {
        var height = _a.height, page = _a.page, rotation = _a.rotation, scale = _a.scale, width = _a.width;
        var containerRef = React__namespace.useRef();
        var empty = function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          containerEle.innerHTML = "";
        };
        useIsomorphicLayoutEffect(function() {
          var containerEle = containerRef.current;
          var viewport = page.getViewport({ rotation, scale });
          page.getOperatorList().then(function(operatorList) {
            empty();
            var graphic = new PdfJsApi__namespace.SVGGraphics(page.commonObjs, page.objs);
            graphic.getSVG(operatorList, viewport).then(function(svg) {
              svg.style.height = "".concat(height, "px");
              svg.style.width = "".concat(width, "px");
              containerEle.appendChild(svg);
            });
          });
        }, []);
        return React__namespace.createElement("div", { className: "rpv-core__svg-layer", ref: containerRef });
      };
      var TextLayer = function(_a) {
        var containerRef = _a.containerRef, page = _a.page, pageIndex = _a.pageIndex, plugins = _a.plugins, rotation = _a.rotation, scale = _a.scale, onRenderTextCompleted = _a.onRenderTextCompleted;
        var renderTask = React__namespace.useRef();
        var empty = function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          var spans = [].slice.call(containerEle.querySelectorAll(".rpv-core__text-layer-text"));
          spans.forEach(function(span) {
            return containerEle.removeChild(span);
          });
          var breaks = [].slice.call(containerEle.querySelectorAll('br[role="presentation"]'));
          breaks.forEach(function(br) {
            return containerEle.removeChild(br);
          });
        };
        useIsomorphicLayoutEffect(function() {
          var task = renderTask.current;
          if (task) {
            task.cancel();
          }
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          containerEle.removeAttribute("data-testid");
          var viewport = page.getViewport({ rotation, scale });
          plugins.forEach(function(plugin) {
            if (plugin.onTextLayerRender) {
              plugin.onTextLayerRender({
                ele: containerEle,
                pageIndex,
                scale,
                status: exports2.LayerRenderStatus.PreRender
              });
            }
          });
          page.getTextContent().then(function(textContent) {
            empty();
            renderTask.current = PdfJsApi__namespace.renderTextLayer({
              container: containerEle,
              textContent,
              textContentSource: textContent,
              viewport
            });
            renderTask.current.promise.then(function() {
              containerEle.setAttribute("data-testid", "core__text-layer-".concat(pageIndex));
              var spans = [].slice.call(containerEle.children);
              spans.forEach(function(span) {
                if (!span.classList.contains("rpv-core__text-layer-text--not")) {
                  span.classList.add("rpv-core__text-layer-text");
                }
              });
              plugins.forEach(function(plugin) {
                if (plugin.onTextLayerRender) {
                  plugin.onTextLayerRender({
                    ele: containerEle,
                    pageIndex,
                    scale,
                    status: exports2.LayerRenderStatus.DidRender
                  });
                }
              });
              onRenderTextCompleted();
            }, function() {
              containerEle.removeAttribute("data-testid");
              onRenderTextCompleted();
            });
          });
          return function() {
            var _a2;
            empty();
            (_a2 = renderTask.current) === null || _a2 === void 0 ? void 0 : _a2.cancel();
          };
        }, []);
        return React__namespace.createElement("div", { className: "rpv-core__text-layer", ref: containerRef });
      };
      var PageLayer = function(_a) {
        var doc = _a.doc, measureRef = _a.measureRef, outlines = _a.outlines, pageIndex = _a.pageIndex, pageRotation = _a.pageRotation, pageSize = _a.pageSize, plugins = _a.plugins, renderPage = _a.renderPage, renderQueueKey = _a.renderQueueKey, rotation = _a.rotation, scale = _a.scale, shouldRender = _a.shouldRender, viewMode = _a.viewMode, onExecuteNamedAction = _a.onExecuteNamedAction, onJumpFromLinkAnnotation = _a.onJumpFromLinkAnnotation, onJumpToDest = _a.onJumpToDest, onRenderCompleted = _a.onRenderCompleted, onRotatePage = _a.onRotatePage;
        var isMounted = useIsMounted();
        var _b = React__namespace.useState(null), page = _b[0], setPage = _b[1];
        var _c = React__namespace.useState(false), canvasLayerRendered = _c[0], setCanvasLayerRendered = _c[1];
        var _d = React__namespace.useState(false), textLayerRendered = _d[0], setTextLayerRendered = _d[1];
        var canvasLayerRef = React__namespace.useRef();
        var textLayerRef = React__namespace.useRef();
        var isVertical = Math.abs(rotation + pageRotation) % 180 === 0;
        var scaledWidth = pageSize.pageWidth * scale;
        var scaledHeight = pageSize.pageHeight * scale;
        var w = isVertical ? scaledWidth : scaledHeight;
        var h = isVertical ? scaledHeight : scaledWidth;
        var rotationValue = (pageSize.rotation + rotation + pageRotation) % 360;
        var renderQueueKeyRef = React__namespace.useRef(0);
        var determinePageInstance = function() {
          getPage(doc, pageIndex).then(function(pdfPage) {
            if (isMounted.current) {
              renderQueueKeyRef.current = renderQueueKey;
              setPage(pdfPage);
            }
          });
        };
        var defaultPageRenderer = function(props) {
          return React__namespace.createElement(
            React__namespace.Fragment,
            null,
            props.canvasLayer.children,
            props.textLayer.children,
            props.annotationLayer.children
          );
        };
        var renderPageLayer = renderPage || defaultPageRenderer;
        var handleRenderCanvasCompleted = function() {
          if (isMounted.current) {
            setCanvasLayerRendered(true);
          }
        };
        var handleRenderTextCompleted = function() {
          if (isMounted.current) {
            setTextLayerRendered(true);
          }
        };
        React__namespace.useEffect(function() {
          setPage(null);
          setCanvasLayerRendered(false);
          setTextLayerRendered(false);
        }, [pageRotation, rotation, scale]);
        React__namespace.useEffect(function() {
          if (shouldRender && isMounted.current && !page) {
            determinePageInstance();
          }
        }, [shouldRender, page]);
        React__namespace.useEffect(function() {
          if (canvasLayerRendered && textLayerRendered) {
            if (renderQueueKey !== renderQueueKeyRef.current) {
              setPage(null);
              setCanvasLayerRendered(false);
              setTextLayerRendered(false);
            } else {
              onRenderCompleted(pageIndex);
            }
          }
        }, [canvasLayerRendered, textLayerRendered]);
        return React__namespace.createElement("div", { className: classNames({
          "rpv-core__page-layer": true,
          "rpv-core__page-layer--dual": viewMode === exports2.ViewMode.DualPage,
          "rpv-core__page-layer--dual-cover": viewMode === exports2.ViewMode.DualPageWithCover,
          "rpv-core__page-layer--single": viewMode === exports2.ViewMode.SinglePage
        }), "data-testid": "core__page-layer-".concat(pageIndex), ref: measureRef, style: {
          height: "".concat(h, "px"),
          width: "".concat(w, "px")
        } }, !page ? React__namespace.createElement(Spinner, { testId: "core__page-layer-loading-".concat(pageIndex) }) : React__namespace.createElement(
          React__namespace.Fragment,
          null,
          renderPageLayer({
            annotationLayer: {
              attrs: {},
              children: React__namespace.createElement(AnnotationLayer, { doc, outlines, page, pageIndex, plugins, rotation: rotationValue, scale, onExecuteNamedAction, onJumpFromLinkAnnotation, onJumpToDest })
            },
            canvasLayer: {
              attrs: {},
              children: React__namespace.createElement(CanvasLayer, { canvasLayerRef, height: h, page, pageIndex, plugins, rotation: rotationValue, scale, width: w, onRenderCanvasCompleted: handleRenderCanvasCompleted })
            },
            canvasLayerRendered,
            doc,
            height: h,
            pageIndex,
            rotation: rotationValue,
            scale,
            svgLayer: {
              attrs: {},
              children: React__namespace.createElement(SvgLayer, { height: h, page, rotation: rotationValue, scale, width: w })
            },
            textLayer: {
              attrs: {},
              children: React__namespace.createElement(TextLayer, { containerRef: textLayerRef, page, pageIndex, plugins, rotation: rotationValue, scale, onRenderTextCompleted: handleRenderTextCompleted })
            },
            textLayerRendered,
            width: w,
            markRendered: onRenderCompleted,
            onRotatePage: function(direction) {
              return onRotatePage(pageIndex, direction);
            }
          }),
          plugins.map(function(plugin, idx) {
            return plugin.renderPageLayer ? React__namespace.createElement(React__namespace.Fragment, { key: idx }, plugin.renderPageLayer({
              canvasLayerRef,
              canvasLayerRendered,
              doc,
              height: h,
              pageIndex,
              rotation: rotationValue,
              scale,
              textLayerRef,
              textLayerRendered,
              width: w
            })) : React__namespace.createElement(React__namespace.Fragment, { key: idx });
          })
        ));
      };
      var getFileExt = function(url) {
        var str = url.split(/\./).pop();
        return str ? str.toLowerCase() : "";
      };
      var rectReducer = function(state, action) {
        var rect = action.rect;
        return state.height !== rect.height || state.width !== rect.width ? rect : state;
      };
      var useMeasureRect = function(_a) {
        var elementRef = _a.elementRef;
        var _b = React__namespace.useState(elementRef.current), element = _b[0], setElement = _b[1];
        var initializedRectRef = React__namespace.useRef(false);
        var _c = React__namespace.useReducer(rectReducer, { height: 0, width: 0 }), rect = _c[0], dispatch = _c[1];
        useIsomorphicLayoutEffect(function() {
          if (elementRef.current !== element) {
            setElement(elementRef.current);
          }
        });
        useIsomorphicLayoutEffect(function() {
          if (element && !initializedRectRef.current) {
            initializedRectRef.current = true;
            var _a2 = element.getBoundingClientRect(), height = _a2.height, width = _a2.width;
            dispatch({
              rect: { height, width }
            });
          }
        }, [element]);
        React__namespace.useEffect(function() {
          if (!element) {
            return;
          }
          var tracker = new ResizeObserver(function(entries, __) {
            entries.forEach(function(entry) {
              if (entry.target === element) {
                var _a2 = entry.contentRect, height = _a2.height, width = _a2.width;
                dispatch({
                  rect: { height, width }
                });
              }
            });
          });
          tracker.observe(element);
          return function() {
            tracker.unobserve(element);
          };
        }, [element]);
        return rect;
      };
      var ScrollDirection;
      (function(ScrollDirection2) {
        ScrollDirection2["Horizontal"] = "Horizontal";
        ScrollDirection2["Vertical"] = "Vertical";
        ScrollDirection2["Both"] = "Both";
      })(ScrollDirection || (ScrollDirection = {}));
      var easeOutQuart = function(t) {
        return 1 - Math.pow(1 - t, 4);
      };
      var EPS = 1e-4;
      var smoothScroll = function(ele, scrollDirection, targetPosition, duration, easing, onReachTarget) {
        if (easing === void 0) {
          easing = function(t) {
            return t;
          };
        }
        if (onReachTarget === void 0) {
          onReachTarget = function() {
          };
        }
        var top = 0;
        var left = 0;
        var reachTarget = false;
        switch (scrollDirection) {
          case ScrollDirection.Horizontal:
            left = ele.scrollLeft;
            top = 0;
          case ScrollDirection.Both:
            left = ele.scrollLeft;
            top = ele.scrollTop;
            break;
          case ScrollDirection.Vertical:
          default:
            left = 0;
            top = ele.scrollTop;
            break;
        }
        var markTargetReached = function() {
          if (!reachTarget) {
            reachTarget = true;
            ele.scrollLeft = targetPosition.left;
            ele.scrollTop = targetPosition.top;
            onReachTarget();
          }
        };
        if (Math.abs(top - targetPosition.top) <= EPS && scrollDirection === ScrollDirection.Vertical) {
          markTargetReached();
          return;
        }
        if (Math.abs(left - targetPosition.left) <= EPS && scrollDirection === ScrollDirection.Horizontal) {
          markTargetReached();
          return;
        }
        var startTime = -1;
        var requestId;
        var offset = {
          left: left - targetPosition.left,
          top: top - targetPosition.top
        };
        var loop = function(currentTime) {
          if (startTime === -1) {
            startTime = currentTime;
          }
          var time = currentTime - startTime;
          var percent = Math.min(time / duration, 1);
          var easedPercent = easing(percent);
          var updatePosition = {
            left: left - offset.left * easedPercent,
            top: top - offset.top * easedPercent
          };
          switch (scrollDirection) {
            case ScrollDirection.Horizontal:
              ele.scrollLeft = updatePosition.left;
              break;
            case ScrollDirection.Both:
              ele.scrollLeft = updatePosition.left;
              ele.scrollTop = updatePosition.top;
              break;
            case ScrollDirection.Vertical:
            default:
              ele.scrollTop = updatePosition.top;
              break;
          }
          if (Math.abs(updatePosition.top - targetPosition.top) <= EPS && Math.abs(updatePosition.left - targetPosition.left) <= EPS && !reachTarget) {
            window.cancelAnimationFrame(requestId);
            markTargetReached();
          }
          if (time < duration) {
            requestId = window.requestAnimationFrame(loop);
          } else {
            window.cancelAnimationFrame(requestId);
          }
        };
        requestId = window.requestAnimationFrame(loop);
      };
      var ZERO_OFFSET$6 = {
        left: 0,
        top: 0
      };
      var SCROLL_EVENT_OPTIONS = {
        capture: false,
        passive: true
      };
      var SCROLL_DURATION = 400;
      var useScroll = function(_a) {
        var elementRef = _a.elementRef, enableSmoothScroll = _a.enableSmoothScroll, isRtl = _a.isRtl, scrollDirection = _a.scrollDirection, onSmoothScroll = _a.onSmoothScroll;
        var _b = React__namespace.useState(ZERO_OFFSET$6), scrollOffset = _b[0], setScrollOffset = _b[1];
        var _c = React__namespace.useState(elementRef.current), element = _c[0], setElement = _c[1];
        var factor = isRtl ? -1 : 1;
        var latestRef = React__namespace.useRef(scrollDirection);
        latestRef.current = scrollDirection;
        var latestOffsetRef = React__namespace.useRef(ZERO_OFFSET$6);
        var isSmoothScrollingDoneRef = React__namespace.useRef(true);
        var handleSmoothScrollingComplete = React__namespace.useCallback(function() {
          isSmoothScrollingDoneRef.current = true;
          if (enableSmoothScroll) {
            setScrollOffset(latestOffsetRef.current);
          }
          onSmoothScroll(false);
        }, []);
        var handleScroll = React__namespace.useCallback(function() {
          if (!element) {
            return;
          }
          switch (latestRef.current) {
            case ScrollDirection.Horizontal:
              latestOffsetRef.current = {
                left: factor * element.scrollLeft,
                top: 0
              };
              break;
            case ScrollDirection.Both:
              latestOffsetRef.current = {
                left: factor * element.scrollLeft,
                top: element.scrollTop
              };
              break;
            case ScrollDirection.Vertical:
            default:
              latestOffsetRef.current = {
                left: 0,
                top: element.scrollTop
              };
              break;
          }
          if (!enableSmoothScroll || isSmoothScrollingDoneRef.current) {
            setScrollOffset(latestOffsetRef.current);
          }
        }, [element]);
        useIsomorphicLayoutEffect(function() {
          setElement(elementRef.current);
        });
        useIsomorphicLayoutEffect(function() {
          if (!element) {
            return;
          }
          element.addEventListener("scroll", handleScroll, SCROLL_EVENT_OPTIONS);
          return function() {
            element.removeEventListener("scroll", handleScroll, SCROLL_EVENT_OPTIONS);
          };
        }, [element]);
        var scrollTo = React__namespace.useCallback(function(targetPosition, withSmoothScroll) {
          var ele = elementRef.current;
          if (!ele) {
            return Promise.resolve();
          }
          var updatePosition = {
            left: 0,
            top: 0
          };
          switch (latestRef.current) {
            case ScrollDirection.Horizontal:
              updatePosition.left = factor * targetPosition.left;
              break;
            case ScrollDirection.Both:
              updatePosition.left = factor * targetPosition.left;
              updatePosition.top = targetPosition.top;
              break;
            case ScrollDirection.Vertical:
            default:
              updatePosition.top = targetPosition.top;
              break;
          }
          if (withSmoothScroll) {
            isSmoothScrollingDoneRef.current = false;
            onSmoothScroll(true);
            return new Promise(function(resolve, _) {
              smoothScroll(ele, latestRef.current, updatePosition, SCROLL_DURATION, easeOutQuart, function() {
                handleSmoothScrollingComplete();
                resolve();
              });
            });
          }
          return new Promise(function(resolve, _) {
            switch (latestRef.current) {
              case ScrollDirection.Horizontal:
                ele.scrollLeft = updatePosition.left;
                break;
              case ScrollDirection.Both:
                ele.scrollLeft = updatePosition.left;
                ele.scrollTop = updatePosition.top;
                break;
              case ScrollDirection.Vertical:
              default:
                ele.scrollTop = updatePosition.top;
                break;
            }
            resolve();
          });
        }, [elementRef]);
        return {
          scrollOffset,
          scrollTo
        };
      };
      var clamp = function(min, max, value) {
        return Math.max(min, Math.min(value, max));
      };
      var indexOfMax = function(arr) {
        return arr.reduce(function(prev, curr, i, a) {
          return curr > a[prev] ? i : prev;
        }, 0);
      };
      var buildContainerStyles = function(totalSize, scrollMode) {
        switch (scrollMode) {
          case exports2.ScrollMode.Horizontal:
            return {
              position: "relative",
              height: "100%",
              width: "".concat(totalSize.width, "px")
            };
          case exports2.ScrollMode.Vertical:
          default:
            return {
              position: "relative",
              height: "".concat(totalSize.height, "px"),
              width: "100%"
            };
        }
      };
      var buildItemContainerStyles = function(item, parentRect, scrollMode) {
        return scrollMode !== exports2.ScrollMode.Page ? {} : {
          height: "".concat(parentRect.height, "px"),
          width: "100%",
          position: "absolute",
          top: 0,
          transform: "translateY(".concat(item.start.top, "px)")
        };
      };
      var hasDifferentSizes = function(sizes) {
        var numberOfItems = sizes.length;
        if (numberOfItems === 1) {
          return false;
        }
        for (var i = 1; i < numberOfItems; i++) {
          if (sizes[i].height !== sizes[0].height || sizes[i].width !== sizes[0].width) {
            return true;
          }
        }
        return false;
      };
      var getMinWidthOfCover = function(sizes, viewMode) {
        if (viewMode !== exports2.ViewMode.DualPageWithCover) {
          return 0;
        }
        if (!hasDifferentSizes(sizes)) {
          return 2 * sizes[0].width;
        }
        var chunkWidths = chunk(sizes.slice(1), 2).map(function(eachChunk) {
          return eachChunk.length === 2 ? eachChunk[0].width + eachChunk[1].width : eachChunk[0].width;
        });
        var widths = [sizes[0].width].concat(chunkWidths);
        return Math.max.apply(Math, widths);
      };
      var buildItemStyles = function(item, isRtl, sizes, viewMode, scrollMode) {
        var _a, _b, _c, _d, _e, _f, _g;
        var sideProperty = isRtl ? "right" : "left";
        var factor = isRtl ? -1 : 1;
        var numberOfItems = sizes.length;
        var left = item.start.left * factor;
        var _h = item.size, height = _h.height, width = _h.width;
        if (viewMode === exports2.ViewMode.DualPageWithCover) {
          var transformTop = scrollMode === exports2.ScrollMode.Page ? 0 : item.start.top;
          if (item.index === 0 || numberOfItems % 2 === 0 && item.index === numberOfItems - 1) {
            return _a = {
              height: "".concat(height, "px"),
              minWidth: "".concat(getMinWidthOfCover(sizes, viewMode), "px"),
              width: "100%"
            }, _a[sideProperty] = 0, _a.position = "absolute", _a.top = 0, _a.transform = "translate(".concat(left, "px, ").concat(transformTop, "px)"), _a;
          }
          return _b = {
            height: "".concat(height, "px"),
            width: "".concat(width, "px")
          }, _b[sideProperty] = 0, _b.position = "absolute", _b.top = 0, _b.transform = "translate(".concat(left, "px, ").concat(transformTop, "px)"), _b;
        }
        if (viewMode === exports2.ViewMode.DualPage) {
          return _c = {
            height: "".concat(height, "px"),
            width: "".concat(width, "px")
          }, _c[sideProperty] = 0, _c.position = "absolute", _c.top = 0, _c.transform = "translate(".concat(left, "px, ").concat(scrollMode === exports2.ScrollMode.Page ? 0 : item.start.top, "px)"), _c;
        }
        switch (scrollMode) {
          case exports2.ScrollMode.Horizontal:
            return _d = {
              height: "100%",
              width: "".concat(width, "px")
            }, _d[sideProperty] = 0, _d.position = "absolute", _d.top = 0, _d.transform = "translateX(".concat(left, "px)"), _d;
          case exports2.ScrollMode.Page:
            return _e = {
              height: "".concat(height, "px"),
              width: "".concat(width, "px")
            }, _e[sideProperty] = 0, _e.position = "absolute", _e.top = 0, _e;
          case exports2.ScrollMode.Wrapped:
            return _f = {
              height: "".concat(height, "px"),
              width: "".concat(width, "px")
            }, _f[sideProperty] = 0, _f.position = "absolute", _f.top = 0, _f.transform = "translate(".concat(left, "px, ").concat(item.start.top, "px)"), _f;
          case exports2.ScrollMode.Vertical:
          default:
            return _g = {
              height: "".concat(height, "px"),
              width: "100%"
            }, _g[sideProperty] = 0, _g.position = "absolute", _g.top = 0, _g.transform = "translateY(".concat(item.start.top, "px)"), _g;
        }
      };
      var findNearest = function(low, high, value, getItemValue) {
        while (low <= high) {
          var middle = (low + high) / 2 | 0;
          var currentValue = getItemValue(middle);
          if (currentValue < value) {
            low = middle + 1;
          } else if (currentValue > value) {
            high = middle - 1;
          } else {
            return middle;
          }
        }
        return low > 0 ? low - 1 : 0;
      };
      var calculateRange = function(scrollDirection, measurements, outerSize, scrollOffset) {
        var currentOffset = 0;
        switch (scrollDirection) {
          case ScrollDirection.Horizontal:
            currentOffset = scrollOffset.left;
            break;
          case ScrollDirection.Vertical:
          default:
            currentOffset = scrollOffset.top;
            break;
        }
        var size = measurements.length - 1;
        var getOffset = function(index) {
          switch (scrollDirection) {
            case ScrollDirection.Horizontal:
              return measurements[index].start.left;
            case ScrollDirection.Both:
            case ScrollDirection.Vertical:
            default:
              return measurements[index].start.top;
          }
        };
        var start = findNearest(0, size, currentOffset, getOffset);
        if (scrollDirection === ScrollDirection.Both) {
          var startTop = measurements[start].start.top;
          while (start - 1 >= 0 && measurements[start - 1].start.top === startTop && measurements[start - 1].start.left >= scrollOffset.left) {
            start--;
          }
        }
        var end = start;
        while (end <= size) {
          var topLeftCorner = {
            top: measurements[end].start.top - scrollOffset.top,
            left: measurements[end].start.left - scrollOffset.left
          };
          var visibleSize = {
            height: outerSize.height - topLeftCorner.top,
            width: outerSize.width - topLeftCorner.left
          };
          if (scrollDirection === ScrollDirection.Horizontal && visibleSize.width < 0) {
            break;
          }
          if (scrollDirection === ScrollDirection.Vertical && visibleSize.height < 0) {
            break;
          }
          if (scrollDirection === ScrollDirection.Both && (visibleSize.width < 0 || visibleSize.height < 0)) {
            break;
          }
          end++;
        }
        return {
          start,
          end
        };
      };
      var ZERO_OFFSET$5 = {
        left: 0,
        top: 0
      };
      var measure = function(numberOfItems, parentRect, sizes, scrollMode) {
        var measurements = [];
        var totalWidth = 0;
        var firstOfRow = {
          left: 0,
          top: 0
        };
        var maxHeight = 0;
        var start = ZERO_OFFSET$5;
        for (var i = 0; i < numberOfItems; i++) {
          var size = sizes[i];
          if (i === 0) {
            totalWidth = size.width;
            firstOfRow = {
              left: 0,
              top: 0
            };
            maxHeight = size.height;
          } else {
            switch (scrollMode) {
              case exports2.ScrollMode.Wrapped:
                totalWidth += size.width;
                if (totalWidth < parentRect.width) {
                  start = {
                    left: measurements[i - 1].end.left,
                    top: firstOfRow.top
                  };
                  maxHeight = Math.max(maxHeight, size.height);
                } else {
                  totalWidth = size.width;
                  start = {
                    left: firstOfRow.left,
                    top: firstOfRow.top + maxHeight
                  };
                  firstOfRow = {
                    left: start.left,
                    top: start.top
                  };
                  maxHeight = size.height;
                }
                break;
              case exports2.ScrollMode.Horizontal:
              case exports2.ScrollMode.Vertical:
              default:
                start = measurements[i - 1].end;
                break;
            }
          }
          var end = {
            left: start.left + size.width,
            top: start.top + size.height
          };
          measurements[i] = {
            index: i,
            start,
            size,
            end,
            visibility: -1
          };
        }
        return measurements;
      };
      var ZERO_OFFSET$4 = {
        left: 0,
        top: 0
      };
      var measureDualPage = function(numberOfItems, parentRect, sizes, scrollMode) {
        var measurements = [];
        var top = 0;
        var maxHeight = 0;
        var start = ZERO_OFFSET$4;
        for (var i = 0; i < numberOfItems; i++) {
          var size = {
            height: scrollMode === exports2.ScrollMode.Page ? Math.max(parentRect.height, sizes[i].height) : sizes[i].height,
            width: Math.max(parentRect.width / 2, sizes[i].width)
          };
          if (scrollMode === exports2.ScrollMode.Page) {
            start = {
              left: i % 2 === 0 ? 0 : size.width,
              top: Math.floor(i / 2) * size.height
            };
          } else {
            if (i % 2 === 0) {
              top = top + maxHeight;
              start = {
                left: 0,
                top
              };
              maxHeight = i === numberOfItems - 1 ? sizes[i].height : Math.max(sizes[i].height, sizes[i + 1].height);
            } else {
              start = {
                left: measurements[i - 1].end.left,
                top
              };
            }
          }
          var end = {
            left: start.left + size.width,
            top: start.top + size.height
          };
          measurements[i] = {
            index: i,
            start,
            size,
            end,
            visibility: -1
          };
        }
        return measurements;
      };
      var ZERO_OFFSET$3 = {
        left: 0,
        top: 0
      };
      var measureDualPageWithCover = function(numberOfItems, parentRect, sizes, scrollMode) {
        var measurements = [];
        var top = 0;
        var maxHeight = 0;
        var start = ZERO_OFFSET$3;
        for (var i = 0; i < numberOfItems; i++) {
          var size = i === 0 ? {
            height: scrollMode === exports2.ScrollMode.Page ? Math.max(parentRect.height, sizes[i].height) : sizes[i].height,
            width: scrollMode === exports2.ScrollMode.Page ? Math.max(parentRect.width, sizes[i].width) : sizes[i].width
          } : {
            height: scrollMode === exports2.ScrollMode.Page ? Math.max(parentRect.height, sizes[i].height) : sizes[i].height,
            width: Math.max(parentRect.width / 2, sizes[i].width)
          };
          if (scrollMode === exports2.ScrollMode.Page) {
            start = i === 0 ? ZERO_OFFSET$3 : {
              left: i % 2 === 0 ? size.width : 0,
              top: Math.floor((i - 1) / 2) * size.height + measurements[0].end.top
            };
          } else {
            if (i === 0) {
              start = ZERO_OFFSET$3;
              top = sizes[0].height;
              maxHeight = 0;
            } else if (i % 2 === 1) {
              top = top + maxHeight;
              start = {
                left: 0,
                top
              };
              maxHeight = i === numberOfItems - 1 ? sizes[i].height : Math.max(sizes[i].height, sizes[i + 1].height);
            } else {
              start = {
                left: measurements[i - 1].end.left,
                top
              };
            }
          }
          var end = {
            left: start.left + size.width,
            top: start.top + size.height
          };
          measurements[i] = {
            index: i,
            start,
            size,
            end,
            visibility: -1
          };
        }
        return measurements;
      };
      var ZERO_OFFSET$2 = {
        left: 0,
        top: 0
      };
      var measureSinglePage = function(numberOfItems, parentRect, sizes) {
        var measurements = [];
        for (var i = 0; i < numberOfItems; i++) {
          var size = {
            height: Math.max(parentRect.height, sizes[i].height),
            width: Math.max(parentRect.width, sizes[i].width)
          };
          var start = i === 0 ? ZERO_OFFSET$2 : measurements[i - 1].end;
          var end = {
            left: start.left + size.width,
            top: start.top + size.height
          };
          measurements[i] = {
            index: i,
            start,
            size,
            end,
            visibility: -1
          };
        }
        return measurements;
      };
      var ZERO_RECT$2 = {
        height: 0,
        width: 0
      };
      var ZERO_OFFSET$1 = {
        left: 0,
        top: 0
      };
      var COMPARE_EPSILON = 1e-12;
      var VIRTUAL_INDEX_ATTR = "data-virtual-index";
      var IO_THRESHOLD = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1];
      var useVirtual = function(_a) {
        var enableSmoothScroll = _a.enableSmoothScroll, isRtl = _a.isRtl, numberOfItems = _a.numberOfItems, parentRef = _a.parentRef, setRenderRange = _a.setRenderRange, sizes = _a.sizes, scrollMode = _a.scrollMode, viewMode = _a.viewMode;
        var _b = React__namespace.useState(false), isSmoothScrolling = _b[0], setSmoothScrolling = _b[1];
        var onSmoothScroll = React__namespace.useCallback(function(isSmoothScrolling2) {
          return setSmoothScrolling(isSmoothScrolling2);
        }, []);
        var scrollModeRef = React__namespace.useRef(scrollMode);
        scrollModeRef.current = scrollMode;
        var viewModeRef = React__namespace.useRef(viewMode);
        viewModeRef.current = viewMode;
        var scrollDirection = scrollMode === exports2.ScrollMode.Wrapped || viewMode === exports2.ViewMode.DualPageWithCover || viewMode === exports2.ViewMode.DualPage ? ScrollDirection.Both : scrollMode === exports2.ScrollMode.Horizontal ? ScrollDirection.Horizontal : ScrollDirection.Vertical;
        var _c = useScroll({
          elementRef: parentRef,
          enableSmoothScroll,
          isRtl,
          scrollDirection,
          onSmoothScroll
        }), scrollOffset = _c.scrollOffset, scrollTo = _c.scrollTo;
        var parentRect = useMeasureRect({
          elementRef: parentRef
        });
        var latestRef = React__namespace.useRef({
          scrollOffset: ZERO_OFFSET$1,
          measurements: []
        });
        latestRef.current.scrollOffset = scrollOffset;
        var defaultVisibilities = React__namespace.useMemo(function() {
          return Array(numberOfItems).fill(-1);
        }, []);
        var _d = React__namespace.useState(defaultVisibilities), visibilities = _d[0], setVisibilities = _d[1];
        var intersectionTracker = React__namespace.useMemo(function() {
          var io = new IntersectionObserver(function(entries) {
            entries.forEach(function(entry) {
              var ratio = entry.isIntersecting ? entry.intersectionRatio : -1;
              var target = entry.target;
              var indexAttribute = target.getAttribute(VIRTUAL_INDEX_ATTR);
              if (!indexAttribute) {
                return;
              }
              var index = parseInt(indexAttribute, 10);
              if (0 <= index && index < numberOfItems) {
                setVisibilities(function(old) {
                  old[index] = ratio;
                  return __spreadArray([], old, true);
                });
              }
            });
          }, {
            threshold: IO_THRESHOLD
          });
          return io;
        }, []);
        var measurements = React__namespace.useMemo(function() {
          if (scrollMode === exports2.ScrollMode.Page && viewMode === exports2.ViewMode.SinglePage) {
            return measureSinglePage(numberOfItems, parentRect, sizes);
          }
          if (viewMode === exports2.ViewMode.DualPageWithCover) {
            return measureDualPageWithCover(numberOfItems, parentRect, sizes, scrollMode);
          }
          if (viewMode === exports2.ViewMode.DualPage) {
            return measureDualPage(numberOfItems, parentRect, sizes, scrollMode);
          }
          return measure(numberOfItems, parentRect, sizes, scrollMode);
        }, [scrollMode, sizes, viewMode, parentRect]);
        var totalSize = measurements[numberOfItems - 1] ? {
          height: measurements[numberOfItems - 1].end.top,
          width: measurements[numberOfItems - 1].end.left
        } : ZERO_RECT$2;
        latestRef.current.measurements = measurements;
        var _e = React__namespace.useMemo(function() {
          var _a2 = calculateRange(scrollDirection, measurements, parentRect, scrollOffset), start = _a2.start, end = _a2.end;
          var visiblePageVisibilities = visibilities.slice(clamp(0, numberOfItems, start), clamp(0, numberOfItems, end));
          var maxVisbilityItem = start + indexOfMax(visiblePageVisibilities);
          maxVisbilityItem = clamp(0, numberOfItems - 1, maxVisbilityItem);
          var maxVisbilityIndex2 = maxVisbilityItem;
          var _b2 = setRenderRange({
            endPage: end,
            numPages: numberOfItems,
            startPage: start
          }), startPage2 = _b2.startPage, endPage2 = _b2.endPage;
          startPage2 = Math.max(startPage2, 0);
          endPage2 = Math.min(endPage2, numberOfItems - 1);
          switch (viewMode) {
            case exports2.ViewMode.DualPageWithCover:
              if (maxVisbilityItem > 0) {
                maxVisbilityIndex2 = maxVisbilityItem % 2 === 1 ? maxVisbilityItem : maxVisbilityItem - 1;
              }
              startPage2 = startPage2 === 0 ? 0 : startPage2 % 2 === 1 ? startPage2 : startPage2 - 1;
              endPage2 = endPage2 % 2 === 1 ? endPage2 - 1 : endPage2;
              if (numberOfItems - endPage2 <= 2) {
                endPage2 = numberOfItems - 1;
              }
              break;
            case exports2.ViewMode.DualPage:
              maxVisbilityIndex2 = maxVisbilityItem % 2 === 0 ? maxVisbilityItem : maxVisbilityItem - 1;
              startPage2 = startPage2 % 2 === 0 ? startPage2 : startPage2 - 1;
              endPage2 = endPage2 % 2 === 1 ? endPage2 : endPage2 - 1;
              break;
            case exports2.ViewMode.SinglePage:
            default:
              maxVisbilityIndex2 = maxVisbilityItem;
              break;
          }
          return {
            startPage: startPage2,
            endPage: endPage2,
            maxVisbilityIndex: maxVisbilityIndex2
          };
        }, [measurements, parentRect, scrollOffset, viewMode, visibilities]), startPage = _e.startPage, endPage = _e.endPage, maxVisbilityIndex = _e.maxVisbilityIndex;
        var virtualItems = React__namespace.useMemo(function() {
          var virtualItems2 = [];
          var _loop_1 = function(i2) {
            var item = measurements[i2];
            var virtualItem = __assign(__assign({}, item), { visibility: visibilities[i2] !== void 0 ? visibilities[i2] : -1, measureRef: function(ele) {
              if (!ele) {
                return;
              }
              ele.setAttribute(VIRTUAL_INDEX_ATTR, "".concat(i2));
              intersectionTracker.observe(ele);
            } });
            virtualItems2.push(virtualItem);
          };
          for (var i = startPage; i <= endPage; i++) {
            _loop_1(i);
          }
          return virtualItems2;
        }, [startPage, endPage, visibilities, measurements]);
        var scrollToItem = React__namespace.useCallback(function(index, offset) {
          var measurements2 = latestRef.current.measurements;
          var normalizedIndex = clamp(0, numberOfItems - 1, index);
          var measurement = measurements2[normalizedIndex];
          var withOffset = scrollModeRef.current === exports2.ScrollMode.Page ? ZERO_OFFSET$1 : offset;
          return measurement ? scrollTo({
            left: withOffset.left + measurement.start.left,
            top: withOffset.top + measurement.start.top
          }, enableSmoothScroll) : Promise.resolve();
        }, [scrollTo, enableSmoothScroll]);
        var scrollToSmallestItemAbove = React__namespace.useCallback(function(index, offset) {
          var measurements2 = latestRef.current.measurements;
          var start = measurements2[index].start;
          var nextItem = measurements2.find(function(item) {
            return item.start.top - start.top > COMPARE_EPSILON;
          });
          if (!nextItem) {
            return Promise.resolve();
          }
          var nextIndex = nextItem.index;
          switch (viewModeRef.current) {
            case exports2.ViewMode.DualPage:
              nextIndex = nextIndex % 2 === 0 ? nextIndex : nextIndex + 1;
              break;
            case exports2.ViewMode.DualPageWithCover:
              nextIndex = nextIndex % 2 === 1 ? nextIndex : nextIndex + 1;
              break;
          }
          return scrollToItem(nextIndex, offset);
        }, []);
        var scrollToBiggestItemBelow = React__namespace.useCallback(function(index, offset) {
          var measurements2 = latestRef.current.measurements;
          var start = measurements2[index].start;
          var prevIndex = index;
          var found = false;
          for (var i = numberOfItems - 1; i >= 0; i--) {
            if (start.top - measurements2[i].start.top > COMPARE_EPSILON) {
              found = true;
              prevIndex = measurements2[i].index;
              break;
            }
          }
          if (!found) {
            return Promise.resolve();
          }
          switch (viewModeRef.current) {
            case exports2.ViewMode.DualPage:
              prevIndex = prevIndex % 2 === 0 ? prevIndex : prevIndex - 1;
              break;
            case exports2.ViewMode.DualPageWithCover:
              prevIndex = prevIndex % 2 === 0 ? prevIndex - 1 : prevIndex;
              break;
          }
          if (prevIndex === index) {
            prevIndex = index - 1;
          }
          return scrollToItem(prevIndex, offset);
        }, []);
        var scrollToNextItem = React__namespace.useCallback(function(index, offset) {
          if (viewModeRef.current === exports2.ViewMode.DualPageWithCover || viewModeRef.current === exports2.ViewMode.DualPage) {
            return scrollToSmallestItemAbove(index, offset);
          }
          switch (scrollModeRef.current) {
            case exports2.ScrollMode.Wrapped:
              return scrollToSmallestItemAbove(index, offset);
            case exports2.ScrollMode.Horizontal:
            case exports2.ScrollMode.Vertical:
            default:
              return scrollToItem(index + 1, offset);
          }
        }, []);
        var scrollToPreviousItem = React__namespace.useCallback(function(index, offset) {
          if (viewModeRef.current === exports2.ViewMode.DualPageWithCover || viewModeRef.current === exports2.ViewMode.DualPage) {
            return scrollToBiggestItemBelow(index, offset);
          }
          switch (scrollModeRef.current) {
            case exports2.ScrollMode.Wrapped:
              return scrollToBiggestItemBelow(index, offset);
            case exports2.ScrollMode.Horizontal:
            case exports2.ScrollMode.Vertical:
            default:
              return scrollToItem(index - 1, offset);
          }
        }, []);
        var getContainerStyles = React__namespace.useCallback(function() {
          return buildContainerStyles(totalSize, scrollModeRef.current);
        }, [totalSize]);
        var getItemContainerStyles = React__namespace.useCallback(function(item) {
          return buildItemContainerStyles(item, parentRect, scrollModeRef.current);
        }, [parentRect]);
        var getItemStyles = React__namespace.useCallback(function(item) {
          return buildItemStyles(item, isRtl, sizes, viewModeRef.current, scrollModeRef.current);
        }, [isRtl, sizes]);
        var zoom = React__namespace.useCallback(function(scale, index) {
          var _a2 = latestRef.current, measurements2 = _a2.measurements, scrollOffset2 = _a2.scrollOffset;
          var normalizedIndex = clamp(0, numberOfItems - 1, index);
          var measurement = measurements2[normalizedIndex];
          if (measurement) {
            var updateOffset = scrollModeRef.current === exports2.ScrollMode.Page ? {
              left: measurement.start.left,
              top: measurement.start.top
            } : {
              left: scrollOffset2.left * scale,
              top: scrollOffset2.top * scale
            };
            return scrollTo(updateOffset, false);
          }
          return Promise.resolve();
        }, []);
        React__namespace.useEffect(function() {
          return function() {
            intersectionTracker.disconnect();
          };
        }, []);
        return {
          boundingClientRect: parentRect,
          isSmoothScrolling,
          startPage,
          endPage,
          maxVisbilityIndex,
          virtualItems,
          getContainerStyles,
          getItemContainerStyles,
          getItemStyles,
          scrollToItem,
          scrollToNextItem,
          scrollToPreviousItem,
          zoom
        };
      };
      var SCROLL_BAR_WIDTH = 17;
      var PAGE_PADDING = 8;
      var calculateScale = function(container, pageHeight, pageWidth, scale, viewMode, numPages) {
        var w = pageWidth;
        switch (true) {
          case (viewMode === exports2.ViewMode.DualPageWithCover && numPages >= 3):
          case (viewMode === exports2.ViewMode.DualPage && numPages >= 3):
            w = 2 * pageWidth;
            break;
          default:
            w = pageWidth;
            break;
        }
        switch (scale) {
          case exports2.SpecialZoomLevel.ActualSize:
            return 1;
          case exports2.SpecialZoomLevel.PageFit:
            return Math.min((container.clientWidth - SCROLL_BAR_WIDTH) / w, (container.clientHeight - 2 * PAGE_PADDING) / pageHeight);
          case exports2.SpecialZoomLevel.PageWidth:
            return (container.clientWidth - SCROLL_BAR_WIDTH) / w;
        }
      };
      var useStack = function(maxLength) {
        var stackRef = React__namespace.useRef([]);
        var map = function(transformer) {
          return stackRef.current.map(function(item) {
            return transformer(item);
          });
        };
        var pop = function() {
          var stack = stackRef.current;
          var size = stack.length;
          if (size === 0) {
            return null;
          }
          var lastItem = stack.pop();
          stackRef.current = stack;
          return lastItem;
        };
        var push = function(item) {
          var stack = stackRef.current;
          if (stack.length + 1 > maxLength) {
            stack.shift();
          }
          stack.push(item);
          stackRef.current = stack;
        };
        React__namespace.useEffect(function() {
          return function() {
            stackRef.current = [];
          };
        }, []);
        return {
          push,
          map,
          pop
        };
      };
      var useQueue = function(maxLength) {
        var queueRef = React__namespace.useRef([]);
        var dequeue = function() {
          var queue = queueRef.current;
          var size = queue.length;
          if (size === 0) {
            return null;
          }
          var firstItem = queue.shift();
          queueRef.current = queue;
          return firstItem || null;
        };
        var enqueue = function(item) {
          var queue = queueRef.current;
          if (queue.length + 1 > maxLength) {
            queue.pop();
          }
          queueRef.current = [item].concat(queue);
        };
        var map = function(transformer) {
          return queueRef.current.map(function(item) {
            return transformer(item);
          });
        };
        React__namespace.useEffect(function() {
          return function() {
            queueRef.current = [];
          };
        }, []);
        return {
          dequeue,
          enqueue,
          map
        };
      };
      var MAX_QUEUE_LENGTH = 50;
      var useDestination = function(_a) {
        var getCurrentPage = _a.getCurrentPage;
        var previousDestinations = useStack(MAX_QUEUE_LENGTH);
        var nextDestinations = useQueue(MAX_QUEUE_LENGTH);
        var getNextDestination = function() {
          var nextDest = nextDestinations.dequeue();
          if (nextDest) {
            previousDestinations.push(nextDest);
          }
          if (nextDest && nextDest.pageIndex === getCurrentPage()) {
            return getNextDestination();
          }
          return nextDest;
        };
        var getPreviousDestination = function() {
          var prevDest = previousDestinations.pop();
          if (prevDest) {
            nextDestinations.enqueue(prevDest);
          }
          if (prevDest && prevDest.pageIndex === getCurrentPage()) {
            return getPreviousDestination();
          }
          return prevDest;
        };
        var markVisitedDestination = React__namespace.useCallback(function(destination) {
          previousDestinations.push(destination);
        }, []);
        return {
          getNextDestination,
          getPreviousDestination,
          markVisitedDestination
        };
      };
      var flaternSingleOutline = function(outline) {
        var result = [];
        if (outline.items && outline.items.length > 0) {
          result = result.concat(flaternOutlines(outline.items));
        }
        return result;
      };
      var flaternOutlines = function(outlines) {
        var result = [];
        outlines.map(function(outline) {
          result = result.concat(outline).concat(flaternSingleOutline(outline));
        });
        return result;
      };
      var useOutlines = function(doc) {
        var isMounted = useIsMounted();
        var _a = React__namespace.useState([]), outlines = _a[0], setOutlines = _a[1];
        React__namespace.useEffect(function() {
          doc.getOutline().then(function(result) {
            if (isMounted.current && result !== null) {
              var items = flaternOutlines(result);
              setOutlines(items);
            }
          });
        }, []);
        return outlines;
      };
      var RESIZE_EVENT_OPTIONS = {
        capture: false,
        passive: true
      };
      var ZERO_RECT$1 = {
        height: 0,
        width: 0
      };
      var useWindowResize = function() {
        var _a = React__namespace.useState(ZERO_RECT$1), windowRect = _a[0], setWindowRect = _a[1];
        var handleResize = useDebounceCallback(function() {
          setWindowRect({
            height: window.innerHeight,
            width: window.innerWidth
          });
        }, 100);
        useIsomorphicLayoutEffect(function() {
          window.addEventListener("resize", handleResize, RESIZE_EVENT_OPTIONS);
          return function() {
            window.removeEventListener("resize", handleResize, RESIZE_EVENT_OPTIONS);
          };
        }, []);
        return windowRect;
      };
      var ZERO_RECT = {
        height: 0,
        width: 0
      };
      var useFullScreen = function(_a) {
        var getCurrentPage = _a.getCurrentPage, getCurrentScrollMode = _a.getCurrentScrollMode, jumpToPage = _a.jumpToPage, targetRef = _a.targetRef;
        var _b = React__namespace.useState(exports2.FullScreenMode.Normal), fullScreenMode = _b[0], setFullScreenMode = _b[1];
        var windowRect = useWindowResize();
        var _c = React__namespace.useState(ZERO_RECT), targetRect = _c[0], setTargetRect = _c[1];
        var windowSizeBeforeFullScreenRef = React__namespace.useRef(ZERO_RECT);
        var targetPageRef = React__namespace.useRef(getCurrentPage());
        var fullScreenSizeRef = React__namespace.useRef(ZERO_RECT);
        var _d = React__namespace.useState(targetRef.current), element = _d[0], setElement = _d[1];
        var fullScreenElementRef = React__namespace.useRef();
        useIsomorphicLayoutEffect(function() {
          if (targetRef.current !== element) {
            setElement(targetRef.current);
          }
        }, []);
        useIsomorphicLayoutEffect(function() {
          if (!element) {
            return;
          }
          var io = new ResizeObserver(function(entries) {
            entries.forEach(function(entry) {
              var _a2 = entry.target.getBoundingClientRect(), height = _a2.height, width = _a2.width;
              setTargetRect({ height, width });
            });
          });
          io.observe(element);
          return function() {
            io.unobserve(element);
            io.disconnect();
          };
        }, [element]);
        var closeOtherFullScreen = React__namespace.useCallback(function(target) {
          var currentFullScreenEle = getFullScreenElement();
          if (currentFullScreenEle && currentFullScreenEle !== target) {
            setFullScreenMode(exports2.FullScreenMode.Normal);
            return exitFullScreen(currentFullScreenEle);
          }
          return Promise.resolve();
        }, []);
        var enterFullScreenMode = React__namespace.useCallback(function(target) {
          if (!target || !isFullScreenEnabled()) {
            return;
          }
          setElement(target);
          closeOtherFullScreen(target).then(function() {
            fullScreenElementRef.current = target;
            setFullScreenMode(exports2.FullScreenMode.Entering);
            requestFullScreen(target);
          });
        }, []);
        var exitFullScreenMode = React__namespace.useCallback(function() {
          var currentFullScreenEle = getFullScreenElement();
          if (currentFullScreenEle) {
            setFullScreenMode(exports2.FullScreenMode.Exitting);
            exitFullScreen(document);
          }
        }, []);
        var handleFullScreenChange = React__namespace.useCallback(function() {
          if (!element) {
            return;
          }
          var currentFullScreenEle = getFullScreenElement();
          if (currentFullScreenEle !== element) {
            setFullScreenMode(exports2.FullScreenMode.Exitting);
          }
        }, [element]);
        React__namespace.useEffect(function() {
          switch (fullScreenMode) {
            case exports2.FullScreenMode.Entering:
              if (fullScreenElementRef.current) {
                fullScreenElementRef.current.style.backgroundColor = "var(--rpv-core__full-screen-target-background-color)";
              }
              targetPageRef.current = getCurrentPage();
              windowSizeBeforeFullScreenRef.current = {
                height: window.innerHeight,
                width: window.innerWidth
              };
              break;
            case exports2.FullScreenMode.Entered:
              if (getCurrentScrollMode() === exports2.ScrollMode.Page) {
                jumpToPage(targetPageRef.current).then(function() {
                  setFullScreenMode(exports2.FullScreenMode.EnteredCompletely);
                });
              } else {
                setFullScreenMode(exports2.FullScreenMode.EnteredCompletely);
              }
              break;
            case exports2.FullScreenMode.Exitting:
              if (fullScreenElementRef.current) {
                fullScreenElementRef.current.style.backgroundColor = "";
                fullScreenElementRef.current = null;
              }
              targetPageRef.current = getCurrentPage();
              break;
            case exports2.FullScreenMode.Exited:
              setFullScreenMode(exports2.FullScreenMode.Normal);
              if (getCurrentScrollMode() === exports2.ScrollMode.Page) {
                jumpToPage(targetPageRef.current);
              }
              break;
          }
        }, [fullScreenMode]);
        React__namespace.useEffect(function() {
          if (fullScreenMode === exports2.FullScreenMode.Normal) {
            return;
          }
          if (fullScreenMode === exports2.FullScreenMode.Entering && windowRect.height === targetRect.height && windowRect.width === targetRect.width && windowRect.height > 0 && windowRect.width > 0 && (fullScreenSizeRef.current.height === 0 || windowRect.height == fullScreenSizeRef.current.height)) {
            fullScreenSizeRef.current = {
              height: window.innerHeight,
              width: window.innerWidth
            };
            setFullScreenMode(exports2.FullScreenMode.Entered);
            return;
          }
          if (fullScreenMode === exports2.FullScreenMode.Exitting && windowSizeBeforeFullScreenRef.current.height === windowRect.height && windowSizeBeforeFullScreenRef.current.width === windowRect.width && windowRect.height > 0 && windowRect.width > 0) {
            setFullScreenMode(exports2.FullScreenMode.Exited);
          }
        }, [fullScreenMode, windowRect, targetRect]);
        React__namespace.useEffect(function() {
          addFullScreenChangeListener(handleFullScreenChange);
          return function() {
            removeFullScreenChangeListener(handleFullScreenChange);
          };
        }, [element]);
        return {
          enterFullScreenMode,
          exitFullScreenMode,
          fullScreenMode
        };
      };
      var DEFAULT_PAGE_LAYOUT = {
        buildPageStyles: function() {
          return {};
        },
        transformSize: function(_a) {
          var size = _a.size;
          return size;
        }
      };
      var ZERO_OFFSET = {
        left: 0,
        top: 0
      };
      var Inner = function(_a) {
        var currentFile = _a.currentFile, defaultScale = _a.defaultScale, doc = _a.doc, enableSmoothScroll = _a.enableSmoothScroll, initialPage = _a.initialPage, initialRotation = _a.initialRotation, initialScale = _a.initialScale, pageLayout = _a.pageLayout, pageSizes = _a.pageSizes, plugins = _a.plugins, renderPage = _a.renderPage, scrollMode = _a.scrollMode, setRenderRange = _a.setRenderRange, viewMode = _a.viewMode, viewerState = _a.viewerState, onDocumentLoad = _a.onDocumentLoad, onOpenFile = _a.onOpenFile, onPageChange = _a.onPageChange, onRotate = _a.onRotate, onRotatePage = _a.onRotatePage, onZoom = _a.onZoom;
        var numPages = doc.numPages;
        var docId = doc.loadingTask.docId;
        var l10n = React__namespace.useContext(LocalizationContext).l10n;
        var themeContext = React__namespace.useContext(ThemeContext);
        var isRtl = themeContext.direction === exports2.TextDirection.RightToLeft;
        var containerRef = React__namespace.useRef();
        var pagesRef = React__namespace.useRef();
        var _b = React__namespace.useState(initialPage), currentPage = _b[0], setCurrentPage = _b[1];
        var mostRecentVisitedRef = React__namespace.useRef(null);
        var destinationManager = useDestination({
          getCurrentPage: function() {
            return stateRef.current.pageIndex;
          }
        });
        var _c = React__namespace.useState(initialRotation), rotation = _c[0], setRotation = _c[1];
        var previousRotation = usePrevious(rotation);
        var _d = React__namespace.useState(false), pagesRotationChanged = _d[0], setPagesRotationChanged = _d[1];
        var _e = React__namespace.useState(/* @__PURE__ */ new Map()), pagesRotation = _e[0], setPagesRotation = _e[1];
        var _f = React__namespace.useState(scrollMode), currentScrollMode = _f[0], setCurrentScrollMode = _f[1];
        var previousScrollMode = usePrevious(currentScrollMode);
        var _g = React__namespace.useState(viewMode), currentViewMode = _g[0], setCurrentViewMode = _g[1];
        var previousViewMode = usePrevious(currentViewMode);
        var outlines = useOutlines(doc);
        var _h = React__namespace.useState(initialScale), scale = _h[0], setScale = _h[1];
        var previousScale = usePrevious(scale);
        var stateRef = React__namespace.useRef(viewerState);
        var keepSpecialZoomLevelRef = React__namespace.useRef(typeof defaultScale === "string" ? defaultScale : null);
        var forceTargetFullScreenRef = React__namespace.useRef(-1);
        var forceTargetZoomRef = React__namespace.useRef(-1);
        var forceTargetInitialPageRef = React__namespace.useRef(initialPage);
        var fullScreen = useFullScreen({
          getCurrentPage: function() {
            return stateRef.current.pageIndex;
          },
          getCurrentScrollMode: function() {
            return stateRef.current.scrollMode;
          },
          jumpToPage: function(pageIndex) {
            return jumpToPage(pageIndex);
          },
          targetRef: pagesRef
        });
        var _j = React__namespace.useState(-1), renderPageIndex = _j[0], setRenderPageIndex = _j[1];
        var _k = React__namespace.useState(0), renderQueueKey = _k[0], setRenderQueueKey = _k[1];
        var renderQueue = useRenderQueue({ doc });
        React__namespace.useEffect(function() {
          return function() {
            clearPagesCache();
          };
        }, [docId]);
        var layoutBuilder = React__namespace.useMemo(function() {
          return Object.assign({}, DEFAULT_PAGE_LAYOUT, pageLayout);
        }, []);
        var sizes = React__namespace.useMemo(function() {
          return Array(numPages).fill(0).map(function(_, pageIndex) {
            var pageSize = [pageSizes[pageIndex].pageHeight, pageSizes[pageIndex].pageWidth];
            var rect = Math.abs(rotation) % 180 === 0 ? {
              height: pageSize[0],
              width: pageSize[1]
            } : {
              height: pageSize[1],
              width: pageSize[0]
            };
            var pageRect = {
              height: rect.height * scale,
              width: rect.width * scale
            };
            return layoutBuilder.transformSize({ numPages, pageIndex, size: pageRect });
          });
        }, [rotation, scale]);
        var virtualizer = useVirtual({
          enableSmoothScroll,
          isRtl,
          numberOfItems: numPages,
          parentRef: pagesRef,
          scrollMode: currentScrollMode,
          setRenderRange,
          sizes,
          viewMode: currentViewMode
        });
        var handlePagesResize = useDebounceCallback(function() {
          if (!keepSpecialZoomLevelRef.current || stateRef.current.fullScreenMode !== exports2.FullScreenMode.Normal || initialPage > 0 && forceTargetInitialPageRef.current === initialPage) {
            return;
          }
          zoom(keepSpecialZoomLevelRef.current);
        }, 200);
        useTrackResize({
          targetRef: pagesRef,
          onResize: handlePagesResize
        });
        var setViewerState = function(viewerState2) {
          var newState = viewerState2;
          plugins.forEach(function(plugin) {
            if (plugin.onViewerStateChange) {
              newState = plugin.onViewerStateChange(newState);
            }
          });
          stateRef.current = newState;
        };
        var getPagesContainer = function() {
          return pagesRef.current;
        };
        var getViewerState = function() {
          return stateRef.current;
        };
        var handleJumpFromLinkAnnotation = React__namespace.useCallback(function(destination) {
          destinationManager.markVisitedDestination(destination);
        }, []);
        var handleJumpToDestination = React__namespace.useCallback(function(destination) {
          var pageIndex = destination.pageIndex, bottomOffset = destination.bottomOffset, leftOffset = destination.leftOffset, scaleTo = destination.scaleTo;
          var pagesContainer = pagesRef.current;
          var currentState = stateRef.current;
          if (!pagesContainer || !currentState) {
            return Promise.resolve();
          }
          return new Promise(function(resolve, _) {
            getPage(doc, pageIndex).then(function(page) {
              var viewport = page.getViewport({ scale: 1 });
              var top = 0;
              var bottom = (typeof bottomOffset === "function" ? bottomOffset(viewport.width, viewport.height) : bottomOffset) || 0;
              var left = (typeof leftOffset === "function" ? leftOffset(viewport.width, viewport.height) : leftOffset) || 0;
              var updateScale = currentState.scale;
              switch (scaleTo) {
                case exports2.SpecialZoomLevel.PageFit:
                  top = 0;
                  left = 0;
                  zoom(exports2.SpecialZoomLevel.PageFit);
                  break;
                case exports2.SpecialZoomLevel.PageWidth:
                  updateScale = calculateScale(pagesContainer, pageSizes[pageIndex].pageHeight, pageSizes[pageIndex].pageWidth, exports2.SpecialZoomLevel.PageWidth, viewMode, numPages);
                  top = (viewport.height - bottom) * updateScale;
                  left = left * updateScale;
                  zoom(updateScale);
                  break;
                default:
                  top = (viewport.height - bottom) * updateScale;
                  left = left * updateScale;
                  break;
              }
              switch (currentState.scrollMode) {
                case exports2.ScrollMode.Horizontal:
                  virtualizer.scrollToItem(pageIndex, { left, top: 0 }).then(function() {
                    resolve();
                  });
                  break;
                case exports2.ScrollMode.Vertical:
                default:
                  virtualizer.scrollToItem(pageIndex, { left: 0, top }).then(function() {
                    resolve();
                  });
                  break;
              }
            });
          });
        }, []);
        var jumpToDestination = React__namespace.useCallback(function(destination) {
          destinationManager.markVisitedDestination(destination);
          return handleJumpToDestination(destination);
        }, []);
        var jumpToNextDestination = React__namespace.useCallback(function() {
          var nextDestination = destinationManager.getNextDestination();
          return nextDestination ? handleJumpToDestination(nextDestination) : Promise.resolve();
        }, []);
        var jumpToPreviousDestination = React__namespace.useCallback(function() {
          var lastDestination = destinationManager.getPreviousDestination();
          return lastDestination ? handleJumpToDestination(lastDestination) : Promise.resolve();
        }, []);
        var jumpToNextPage = React__namespace.useCallback(function() {
          return virtualizer.scrollToNextItem(stateRef.current.pageIndex, ZERO_OFFSET);
        }, []);
        var jumpToPage = React__namespace.useCallback(function(pageIndex) {
          return 0 <= pageIndex && pageIndex < numPages ? virtualizer.scrollToItem(pageIndex, ZERO_OFFSET) : Promise.resolve();
        }, []);
        var jumpToPreviousPage = React__namespace.useCallback(function() {
          return virtualizer.scrollToPreviousItem(stateRef.current.pageIndex, ZERO_OFFSET);
        }, []);
        var openFile = React__namespace.useCallback(function(file) {
          if (getFileExt(file.name).toLowerCase() !== "pdf") {
            return;
          }
          new Promise(function(resolve) {
            var reader = new FileReader();
            reader.readAsArrayBuffer(file);
            reader.onload = function() {
              var bytes = new Uint8Array(reader.result);
              resolve(bytes);
            };
          }).then(function(data) {
            onOpenFile(file.name, data);
          });
        }, [onOpenFile]);
        var rotate = React__namespace.useCallback(function(direction) {
          var degrees = direction === exports2.RotateDirection.Backward ? -90 : 90;
          var currentRotation = stateRef.current.rotation;
          var updateRotation = currentRotation === 360 || currentRotation === -360 ? degrees : currentRotation + degrees;
          renderQueue.markNotRendered();
          setRotation(updateRotation);
          setViewerState(__assign(__assign({}, stateRef.current), { rotation: updateRotation }));
          onRotate({ direction, doc, rotation: updateRotation });
        }, []);
        var rotatePage = React__namespace.useCallback(function(pageIndex, direction) {
          var degrees = direction === exports2.RotateDirection.Backward ? -90 : 90;
          var rotations = stateRef.current.pagesRotation;
          var currentPageRotation = rotations.has(pageIndex) ? rotations.get(pageIndex) : initialRotation;
          var finalRotation = currentPageRotation + degrees;
          var updateRotations = rotations.set(pageIndex, finalRotation);
          setPagesRotation(updateRotations);
          setPagesRotationChanged(function(value) {
            return !value;
          });
          setViewerState(__assign(__assign({}, stateRef.current), { pagesRotation: updateRotations, rotatedPage: pageIndex }));
          onRotatePage({ direction, doc, pageIndex, rotation: finalRotation });
          renderQueue.markRendering(pageIndex);
          setRenderPageIndex(pageIndex);
        }, []);
        var switchScrollMode = React__namespace.useCallback(function(scrollMode2) {
          setViewerState(__assign(__assign({}, stateRef.current), { scrollMode: scrollMode2 }));
          setCurrentScrollMode(scrollMode2);
        }, []);
        var switchViewMode = React__namespace.useCallback(function(viewMode2) {
          setViewerState(__assign(__assign({}, stateRef.current), { viewMode: viewMode2 }));
          setCurrentViewMode(viewMode2);
        }, []);
        var zoom = React__namespace.useCallback(function(newScale) {
          var pagesEle = pagesRef.current;
          var currentPage2 = stateRef.current.pageIndex;
          if (currentPage2 < 0 || currentPage2 >= numPages) {
            return;
          }
          var currentPageHeight = pageSizes[currentPage2].pageHeight;
          var currentPageWidth = pageSizes[currentPage2].pageWidth;
          var updateScale = pagesEle ? typeof newScale === "string" ? calculateScale(pagesEle, currentPageHeight, currentPageWidth, newScale, stateRef.current.viewMode, numPages) : newScale : 1;
          keepSpecialZoomLevelRef.current = typeof newScale === "string" ? newScale : null;
          if (updateScale === stateRef.current.scale) {
            return;
          }
          setRenderQueueKey(function(key) {
            return key + 1;
          });
          renderQueue.markNotRendered();
          setScale(updateScale);
          onZoom({ doc, scale: updateScale });
          setViewerState(__assign(__assign({}, stateRef.current), { scale: updateScale }));
        }, []);
        var enterFullScreenMode = React__namespace.useCallback(function(target) {
          fullScreen.enterFullScreenMode(target);
        }, []);
        var exitFullScreenMode = React__namespace.useCallback(function() {
          fullScreen.exitFullScreenMode();
        }, []);
        React__namespace.useEffect(function() {
          setViewerState(__assign(__assign({}, stateRef.current), { fullScreenMode: fullScreen.fullScreenMode }));
        }, [fullScreen.fullScreenMode]);
        React__namespace.useEffect(function() {
          var pluginMethods = {
            enterFullScreenMode,
            exitFullScreenMode,
            getPagesContainer,
            getViewerState,
            jumpToDestination,
            jumpToNextDestination,
            jumpToPreviousDestination,
            jumpToNextPage,
            jumpToPreviousPage,
            jumpToPage,
            openFile,
            rotate,
            rotatePage,
            setViewerState,
            switchScrollMode,
            switchViewMode,
            zoom
          };
          plugins.forEach(function(plugin) {
            if (plugin.install) {
              plugin.install(pluginMethods);
            }
          });
          return function() {
            plugins.forEach(function(plugin) {
              if (plugin.uninstall) {
                plugin.uninstall(pluginMethods);
              }
            });
          };
        }, [docId]);
        React__namespace.useEffect(function() {
          onDocumentLoad({ doc, file: currentFile });
          plugins.forEach(function(plugin) {
            plugin.onDocumentLoad && plugin.onDocumentLoad({ doc, file: currentFile });
          });
        }, [docId]);
        var boundingClientRect = virtualizer.boundingClientRect;
        useRunOnce(function() {
          if (initialPage) {
            jumpToPage(initialPage);
          }
        }, boundingClientRect.height > 0 && boundingClientRect.width > 0);
        useIsomorphicLayoutEffect(function() {
          var latestPage = stateRef.current.pageIndex;
          if (latestPage > -1 && previousScrollMode !== currentScrollMode) {
            virtualizer.scrollToItem(latestPage, ZERO_OFFSET).then(function() {
              if (fullScreen.fullScreenMode === exports2.FullScreenMode.EnteredCompletely) {
                if (!enableSmoothScroll) {
                  renderQueue.markNotRendered();
                }
                forceTargetFullScreenRef.current = -1;
              }
            });
          }
        }, [currentScrollMode]);
        useIsomorphicLayoutEffect(function() {
          var latestPage = stateRef.current.pageIndex;
          if (latestPage > -1 && previousRotation !== rotation) {
            virtualizer.scrollToItem(latestPage, ZERO_OFFSET);
          }
        }, [rotation]);
        useIsomorphicLayoutEffect(function() {
          if (previousScale != 0 && previousScale != stateRef.current.scale) {
            virtualizer.zoom(stateRef.current.scale / previousScale, stateRef.current.pageIndex).then(function() {
              if (fullScreen.fullScreenMode === exports2.FullScreenMode.EnteredCompletely) {
                forceTargetZoomRef.current = -1;
              }
            });
          }
        }, [scale]);
        useIsomorphicLayoutEffect(function() {
          if (previousViewMode === stateRef.current.viewMode) {
            return;
          }
          var startPage = virtualizer.startPage, endPage = virtualizer.endPage, virtualItems = virtualizer.virtualItems;
          renderQueue.markNotRendered();
          renderQueue.setRange(startPage, endPage);
          var _loop_1 = function(i2) {
            var item = virtualItems.find(function(item2) {
              return item2.index === i2;
            });
            if (item) {
              renderQueue.setVisibility(i2, item.visibility);
            }
          };
          for (var i = startPage; i <= endPage; i++) {
            _loop_1(i);
          }
          renderNextPage();
        }, [currentViewMode]);
        useIsomorphicLayoutEffect(function() {
          var latestPage = stateRef.current.pageIndex;
          if (latestPage > -1 && previousViewMode !== currentViewMode) {
            virtualizer.scrollToItem(latestPage, ZERO_OFFSET);
          }
        }, [currentViewMode]);
        useIsomorphicLayoutEffect(function() {
          var latestPage = stateRef.current.pageIndex;
          if (latestPage > 0 && latestPage === initialPage && forceTargetInitialPageRef.current === initialPage && keepSpecialZoomLevelRef.current) {
            forceTargetInitialPageRef.current = -1;
            zoom(keepSpecialZoomLevelRef.current);
          }
        }, [currentPage]);
        React__namespace.useEffect(function() {
          var isSmoothScrolling = virtualizer.isSmoothScrolling;
          if (isSmoothScrolling) {
            return;
          }
          if (mostRecentVisitedRef.current === null || mostRecentVisitedRef.current !== currentPage) {
            mostRecentVisitedRef.current = currentPage;
            onPageChange({ currentPage, doc });
          }
        }, [currentPage, virtualizer.isSmoothScrolling]);
        React__namespace.useEffect(function() {
          if (fullScreen.fullScreenMode === exports2.FullScreenMode.Entering && stateRef.current.scrollMode === exports2.ScrollMode.Page) {
            forceTargetFullScreenRef.current = stateRef.current.pageIndex;
          }
          if (fullScreen.fullScreenMode === exports2.FullScreenMode.EnteredCompletely && stateRef.current.scrollMode === exports2.ScrollMode.Page && enableSmoothScroll) {
            forceTargetFullScreenRef.current = -1;
          }
          if (fullScreen.fullScreenMode === exports2.FullScreenMode.EnteredCompletely && keepSpecialZoomLevelRef.current) {
            forceTargetZoomRef.current = stateRef.current.pageIndex;
            zoom(keepSpecialZoomLevelRef.current);
          }
        }, [fullScreen.fullScreenMode]);
        React__namespace.useEffect(function() {
          if (fullScreen.fullScreenMode === exports2.FullScreenMode.Entering || fullScreen.fullScreenMode === exports2.FullScreenMode.Exitting || virtualizer.isSmoothScrolling) {
            return;
          }
          var startPage = virtualizer.startPage, endPage = virtualizer.endPage, maxVisbilityIndex = virtualizer.maxVisbilityIndex, virtualItems = virtualizer.virtualItems;
          var currentPage2 = maxVisbilityIndex;
          var isFullScreen = fullScreen.fullScreenMode === exports2.FullScreenMode.Entered || fullScreen.fullScreenMode === exports2.FullScreenMode.EnteredCompletely;
          if (isFullScreen && currentPage2 !== forceTargetFullScreenRef.current && forceTargetFullScreenRef.current > -1) {
            return;
          }
          if (isFullScreen && currentPage2 !== forceTargetZoomRef.current && forceTargetZoomRef.current > -1) {
            return;
          }
          setCurrentPage(currentPage2);
          setViewerState(__assign(__assign({}, stateRef.current), { pageIndex: currentPage2 }));
          renderQueue.setRange(startPage, endPage);
          var _loop_2 = function(i2) {
            var item = virtualItems.find(function(item2) {
              return item2.index === i2;
            });
            if (item) {
              renderQueue.setVisibility(i2, item.visibility);
            }
          };
          for (var i = startPage; i <= endPage; i++) {
            _loop_2(i);
          }
          renderNextPage();
        }, [
          virtualizer.startPage,
          virtualizer.endPage,
          virtualizer.isSmoothScrolling,
          virtualizer.maxVisbilityIndex,
          fullScreen.fullScreenMode,
          pagesRotationChanged,
          rotation,
          scale
        ]);
        var handlePageRenderCompleted = React__namespace.useCallback(function(pageIndex) {
          renderQueue.markRendered(pageIndex);
          renderNextPage();
        }, [renderQueueKey]);
        var renderNextPage = function() {
          var nextPage = renderQueue.getHighestPriorityPage();
          if (nextPage > -1 && renderQueue.isInRange(nextPage)) {
            renderQueue.markRendering(nextPage);
            setRenderPageIndex(nextPage);
          }
        };
        var executeNamedAction = function(action) {
          var previousPage = currentPage - 1;
          var nextPage = currentPage + 1;
          switch (action) {
            case "FirstPage":
              jumpToPage(0);
              break;
            case "LastPage":
              jumpToPage(numPages - 1);
              break;
            case "NextPage":
              nextPage < numPages && jumpToPage(nextPage);
              break;
            case "PrevPage":
              previousPage >= 0 && jumpToPage(previousPage);
              break;
          }
        };
        var renderViewer = React__namespace.useCallback(function() {
          var virtualItems = virtualizer.virtualItems;
          var chunks = [];
          switch (currentViewMode) {
            case exports2.ViewMode.DualPage:
              chunks = chunk(virtualItems, 2);
              break;
            case exports2.ViewMode.DualPageWithCover:
              if (virtualItems.length) {
                chunks = virtualItems[0].index === 0 ? [[virtualItems[0]]].concat(chunk(virtualItems.slice(1), 2)) : chunk(virtualItems, 2);
              }
              break;
            case exports2.ViewMode.SinglePage:
            default:
              chunks = chunk(virtualItems, 1);
              break;
          }
          var pageLabel = l10n && l10n.core ? l10n.core.pageLabel : "Page {{pageIndex}}";
          var slot = {
            attrs: {
              className: "rpv-core__inner-container",
              "data-testid": "core__inner-container",
              ref: containerRef,
              style: {
                height: "100%"
              }
            },
            children: React__namespace.createElement(React__namespace.Fragment, null),
            subSlot: {
              attrs: {
                "data-testid": "core__inner-pages",
                className: classNames({
                  "rpv-core__inner-pages": true,
                  "rpv-core__inner-pages--horizontal": currentScrollMode === exports2.ScrollMode.Horizontal,
                  "rpv-core__inner-pages--rtl": isRtl,
                  "rpv-core__inner-pages--single": currentScrollMode === exports2.ScrollMode.Page,
                  "rpv-core__inner-pages--vertical": currentScrollMode === exports2.ScrollMode.Vertical,
                  "rpv-core__inner-pages--wrapped": currentScrollMode === exports2.ScrollMode.Wrapped
                }),
                ref: pagesRef,
                style: {
                  height: "100%",
                  position: "relative"
                }
              },
              children: React__namespace.createElement("div", { "data-testid": "core__inner-current-page-".concat(currentPage), style: Object.assign({
                "--scale-factor": scale
              }, virtualizer.getContainerStyles()) }, chunks.map(function(items) {
                return React__namespace.createElement("div", { className: classNames({
                  "rpv-core__inner-page-container": true,
                  "rpv-core__inner-page-container--single": currentScrollMode === exports2.ScrollMode.Page
                }), style: virtualizer.getItemContainerStyles(items[0]), key: "".concat(items[0].index, "-").concat(currentViewMode) }, items.map(function(item) {
                  var isCover = currentViewMode === exports2.ViewMode.DualPageWithCover && (item.index === 0 || numPages % 2 === 0 && item.index === numPages - 1);
                  return React__namespace.createElement(
                    "div",
                    { "aria-label": pageLabel.replace("{{pageIndex}}", "".concat(item.index + 1)), className: classNames({
                      "rpv-core__inner-page": true,
                      "rpv-core__inner-page--dual-even": currentViewMode === exports2.ViewMode.DualPage && item.index % 2 === 0,
                      "rpv-core__inner-page--dual-odd": currentViewMode === exports2.ViewMode.DualPage && item.index % 2 === 1,
                      "rpv-core__inner-page--dual-cover": isCover,
                      "rpv-core__inner-page--dual-cover-even": currentViewMode === exports2.ViewMode.DualPageWithCover && !isCover && item.index % 2 === 0,
                      "rpv-core__inner-page--dual-cover-odd": currentViewMode === exports2.ViewMode.DualPageWithCover && !isCover && item.index % 2 === 1,
                      "rpv-core__inner-page--single": currentViewMode === exports2.ViewMode.SinglePage && currentScrollMode === exports2.ScrollMode.Page
                    }), role: "region", key: "".concat(item.index, "-").concat(currentViewMode), style: Object.assign({}, virtualizer.getItemStyles(item), layoutBuilder.buildPageStyles({
                      numPages,
                      pageIndex: item.index,
                      scrollMode: currentScrollMode,
                      viewMode: currentViewMode
                    })) },
                    React__namespace.createElement(PageLayer, { doc, measureRef: item.measureRef, outlines, pageIndex: item.index, pageRotation: pagesRotation.has(item.index) ? pagesRotation.get(item.index) : 0, pageSize: pageSizes[item.index], plugins, renderPage, renderQueueKey, rotation, scale, shouldRender: renderPageIndex === item.index, viewMode: currentViewMode, onExecuteNamedAction: executeNamedAction, onJumpFromLinkAnnotation: handleJumpFromLinkAnnotation, onJumpToDest: jumpToDestination, onRenderCompleted: handlePageRenderCompleted, onRotatePage: rotatePage })
                  );
                }));
              }))
            }
          };
          plugins.forEach(function(plugin) {
            if (plugin.renderViewer) {
              slot = plugin.renderViewer({
                containerRef,
                doc,
                pagesContainerRef: pagesRef,
                pagesRotation,
                pageSizes,
                rotation,
                slot,
                themeContext,
                jumpToPage,
                openFile,
                rotate,
                rotatePage,
                switchScrollMode,
                switchViewMode,
                zoom
              });
            }
          });
          return slot;
        }, [plugins, virtualizer]);
        var renderSlot = React__namespace.useCallback(function(slot) {
          return React__namespace.createElement(
            "div",
            __assign({}, slot.attrs, { style: slot.attrs && slot.attrs.style ? slot.attrs.style : {} }),
            slot.children,
            slot.subSlot && renderSlot(slot.subSlot)
          );
        }, []);
        return renderSlot(renderViewer());
      };
      var LEVELS = [
        0.1,
        0.2,
        0.3,
        0.4,
        0.5,
        0.6,
        0.7,
        0.8,
        0.9,
        1,
        1.1,
        1.3,
        1.5,
        1.7,
        1.9,
        2.1,
        2.4,
        2.7,
        3,
        3.3,
        3.7,
        4.1,
        4.6,
        5.1,
        5.7,
        6.3,
        7,
        7.7,
        8.5,
        9.4,
        10
      ];
      var decrease = function(currentLevel) {
        var found = LEVELS.findIndex(function(item) {
          return item >= currentLevel;
        });
        return found === -1 || found === 0 ? currentLevel : LEVELS[found - 1];
      };
      var RESERVE_HEIGHT = 45;
      var RESERVE_WIDTH = 45;
      var PageSizeCalculator = function(_a) {
        var defaultScale = _a.defaultScale, doc = _a.doc, render = _a.render, scrollMode = _a.scrollMode, viewMode = _a.viewMode;
        var pagesRef = React__namespace.useRef();
        var _b = React__namespace.useState({
          pageSizes: [],
          scale: 0
        }), state = _b[0], setState = _b[1];
        React__namespace.useLayoutEffect(function() {
          var queryPageSizes = Array(doc.numPages).fill(0).map(function(_, i) {
            return new Promise(function(resolve, _2) {
              getPage(doc, i).then(function(pdfPage) {
                var viewport = pdfPage.getViewport({ scale: 1 });
                resolve({
                  pageHeight: viewport.height,
                  pageWidth: viewport.width,
                  rotation: viewport.rotation
                });
              });
            });
          });
          Promise.all(queryPageSizes).then(function(pageSizes) {
            var pagesEle = pagesRef.current;
            if (!pagesEle || pageSizes.length === 0) {
              return;
            }
            var w = pageSizes[0].pageWidth;
            var h = pageSizes[0].pageHeight;
            var parentEle = pagesEle.parentElement;
            var scaleWidth = (parentEle.clientWidth - RESERVE_WIDTH) / w;
            var scaleHeight = (parentEle.clientHeight - RESERVE_HEIGHT) / h;
            var scaled = scaleWidth;
            switch (scrollMode) {
              case exports2.ScrollMode.Horizontal:
                scaled = Math.min(scaleWidth, scaleHeight);
                break;
              case exports2.ScrollMode.Vertical:
              default:
                scaled = scaleWidth;
                break;
            }
            var scale = defaultScale ? typeof defaultScale === "string" ? calculateScale(parentEle, h, w, defaultScale, viewMode, doc.numPages) : defaultScale : decrease(scaled);
            setState({ pageSizes, scale });
          });
        }, [doc.loadingTask.docId]);
        return state.pageSizes.length === 0 || state.scale === 0 ? React__namespace.createElement(
          "div",
          { className: "rpv-core__page-size-calculator", "data-testid": "core__page-size-calculating", ref: pagesRef },
          React__namespace.createElement(Spinner, null)
        ) : render(state.pageSizes, state.scale);
      };
      var LoadingStatus = /* @__PURE__ */ function() {
        function LoadingStatus2() {
        }
        return LoadingStatus2;
      }();
      var AskForPasswordState = function(_super) {
        __extends(AskForPasswordState2, _super);
        function AskForPasswordState2(verifyPassword, passwordStatus) {
          var _this = _super.call(this) || this;
          _this.verifyPassword = verifyPassword;
          _this.passwordStatus = passwordStatus;
          return _this;
        }
        return AskForPasswordState2;
      }(LoadingStatus);
      var AskingPassword = function(_a) {
        var passwordStatus = _a.passwordStatus, renderProtectedView = _a.renderProtectedView, verifyPassword = _a.verifyPassword, onDocumentAskPassword = _a.onDocumentAskPassword;
        var l10n = React__namespace.useContext(LocalizationContext).l10n;
        var _b = React__namespace.useState(""), password = _b[0], setPassword = _b[1];
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var submit = function() {
          return verifyPassword(password);
        };
        var handleKeyDown = function(e) {
          if (e.key === "Enter") {
            submit();
          }
        };
        React__namespace.useEffect(function() {
          if (onDocumentAskPassword) {
            onDocumentAskPassword({
              verifyPassword
            });
          }
        }, []);
        if (renderProtectedView) {
          return renderProtectedView({
            passwordStatus,
            verifyPassword
          });
        }
        return React__namespace.createElement(
          "div",
          { className: "rpv-core__asking-password-wrapper" },
          React__namespace.createElement(
            "div",
            { className: classNames({
              "rpv-core__asking-password": true,
              "rpv-core__asking-password--rtl": isRtl
            }) },
            React__namespace.createElement(
              "div",
              { className: "rpv-core__asking-password-message" },
              passwordStatus === exports2.PasswordStatus.RequiredPassword && l10n.core.askingPassword.requirePasswordToOpen,
              passwordStatus === exports2.PasswordStatus.WrongPassword && l10n.core.wrongPassword.tryAgain
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__asking-password-body" },
              React__namespace.createElement(
                "div",
                { className: classNames({
                  "rpv-core__asking-password-input": true,
                  "rpv-core__asking-password-input--ltr": !isRtl,
                  "rpv-core__asking-password-input--rtl": isRtl
                }) },
                React__namespace.createElement(TextBox, { testId: "core__asking-password-input", type: "password", value: password, onChange: setPassword, onKeyDown: handleKeyDown })
              ),
              React__namespace.createElement(PrimaryButton, { onClick: submit }, l10n.core.askingPassword.submit)
            )
          )
        );
      };
      var CompletedState = function(_super) {
        __extends(CompletedState2, _super);
        function CompletedState2(doc) {
          var _this = _super.call(this) || this;
          _this.doc = doc;
          return _this;
        }
        return CompletedState2;
      }(LoadingStatus);
      var FailureState = function(_super) {
        __extends(FailureState2, _super);
        function FailureState2(error) {
          var _this = _super.call(this) || this;
          _this.error = error;
          return _this;
        }
        return FailureState2;
      }(LoadingStatus);
      var LoadingState = function(_super) {
        __extends(LoadingState2, _super);
        function LoadingState2(percentages) {
          var _this = _super.call(this) || this;
          _this.percentages = percentages;
          return _this;
        }
        return LoadingState2;
      }(LoadingStatus);
      var DocumentLoader = function(_a) {
        var characterMap = _a.characterMap, file = _a.file, httpHeaders = _a.httpHeaders, render = _a.render, renderError = _a.renderError, renderLoader = _a.renderLoader, renderProtectedView = _a.renderProtectedView, transformGetDocumentParams = _a.transformGetDocumentParams, withCredentials = _a.withCredentials, onDocumentAskPassword = _a.onDocumentAskPassword;
        var direction = React__namespace.useContext(ThemeContext).direction;
        var isRtl = direction === exports2.TextDirection.RightToLeft;
        var _b = React__namespace.useState(new LoadingState(0)), status = _b[0], setStatus = _b[1];
        var docRef = React__namespace.useRef("");
        var isMounted = useIsMounted();
        React__namespace.useEffect(function() {
          docRef.current = "";
          setStatus(new LoadingState(0));
          var worker2 = new PdfJsApi__namespace.PDFWorker({ name: "PDFWorker_".concat(Date.now()) });
          var params = Object.assign({
            httpHeaders,
            withCredentials,
            worker: worker2
          }, "string" === typeof file ? { url: file } : { data: file }, characterMap ? {
            cMapUrl: characterMap.url,
            cMapPacked: characterMap.isCompressed
          } : {});
          var transformParams = transformGetDocumentParams ? transformGetDocumentParams(params) : params;
          var loadingTask = PdfJsApi__namespace.getDocument(transformParams);
          loadingTask.onPassword = function(verifyPassword, reason) {
            switch (reason) {
              case PdfJsApi__namespace.PasswordResponses.NEED_PASSWORD:
                isMounted.current && setStatus(new AskForPasswordState(verifyPassword, exports2.PasswordStatus.RequiredPassword));
                break;
              case PdfJsApi__namespace.PasswordResponses.INCORRECT_PASSWORD:
                isMounted.current && setStatus(new AskForPasswordState(verifyPassword, exports2.PasswordStatus.WrongPassword));
                break;
            }
          };
          loadingTask.onProgress = function(progress) {
            var loaded = progress.total > 0 ? Math.min(100, 100 * progress.loaded / progress.total) : 100;
            if (isMounted.current && docRef.current === "") {
              setStatus(new LoadingState(loaded));
            }
          };
          loadingTask.promise.then(function(doc) {
            docRef.current = doc.loadingTask.docId;
            isMounted.current && setStatus(new CompletedState(doc));
          }, function(err) {
            return isMounted.current && !worker2.destroyed && setStatus(new FailureState({
              message: err.message || "Cannot load document",
              name: err.name
            }));
          });
          return function() {
            loadingTask.destroy();
            worker2.destroy();
          };
        }, [file]);
        if (status instanceof AskForPasswordState) {
          return React__namespace.createElement(AskingPassword, { passwordStatus: status.passwordStatus, renderProtectedView, verifyPassword: status.verifyPassword, onDocumentAskPassword });
        }
        if (status instanceof CompletedState) {
          return render(status.doc);
        }
        if (status instanceof FailureState) {
          return renderError ? renderError(status.error) : React__namespace.createElement(
            "div",
            { className: classNames({
              "rpv-core__doc-error": true,
              "rpv-core__doc-error--rtl": isRtl
            }) },
            React__namespace.createElement("div", { className: "rpv-core__doc-error-text" }, status.error.message)
          );
        }
        return React__namespace.createElement("div", { "data-testid": "core__doc-loading", className: classNames({
          "rpv-core__doc-loading": true,
          "rpv-core__doc-loading--rtl": isRtl
        }) }, renderLoader ? renderLoader(status.percentages) : React__namespace.createElement(Spinner, null));
      };
      var isDarkMode = function() {
        return typeof window !== "undefined" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
      };
      var withTheme = function(theme, onSwitchTheme) {
        var initialTheme = React__namespace.useMemo(function() {
          return theme === "auto" ? isDarkMode() ? "dark" : "light" : theme;
        }, []);
        var _a = React__namespace.useState(initialTheme), currentTheme = _a[0], setCurrentTheme = _a[1];
        var prevTheme = usePrevious(currentTheme);
        React__namespace.useEffect(function() {
          if (theme !== "auto") {
            return;
          }
          var media = window.matchMedia("(prefers-color-scheme: dark)");
          var handler = function(e) {
            setCurrentTheme(e.matches ? "dark" : "light");
          };
          media.addEventListener("change", handler);
          return function() {
            return media.removeEventListener("change", handler);
          };
        }, []);
        React__namespace.useEffect(function() {
          if (currentTheme !== prevTheme && onSwitchTheme) {
            onSwitchTheme(currentTheme);
          }
        }, [currentTheme]);
        React__namespace.useEffect(function() {
          if (theme !== currentTheme) {
            setCurrentTheme(theme);
          }
        }, [theme]);
        return {
          currentTheme,
          setCurrentTheme
        };
      };
      var isSameUrl = function(a, b) {
        var typeA = typeof a;
        var typeB = typeof b;
        if (typeA === "string" && typeB === "string" && a === b) {
          return true;
        }
        if (typeA === "object" && typeB === "object") {
          return a.length === b.length && a.every(function(v, i) {
            return v === b[i];
          });
        }
        return false;
      };
      var NUM_OVERSCAN_PAGES = 3;
      var DEFAULT_RENDER_RANGE = function(visiblePagesRange) {
        return {
          startPage: visiblePagesRange.startPage - NUM_OVERSCAN_PAGES,
          endPage: visiblePagesRange.endPage + NUM_OVERSCAN_PAGES
        };
      };
      var Viewer2 = function(_a) {
        var characterMap = _a.characterMap, defaultScale = _a.defaultScale, _b = _a.enableSmoothScroll, enableSmoothScroll = _b === void 0 ? true : _b, fileUrl = _a.fileUrl, _c = _a.httpHeaders, httpHeaders = _c === void 0 ? {} : _c, _d = _a.initialPage, initialPage = _d === void 0 ? 0 : _d, pageLayout = _a.pageLayout, _e = _a.initialRotation, initialRotation = _e === void 0 ? 0 : _e, localization = _a.localization, _f = _a.plugins, plugins = _f === void 0 ? [] : _f, renderError = _a.renderError, renderLoader = _a.renderLoader, renderPage = _a.renderPage, renderProtectedView = _a.renderProtectedView, _g = _a.scrollMode, scrollMode = _g === void 0 ? exports2.ScrollMode.Vertical : _g, _h = _a.setRenderRange, setRenderRange = _h === void 0 ? DEFAULT_RENDER_RANGE : _h, transformGetDocumentParams = _a.transformGetDocumentParams, _j = _a.theme, theme = _j === void 0 ? {
          direction: exports2.TextDirection.LeftToRight,
          theme: "light"
        } : _j, _k = _a.viewMode, viewMode = _k === void 0 ? exports2.ViewMode.SinglePage : _k, _l = _a.withCredentials, withCredentials = _l === void 0 ? false : _l, onDocumentAskPassword = _a.onDocumentAskPassword, _m = _a.onDocumentLoad, onDocumentLoad = _m === void 0 ? function() {
        } : _m, _o = _a.onPageChange, onPageChange = _o === void 0 ? function() {
        } : _o, _p = _a.onRotate, onRotate = _p === void 0 ? function() {
        } : _p, _q = _a.onRotatePage, onRotatePage = _q === void 0 ? function() {
        } : _q, _r = _a.onSwitchTheme, onSwitchTheme = _r === void 0 ? function() {
        } : _r, _s = _a.onZoom, onZoom = _s === void 0 ? function() {
        } : _s;
        var _t = React__namespace.useState({
          data: fileUrl,
          name: typeof fileUrl === "string" ? fileUrl : "",
          shouldLoad: false
        }), file = _t[0], setFile = _t[1];
        var openFile = function(fileName, data) {
          setFile({
            data,
            name: fileName,
            shouldLoad: true
          });
        };
        var _u = React__namespace.useState(false), visible = _u[0], setVisible = _u[1];
        var prevFile = usePrevious(file);
        React__namespace.useEffect(function() {
          if (!isSameUrl(prevFile.data, fileUrl)) {
            setFile({
              data: fileUrl,
              name: typeof fileUrl === "string" ? fileUrl : "",
              shouldLoad: visible
            });
          }
        }, [fileUrl, visible]);
        var visibilityChanged = function(params) {
          setVisible(params.isVisible);
          if (params.isVisible) {
            setFile(function(currentFile) {
              return Object.assign({}, currentFile, { shouldLoad: true });
            });
          }
        };
        var containerRef = useIntersectionObserver({
          onVisibilityChanged: visibilityChanged
        });
        var themeProps = typeof theme === "string" ? { direction: exports2.TextDirection.LeftToRight, theme } : theme;
        var _v = React__namespace.useState(localization || DefaultLocalization), l10n = _v[0], setL10n = _v[1];
        var localizationContext = { l10n, setL10n };
        var themeContext = Object.assign({}, { direction: themeProps.direction }, withTheme(themeProps.theme || "light", onSwitchTheme));
        React__namespace.useEffect(function() {
          if (localization) {
            setL10n(localization);
          }
        }, [localization]);
        return React__namespace.createElement(
          LocalizationContext.Provider,
          { value: localizationContext },
          React__namespace.createElement(
            ThemeContext.Provider,
            { value: themeContext },
            React__namespace.createElement("div", { ref: containerRef, className: "rpv-core__viewer rpv-core__viewer--".concat(themeContext.currentTheme), "data-testid": "core__viewer", style: {
              height: "100%",
              width: "100%"
            } }, file.shouldLoad && React__namespace.createElement(DocumentLoader, { characterMap, file: file.data, httpHeaders, render: function(doc) {
              return React__namespace.createElement(PageSizeCalculator, { defaultScale, doc, render: function(pageSizes, initialScale) {
                return React__namespace.createElement(Inner, { currentFile: {
                  data: file.data,
                  name: file.name
                }, defaultScale, doc, enableSmoothScroll, initialPage, initialRotation, initialScale, pageLayout, pageSizes, plugins, renderPage, scrollMode, setRenderRange, viewMode, viewerState: {
                  file,
                  fullScreenMode: exports2.FullScreenMode.Normal,
                  pageIndex: -1,
                  pageHeight: pageSizes[0].pageHeight,
                  pageWidth: pageSizes[0].pageWidth,
                  pagesRotation: /* @__PURE__ */ new Map(),
                  rotation: initialRotation,
                  scale: initialScale,
                  scrollMode,
                  viewMode
                }, onDocumentLoad, onOpenFile: openFile, onPageChange, onRotate, onRotatePage, onZoom });
              }, scrollMode, viewMode });
            }, renderError, renderLoader, renderProtectedView, transformGetDocumentParams, withCredentials, onDocumentAskPassword }))
          )
        );
      };
      var Worker3 = function(_a) {
        var children = _a.children, workerUrl = _a.workerUrl;
        PdfJsApi__namespace.GlobalWorkerOptions.workerSrc = workerUrl;
        return React__namespace.createElement(React__namespace.Fragment, null, children);
      };
      exports2.Button = Button;
      exports2.Icon = Icon;
      exports2.LazyRender = LazyRender;
      exports2.LocalizationContext = LocalizationContext;
      exports2.Menu = Menu;
      exports2.MenuDivider = MenuDivider;
      exports2.MenuItem = MenuItem;
      exports2.MinimalButton = MinimalButton;
      exports2.Modal = Modal;
      exports2.Popover = Popover;
      exports2.PrimaryButton = PrimaryButton;
      exports2.ProgressBar = ProgressBar;
      exports2.Separator = Separator;
      exports2.Spinner = Spinner;
      exports2.Splitter = Splitter;
      exports2.TextBox = TextBox;
      exports2.ThemeContext = ThemeContext;
      exports2.Tooltip = Tooltip;
      exports2.Viewer = Viewer2;
      exports2.Worker = Worker3;
      exports2.chunk = chunk;
      exports2.classNames = classNames;
      exports2.createStore = createStore;
      exports2.getDestination = getDestination;
      exports2.getPage = getPage;
      exports2.isFullScreenEnabled = isFullScreenEnabled;
      exports2.isMac = isMac;
      exports2.useDebounceCallback = useDebounceCallback;
      exports2.useIntersectionObserver = useIntersectionObserver;
      exports2.useIsMounted = useIsMounted;
      exports2.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
      exports2.usePrevious = usePrevious;
      exports2.useRenderQueue = useRenderQueue;
    }
  });

  // node_modules/@react-pdf-viewer/core/lib/index.js
  var require_lib = __commonJS({
    "node_modules/@react-pdf-viewer/core/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_core();
      }
    }
  });

  // node_modules/@react-pdf-viewer/attachment/lib/cjs/attachment.js
  var require_attachment = __commonJS({
    "node_modules/@react-pdf-viewer/attachment/lib/cjs/attachment.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var getFileName = function(url) {
        var str = url.split("/").pop();
        return str ? str.split("#")[0].split("?")[0] : url;
      };
      var downloadFile = function(url, data) {
        var blobUrl = typeof data === "string" ? "" : URL.createObjectURL(new Blob([data], { type: "" }));
        var link = document.createElement("a");
        link.style.display = "none";
        link.href = blobUrl || url;
        link.setAttribute("download", getFileName(url));
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        if (blobUrl) {
          URL.revokeObjectURL(blobUrl);
        }
      };
      var AttachmentList = function(_a) {
        var files = _a.files;
        var containerRef = React__namespace.useRef();
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var attachmentItemsRef = React__namespace.useRef([]);
        var clickDownloadLabel = l10n && l10n.attachment ? l10n.attachment.clickToDownload : "Click to download";
        var handleKeyDown = function(e) {
          switch (e.key) {
            case "ArrowDown":
              e.preventDefault();
              moveToItem(function(items, activeEle) {
                return items.indexOf(activeEle) + 1;
              });
              break;
            case "ArrowUp":
              e.preventDefault();
              moveToItem(function(items, activeEle) {
                return items.indexOf(activeEle) - 1;
              });
              break;
            case "End":
              e.preventDefault();
              moveToItem(function(items, _) {
                return items.length - 1;
              });
              break;
            case "Home":
              e.preventDefault();
              moveToItem(function(_, __) {
                return 0;
              });
              break;
          }
        };
        var moveToItem = function(getItemIndex) {
          var container = containerRef.current;
          var attachmentItems = [].slice.call(container.getElementsByClassName("rpv-attachment__item"));
          if (attachmentItems.length === 0) {
            return;
          }
          attachmentItems.forEach(function(item) {
            return item.setAttribute("tabindex", "-1");
          });
          var activeEle = document.activeElement;
          var targetIndex = Math.min(attachmentItems.length - 1, Math.max(0, getItemIndex(attachmentItems, activeEle)));
          var targetEle = attachmentItems[targetIndex];
          targetEle.setAttribute("tabindex", "0");
          targetEle.focus();
        };
        core.useIsomorphicLayoutEffect(function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          var attachmentItems = [].slice.call(container.getElementsByClassName("rpv-attachment__item"));
          attachmentItemsRef.current = attachmentItems;
          if (attachmentItems.length > 0) {
            var firstItem = attachmentItems[0];
            firstItem.focus();
            firstItem.setAttribute("tabindex", "0");
          }
        }, []);
        return React__namespace.createElement("div", { "data-testid": "attachment__list", className: core.classNames({
          "rpv-attachment__list": true,
          "rpv-attachment__list--rtl": isRtl
        }), ref: containerRef, tabIndex: -1, onKeyDown: handleKeyDown }, files.map(function(file) {
          return React__namespace.createElement("button", { className: "rpv-attachment__item", key: file.fileName, tabIndex: -1, title: clickDownloadLabel, type: "button", onClick: function() {
            return downloadFile(file.fileName, file.data);
          } }, file.fileName);
        }));
      };
      var AttachmentLoader = function(_a) {
        var doc = _a.doc;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var noAttachmentLabel = l10n && l10n.attachment ? l10n.attachment.noAttachment : "There is no attachment";
        var _b = React__namespace.useState({
          files: [],
          isLoaded: false
        }), attachments = _b[0], setAttachments = _b[1];
        React__namespace.useEffect(function() {
          doc.getAttachments().then(function(response) {
            var files = response ? Object.keys(response).map(function(file) {
              return {
                data: response[file].content,
                fileName: response[file].filename
              };
            }) : [];
            setAttachments({
              files,
              isLoaded: true
            });
          });
        }, [doc]);
        return !attachments.isLoaded ? React__namespace.createElement(core.Spinner, null) : attachments.files.length === 0 ? React__namespace.createElement("div", { "data-testid": "attachment__empty", className: core.classNames({
          "rpv-attachment__empty": true,
          "rpv-attachment__empty--rtl": isRtl
        }) }, noAttachmentLabel) : React__namespace.createElement(AttachmentList, { files: attachments.files });
      };
      var AttachmentListWithStore = function(_a) {
        var store = _a.store;
        var _b = React__namespace.useState(store.get("doc")), currentDoc = _b[0], setCurrentDoc = _b[1];
        var handleDocumentChanged = function(doc) {
          setCurrentDoc(doc);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
          };
        }, []);
        return currentDoc ? React__namespace.createElement(AttachmentLoader, { doc: currentDoc }) : React__namespace.createElement(
          "div",
          { className: "rpv-attachment__loader" },
          React__namespace.createElement(core.Spinner, null)
        );
      };
      var attachmentPlugin = function() {
        var store = React__namespace.useMemo(function() {
          return core.createStore({});
        }, []);
        var AttachmentsDecorator = function() {
          return React__namespace.createElement(AttachmentListWithStore, { store });
        };
        return {
          onDocumentLoad: function(props) {
            store.update("doc", props.doc);
          },
          Attachments: AttachmentsDecorator
        };
      };
      exports2.attachmentPlugin = attachmentPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/attachment/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/@react-pdf-viewer/attachment/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_attachment();
      }
    }
  });

  // node_modules/@react-pdf-viewer/bookmark/lib/cjs/bookmark.js
  var require_bookmark = __commonJS({
    "node_modules/@react-pdf-viewer/bookmark/lib/cjs/bookmark.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var DownArrowIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M6.427,8.245A.5.5,0,0,1,6.862,7.5H17.138a.5.5,0,0,1,.435.749l-5.139,9a.5.5,0,0,1-.868,0Z" })
        );
      };
      var RightArrowIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M9.248,17.572a.5.5,0,0,1-.748-.434V6.862a.5.5,0,0,1,.748-.434l8.992,5.138a.5.5,0,0,1,0,.868Z" })
        );
      };
      var shouldBeCollapsed = function(bookmark) {
        var count = bookmark.count, items = bookmark.items;
        if (count >= 0) {
          return false;
        }
        var numSubItems = items.length;
        if (numSubItems === 0) {
          return false;
        }
        var subItems = items.concat([]);
        while (subItems.length > 0) {
          var firstChild = subItems.shift();
          var children = firstChild.items;
          if (firstChild.count && children && firstChild.count > 0 && children.length > 0) {
            numSubItems += children.length;
            subItems = subItems.concat(children);
          }
        }
        return Math.abs(count) === numSubItems;
      };
      var BookmarkItem = function(_a) {
        var bookmark = _a.bookmark, depth = _a.depth, doc = _a.doc, index = _a.index, isBookmarkExpanded = _a.isBookmarkExpanded, numberOfSiblings = _a.numberOfSiblings, pathFromRoot = _a.pathFromRoot, renderBookmarkItem = _a.renderBookmarkItem, store = _a.store;
        var path = pathFromRoot ? "".concat(pathFromRoot, ".").concat(index) : "".concat(index);
        var defaultIsCollapsed = React__namespace.useMemo(function() {
          return shouldBeCollapsed(bookmark);
        }, [bookmark]);
        var bookmarkExpandedMap = store.get("bookmarkExpandedMap");
        var defaultExpanded = isBookmarkExpanded ? isBookmarkExpanded({ bookmark, doc, depth, index }) : bookmarkExpandedMap.has(path) ? bookmarkExpandedMap.get(path) : !defaultIsCollapsed;
        var _b = React__namespace.useState(defaultExpanded), expanded = _b[0], setExpanded = _b[1];
        var hasSubItems = bookmark.items && bookmark.items.length > 0;
        var toggleSubItems = function() {
          var newState = !expanded;
          store.updateCurrentValue("bookmarkExpandedMap", function(currentValue) {
            return currentValue.set(path, newState);
          });
          setExpanded(newState);
        };
        var jumpToDest = function() {
          var dest = bookmark.dest;
          var jumpToDestination = store.get("jumpToDestination");
          core.getDestination(doc, dest).then(function(target) {
            if (jumpToDestination) {
              jumpToDestination(__assign({ label: bookmark.title }, target));
            }
          });
        };
        var clickBookmark = function() {
          if (hasSubItems && bookmark.dest) {
            jumpToDest();
          }
        };
        var clickItem = function() {
          if (!hasSubItems && bookmark.dest) {
            jumpToDest();
          }
        };
        var defaultRenderItem = function(onClickItem, children) {
          return React__namespace.createElement("div", { className: "rpv-bookmark__item", style: {
            paddingLeft: "".concat(depth * 1.25, "rem")
          }, onClick: onClickItem }, children);
        };
        var defaultRenderToggle = function(expandIcon, collapseIcon) {
          return hasSubItems ? React__namespace.createElement("span", { className: "rpv-bookmark__toggle", "data-testid": "bookmark__toggle-".concat(depth, "-").concat(index), onClick: toggleSubItems }, expanded ? expandIcon : collapseIcon) : React__namespace.createElement("span", { className: "rpv-bookmark__toggle" });
        };
        var defaultRenderTitle = function(onClickBookmark) {
          return bookmark.url ? React__namespace.createElement("a", { className: "rpv-bookmark__title", href: bookmark.url, rel: "noopener noreferrer nofollow", target: bookmark.newWindow ? "_blank" : "" }, bookmark.title) : React__namespace.createElement("div", { className: "rpv-bookmark__title", "aria-label": bookmark.title, onClick: onClickBookmark }, bookmark.title);
        };
        return React__namespace.createElement(
          "li",
          { "aria-expanded": expanded ? "true" : "false", "aria-label": bookmark.title, "aria-level": depth + 1, "aria-posinset": index + 1, "aria-setsize": numberOfSiblings, role: "treeitem", tabIndex: -1 },
          renderBookmarkItem ? renderBookmarkItem({
            bookmark,
            depth,
            hasSubItems,
            index,
            isExpanded: expanded,
            path,
            defaultRenderItem,
            defaultRenderTitle,
            defaultRenderToggle,
            onClickItem: clickItem,
            onClickTitle: clickBookmark,
            onToggleSubItems: toggleSubItems
          }) : defaultRenderItem(clickItem, React__namespace.createElement(
            React__namespace.Fragment,
            null,
            defaultRenderToggle(React__namespace.createElement(DownArrowIcon, null), React__namespace.createElement(RightArrowIcon, null)),
            defaultRenderTitle(clickBookmark)
          )),
          hasSubItems && expanded && React__namespace.createElement(BookmarkList, { bookmarks: bookmark.items, depth: depth + 1, doc, isBookmarkExpanded, isRoot: false, pathFromRoot: path, renderBookmarkItem, store })
        );
      };
      var BookmarkList = function(_a) {
        var bookmarks = _a.bookmarks, _b = _a.depth, depth = _b === void 0 ? 0 : _b, doc = _a.doc, isBookmarkExpanded = _a.isBookmarkExpanded, isRoot = _a.isRoot, pathFromRoot = _a.pathFromRoot, renderBookmarkItem = _a.renderBookmarkItem, store = _a.store;
        return React__namespace.createElement("ul", { className: "rpv-bookmark__list", role: isRoot ? "tree" : "group", tabIndex: -1 }, bookmarks.map(function(bookmark, index) {
          return React__namespace.createElement(BookmarkItem, { bookmark, depth, doc, index, isBookmarkExpanded, key: index, numberOfSiblings: bookmarks.length, pathFromRoot, renderBookmarkItem, store });
        }));
      };
      var Toggle;
      (function(Toggle2) {
        Toggle2[Toggle2["Collapse"] = 0] = "Collapse";
        Toggle2[Toggle2["Expand"] = 1] = "Expand";
      })(Toggle || (Toggle = {}));
      var BookmarkListRoot = function(_a) {
        var bookmarks = _a.bookmarks, doc = _a.doc, isBookmarkExpanded = _a.isBookmarkExpanded, renderBookmarkItem = _a.renderBookmarkItem, store = _a.store;
        var containerRef = React__namespace.useRef();
        var handleKeyDown = function(e) {
          var container = containerRef.current;
          if (!container || !(e.target instanceof HTMLElement) || !container.contains(e.target)) {
            return;
          }
          switch (e.key) {
            case "ArrowDown":
              e.preventDefault();
              moveToItem(function(bookmarkElements, activeEle) {
                return bookmarkElements.indexOf(activeEle) + 1;
              });
              break;
            case "ArrowLeft":
              e.preventDefault();
              toggle(Toggle.Collapse);
              break;
            case "ArrowRight":
              e.preventDefault();
              toggle(Toggle.Expand);
              break;
            case "ArrowUp":
              e.preventDefault;
              moveToItem(function(bookmarkElements, activeEle) {
                return bookmarkElements.indexOf(activeEle) - 1;
              });
              break;
            case "End":
              e.preventDefault();
              moveToItem(function(bookmarkElements, _) {
                return bookmarkElements.length - 1;
              });
              break;
            case " ":
            case "Enter":
            case "Space":
              e.preventDefault();
              clickBookmark();
              break;
            case "Home":
              e.preventDefault();
              moveToItem(function(_, __) {
                return 0;
              });
              break;
          }
        };
        var clickBookmark = function() {
          var closestItem = document.activeElement.closest(".rpv-bookmark__item");
          var titleEle = closestItem.querySelector(".rpv-bookmark__title");
          if (titleEle) {
            titleEle.click();
          }
        };
        var moveToItem = function(getItemIndex) {
          var container = containerRef.current;
          var bookmarkElements = [].slice.call(container.getElementsByClassName("rpv-bookmark__item"));
          if (bookmarkElements.length === 0) {
            return;
          }
          var activeEle = document.activeElement;
          var targetIndex = Math.min(bookmarkElements.length - 1, Math.max(0, getItemIndex(bookmarkElements, activeEle)));
          var targetEle = bookmarkElements[targetIndex];
          activeEle.setAttribute("tabindex", "-1");
          targetEle.setAttribute("tabindex", "0");
          targetEle.focus();
        };
        var toggle = function(toggle2) {
          var container = containerRef.current;
          var bookmarkElements = [].slice.call(container.getElementsByClassName("rpv-bookmark__item"));
          if (bookmarkElements.length === 0) {
            return;
          }
          var closestItem = document.activeElement.closest(".rpv-bookmark__item");
          var expanedAttribute = toggle2 === Toggle.Collapse ? "true" : "false";
          if (closestItem && closestItem.parentElement.getAttribute("aria-expanded") === expanedAttribute) {
            var toggleEle = closestItem.querySelector(".rpv-bookmark__toggle");
            if (toggleEle) {
              toggleEle.click();
            }
          }
        };
        React__namespace.useEffect(function() {
          document.addEventListener("keydown", handleKeyDown);
          return function() {
            document.removeEventListener("keydown", handleKeyDown);
          };
        }, []);
        React__namespace.useEffect(function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          var bookmarkElements = [].slice.call(container.getElementsByClassName("rpv-bookmark__item"));
          if (bookmarkElements.length > 0) {
            bookmarkElements[0].focus();
            bookmarkElements[0].setAttribute("tabindex", "0");
          }
        }, []);
        return React__namespace.createElement(
          "div",
          { ref: containerRef },
          React__namespace.createElement(BookmarkList, { bookmarks, depth: 0, doc, isBookmarkExpanded, isRoot: true, pathFromRoot: "", renderBookmarkItem, store })
        );
      };
      var BookmarkLoader = function(_a) {
        var doc = _a.doc, isBookmarkExpanded = _a.isBookmarkExpanded, renderBookmarkItem = _a.renderBookmarkItem, store = _a.store;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var _b = React__namespace.useState({
          isLoaded: false,
          items: []
        }), bookmarks = _b[0], setBookmarks = _b[1];
        React__namespace.useEffect(function() {
          setBookmarks({
            isLoaded: false,
            items: []
          });
          doc.getOutline().then(function(outline) {
            setBookmarks({
              isLoaded: true,
              items: outline || []
            });
          });
        }, [doc]);
        return !bookmarks.isLoaded ? React__namespace.createElement(
          "div",
          { className: "rpv-bookmark__loader" },
          React__namespace.createElement(core.Spinner, null)
        ) : bookmarks.items.length === 0 ? React__namespace.createElement("div", { "data-testid": "bookmark__empty", className: core.classNames({
          "rpv-bookmark__empty": true,
          "rpv-bookmark__empty--rtl": isRtl
        }) }, l10n && l10n.bookmark ? l10n.bookmark.noBookmark : "There is no bookmark") : React__namespace.createElement(
          "div",
          { "data-testid": "bookmark__container", className: core.classNames({
            "rpv-bookmark__container": true,
            "rpv-bookmark__container--rtl": isRtl
          }) },
          React__namespace.createElement(BookmarkListRoot, { bookmarks: bookmarks.items, doc, isBookmarkExpanded, renderBookmarkItem, store })
        );
      };
      var BookmarkListWithStore = function(_a) {
        var isBookmarkExpanded = _a.isBookmarkExpanded, renderBookmarkItem = _a.renderBookmarkItem, store = _a.store;
        var _b = React__namespace.useState(store.get("doc")), currentDoc = _b[0], setCurrentDoc = _b[1];
        var handleDocumentChanged = function(doc) {
          setCurrentDoc(doc);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
          };
        }, []);
        return currentDoc ? React__namespace.createElement(BookmarkLoader, { doc: currentDoc, isBookmarkExpanded, renderBookmarkItem, store }) : React__namespace.createElement(
          "div",
          { className: "rpv-bookmark__loader" },
          React__namespace.createElement(core.Spinner, null)
        );
      };
      var bookmarkPlugin = function() {
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            bookmarkExpandedMap: /* @__PURE__ */ new Map()
          });
        }, []);
        var BookmarksDecorator = function(props) {
          return React__namespace.createElement(BookmarkListWithStore, { isBookmarkExpanded: props === null || props === void 0 ? void 0 : props.isBookmarkExpanded, renderBookmarkItem: props === null || props === void 0 ? void 0 : props.renderBookmarkItem, store });
        };
        return {
          install: function(pluginFunctions) {
            store.update("jumpToDestination", pluginFunctions.jumpToDestination);
          },
          onDocumentLoad: function(props) {
            store.update("doc", props.doc);
          },
          Bookmarks: BookmarksDecorator
        };
      };
      exports2.DownArrowIcon = DownArrowIcon;
      exports2.RightArrowIcon = RightArrowIcon;
      exports2.bookmarkPlugin = bookmarkPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/bookmark/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/@react-pdf-viewer/bookmark/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_bookmark();
      }
    }
  });

  // node_modules/@react-pdf-viewer/thumbnail/lib/cjs/thumbnail.js
  var require_thumbnail = __commonJS({
    "node_modules/@react-pdf-viewer/thumbnail/lib/cjs/thumbnail.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      exports2.ThumbnailDirection = void 0;
      (function(ThumbnailDirection) {
        ThumbnailDirection["Horizontal"] = "Horizontal";
        ThumbnailDirection["Vertical"] = "Vertical";
      })(exports2.ThumbnailDirection || (exports2.ThumbnailDirection = {}));
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var CoverInner = function(_a) {
        var doc = _a.doc, getPageIndex = _a.getPageIndex, renderSpinner = _a.renderSpinner, store = _a.store, width = _a.width;
        var numPages = doc.numPages;
        var targetPage = getPageIndex ? getPageIndex({ numPages }) : 0;
        var normalizePage = Math.max(0, Math.min(targetPage, numPages - 1));
        var initialPagesRotation = store.get("pagesRotation") || /* @__PURE__ */ new Map();
        var initialTargetPageRotation = initialPagesRotation.has(normalizePage) ? initialPagesRotation.get(normalizePage) : 0;
        var _b = React__namespace.useState(""), src = _b[0], setSrc = _b[1];
        var isMounted = core.useIsMounted();
        var renderTask = React__namespace.useRef();
        var _c = React__namespace.useState(store.get("rotation") || 0), rotation = _c[0], setRotation = _c[1];
        var _d = React__namespace.useState(initialTargetPageRotation), pageRotation = _d[0], setPageRotation = _d[1];
        var _e = React__namespace.useState(false), isVisible = _e[0], setVisible = _e[1];
        var handlePagesRotationChanged = function(rotations) {
          var pageRotation2 = rotations.has(normalizePage) ? rotations.get(normalizePage) : 0;
          setPageRotation(pageRotation2);
        };
        var handleRotationChanged = function(currentRotation) {
          setRotation(currentRotation);
        };
        var handleVisibilityChanged = function(params) {
          setVisible(params.isVisible);
        };
        var containerRef = core.useIntersectionObserver({
          onVisibilityChanged: handleVisibilityChanged
        });
        React__namespace.useEffect(function() {
          if (!isVisible) {
            return;
          }
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          setSrc("");
          core.getPage(doc, normalizePage).then(function(page) {
            var viewport = page.getViewport({ scale: 1 });
            var viewportRotation = viewport.rotation;
            var rotationValue = (viewportRotation + rotation + pageRotation) % 360;
            var isVertical = Math.abs(rotation + pageRotation) % 180 === 0;
            var w = isVertical ? viewport.width : viewport.height;
            var h = isVertical ? viewport.height : viewport.width;
            var canvas = document.createElement("canvas");
            var canvasContext = canvas.getContext("2d", { alpha: false });
            var containerWidth = containerEle.clientWidth;
            var containerHeight = containerEle.clientHeight;
            var scaled = width ? width / w : Math.min(containerWidth / w, containerHeight / h);
            var canvasWidth = scaled * w;
            var canvasHeight = scaled * h;
            canvas.height = canvasHeight;
            canvas.width = canvasWidth;
            canvas.style.opacity = "0";
            var renderViewport = page.getViewport({
              rotation: rotationValue,
              scale: scaled
            });
            renderTask.current = page.render({ canvasContext, viewport: renderViewport });
            renderTask.current.promise.then(function() {
              isMounted.current && setSrc(canvas.toDataURL());
              canvas.width = 0;
              canvas.height = 0;
            }, function() {
            });
          });
        }, [pageRotation, isVisible]);
        React__namespace.useEffect(function() {
          store.subscribe("pagesRotation", handlePagesRotationChanged);
          store.subscribe("rotation", handleRotationChanged);
          return function() {
            store.unsubscribe("pagesRotation", handlePagesRotationChanged);
            store.unsubscribe("rotation", handleRotationChanged);
          };
        }, []);
        React__namespace.useEffect(function() {
          return function() {
            var _a2;
            (_a2 = renderTask.current) === null || _a2 === void 0 ? void 0 : _a2.cancel();
          };
        }, []);
        return React__namespace.createElement("div", { ref: containerRef, className: "rpv-thumbnail__cover-inner", "data-testid": "thumbnail__cover-inner" }, src ? React__namespace.createElement("img", { className: "rpv-thumbnail__cover-image", "data-testid": "thumbnail__cover-image", src }) : React__namespace.createElement("div", { className: "rpv-thumbnail__cover-loader", "data-testid": "thumbnail__cover-loader" }, renderSpinner ? renderSpinner() : React__namespace.createElement(core.Spinner, null)));
      };
      var Cover = function(_a) {
        var getPageIndex = _a.getPageIndex, renderSpinner = _a.renderSpinner, store = _a.store, width = _a.width;
        var _b = React__namespace.useState(store.get("doc")), currentDoc = _b[0], setCurrentDoc = _b[1];
        var handleDocumentChanged = function(doc) {
          setCurrentDoc(doc);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
          };
        }, []);
        return React__namespace.createElement("div", { className: "rpv-thumbnail__cover" }, currentDoc ? React__namespace.createElement(CoverInner, { doc: currentDoc, getPageIndex, renderSpinner, store, width }) : React__namespace.createElement("div", { className: "rpv-thumbnail__cover-loader" }, renderSpinner ? renderSpinner() : React__namespace.createElement(core.Spinner, null)));
      };
      var defaultSpinner = function() {
        return React__namespace.createElement(core.Spinner, null);
      };
      var SpinnerContext = React__namespace.createContext({
        renderSpinner: defaultSpinner
      });
      var FetchLabels = function(_a) {
        var children = _a.children, doc = _a.doc;
        var isMounted = core.useIsMounted();
        var _b = React__namespace.useState({
          loading: true,
          labels: []
        }), status = _b[0], setStatus = _b[1];
        React__namespace.useEffect(function() {
          doc.getPageLabels().then(function(result) {
            isMounted.current && setStatus({ loading: false, labels: result || [] });
          });
        }, [doc.loadingTask.docId]);
        return status.loading ? React__namespace.createElement(React__namespace.Fragment, null) : children(status.labels);
      };
      var scrollToBeVisibleVertically = function(ele, container) {
        var top = ele.getBoundingClientRect().top - container.getBoundingClientRect().top;
        var eleHeight = ele.clientHeight;
        var containerHeight = container.clientHeight;
        if (top < 0) {
          container.scrollTop += top;
          return;
        }
        if (top + eleHeight <= containerHeight) {
          return;
        }
        container.scrollTop += top + eleHeight - containerHeight;
      };
      var scrollToBeVisibleHorizontally = function(ele, container) {
        var left = ele.getBoundingClientRect().left - container.getBoundingClientRect().left;
        var eleWidth = ele.clientWidth;
        var containerWidth = container.clientWidth;
        if (left < 0) {
          container.scrollLeft += left;
          return;
        }
        if (left + eleWidth <= containerWidth) {
          return;
        }
        container.scrollLeft += left + eleWidth - containerWidth;
      };
      var ThumbnailItem = function(_a) {
        var page = _a.page, pageHeight = _a.pageHeight, pageIndex = _a.pageIndex, pageWidth = _a.pageWidth, rotation = _a.rotation, thumbnailHeight = _a.thumbnailHeight, thumbnailWidth = _a.thumbnailWidth, onRenderCompleted = _a.onRenderCompleted;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var renderTask = React__namespace.useRef();
        var _b = React__namespace.useState(""), src = _b[0], setSrc = _b[1];
        var thumbnailLabel = l10n && l10n.thumbnail ? l10n.thumbnail.thumbnailLabel : "Thumbnail of page {{pageIndex}}";
        React__namespace.useEffect(function() {
          var task = renderTask.current;
          if (task) {
            task.cancel();
          }
          var canvas = document.createElement("canvas");
          var canvasContext = canvas.getContext("2d", { alpha: false });
          var w = thumbnailWidth;
          var h = w / (pageWidth / pageHeight);
          var scale = w / pageWidth;
          canvas.height = h;
          canvas.width = w;
          canvas.style.height = "".concat(h, "px");
          canvas.style.width = "".concat(w, "px");
          var viewport = page.getViewport({ rotation, scale });
          renderTask.current = page.render({ canvasContext, viewport });
          renderTask.current.promise.then(function() {
            setSrc(canvas.toDataURL());
            onRenderCompleted(pageIndex);
          }, function() {
            onRenderCompleted(pageIndex);
          });
          return function() {
            var _a2;
            (_a2 = renderTask.current) === null || _a2 === void 0 ? void 0 : _a2.cancel();
          };
        }, [rotation]);
        return !src ? React__namespace.useContext(SpinnerContext).renderSpinner() : React__namespace.createElement("img", { "aria-label": thumbnailLabel.replace("{{pageIndex}}", "".concat(pageIndex + 1)), src, height: "".concat(thumbnailHeight, "px"), width: "".concat(thumbnailWidth, "px") });
      };
      var ThumbnailContainer = function(_a) {
        var doc = _a.doc, pageHeight = _a.pageHeight, pageIndex = _a.pageIndex, pageRotation = _a.pageRotation, pageWidth = _a.pageWidth, rotation = _a.rotation, shouldRender = _a.shouldRender, thumbnailWidth = _a.thumbnailWidth, onRenderCompleted = _a.onRenderCompleted, onVisibilityChanged = _a.onVisibilityChanged;
        var isMounted = core.useIsMounted();
        var _b = React__namespace.useState({
          height: pageHeight,
          page: null,
          viewportRotation: 0,
          width: pageWidth
        }), pageSize = _b[0], setPageSize = _b[1];
        var page = pageSize.page, height = pageSize.height, width = pageSize.width;
        var scale = width / height;
        var isVertical = Math.abs(rotation + pageRotation) % 180 === 0;
        var w = isVertical ? thumbnailWidth : thumbnailWidth / scale;
        var h = isVertical ? thumbnailWidth / scale : thumbnailWidth;
        React__namespace.useEffect(function() {
          if (shouldRender) {
            core.getPage(doc, pageIndex).then(function(pdfPage) {
              var viewport = pdfPage.getViewport({ scale: 1 });
              isMounted.current && setPageSize({
                height: viewport.height,
                page: pdfPage,
                viewportRotation: viewport.rotation,
                width: viewport.width
              });
            });
          }
        }, [shouldRender]);
        var rotationNumber = (pageSize.viewportRotation + rotation + pageRotation) % 360;
        var containerRef = core.useIntersectionObserver({
          onVisibilityChanged: function(visibility) {
            onVisibilityChanged(pageIndex, visibility);
          }
        });
        return React__namespace.createElement("div", { className: "rpv-thumbnail__container", "data-testid": "thumbnail__container-".concat(pageIndex), ref: containerRef, style: {
          height: "".concat(h, "px"),
          width: "".concat(w, "px")
        } }, !page ? React__namespace.useContext(SpinnerContext).renderSpinner() : React__namespace.createElement(ThumbnailItem, { page, pageHeight: isVertical ? height : width, pageIndex, pageWidth: isVertical ? width : height, rotation: rotationNumber, thumbnailHeight: h, thumbnailWidth: w, onRenderCompleted }));
      };
      var ThumbnailList = function(_a) {
        var currentPage = _a.currentPage, doc = _a.doc, labels = _a.labels, pagesRotation = _a.pagesRotation, pageHeight = _a.pageHeight, pageWidth = _a.pageWidth, renderCurrentPageLabel = _a.renderCurrentPageLabel, renderThumbnailItem = _a.renderThumbnailItem, rotatedPage = _a.rotatedPage, rotation = _a.rotation, thumbnailDirection = _a.thumbnailDirection, thumbnailWidth = _a.thumbnailWidth, viewMode = _a.viewMode, onJumpToPage = _a.onJumpToPage, onRotatePage = _a.onRotatePage;
        var numPages = doc.numPages;
        var docId = doc.loadingTask.docId;
        var containerRef = React__namespace.useRef(null);
        var thumbnailsRef = React__namespace.useRef([]);
        var _b = React__namespace.useState(currentPage), currentFocused = _b[0], setCurrentFocused = _b[1];
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var _c = React__namespace.useState(-1), renderPageIndex = _c[0], setRenderPageIndex = _c[1];
        var isMounted = core.useIsMounted();
        var previousViewMode = core.usePrevious(viewMode);
        var hasRenderingThumbnailRef = React__namespace.useRef(false);
        var renderQueue = core.useRenderQueue({ doc });
        var pageIndexes = React__namespace.useMemo(function() {
          return Array(numPages).fill(0).map(function(_, pageIndex) {
            return pageIndex;
          });
        }, [docId]);
        var chunks = React__namespace.useMemo(function() {
          switch (viewMode) {
            case core.ViewMode.DualPage:
              return core.chunk(pageIndexes, 2);
            case core.ViewMode.DualPageWithCover:
              return [[pageIndexes[0]]].concat(core.chunk(pageIndexes.slice(1), 2));
            case core.ViewMode.SinglePage:
            default:
              return core.chunk(pageIndexes, 1);
          }
        }, [docId, viewMode]);
        var handleKeyDown = function(e) {
          switch (e.key) {
            case "ArrowDown":
              activateNextItem();
              break;
            case "ArrowUp":
              activatePreviousItem();
              break;
            case "Enter":
              jumpToFocusedPage();
              break;
          }
        };
        var activateNextItem = function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          var items = thumbnailsRef.current;
          var nextItem = currentFocused + 1;
          if (nextItem < items.length) {
            if (currentFocused >= 0) {
              items[currentFocused].setAttribute("tabindex", "-1");
            }
            setCurrentFocused(nextItem);
          }
        };
        var activatePreviousItem = function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          var items = thumbnailsRef.current;
          var prevItem = currentFocused - 1;
          if (prevItem >= 0) {
            if (currentFocused >= 0) {
              items[currentFocused].setAttribute("tabindex", "-1");
            }
            setCurrentFocused(prevItem);
          }
        };
        var jumpToFocusedPage = function() {
          if (currentFocused >= 0 && currentFocused < numPages) {
            onJumpToPage(currentFocused);
          }
        };
        core.useIsomorphicLayoutEffect(function() {
          var container = containerRef.current;
          if (!container) {
            return;
          }
          thumbnailsRef.current = Array.from(container.querySelectorAll(".rpv-thumbnail__item"));
        }, [viewMode]);
        React__namespace.useEffect(function() {
          var thumbnails = thumbnailsRef.current;
          if (thumbnails.length === 0 || currentFocused < 0 || currentFocused > thumbnails.length) {
            return;
          }
          var thumbnailEle = thumbnails[currentFocused];
          thumbnailEle.setAttribute("tabindex", "0");
          thumbnailEle.focus();
        }, [currentFocused]);
        core.useIsomorphicLayoutEffect(function() {
          var container = containerRef.current;
          var thumbnails = thumbnailsRef.current;
          if (!container || thumbnails.length === 0 || currentPage < 0 || currentPage > thumbnails.length) {
            return;
          }
          var thumbnailContainer = thumbnails[currentPage].closest(".rpv-thumbnail__items");
          if (thumbnailContainer) {
            thumbnailDirection === exports2.ThumbnailDirection.Vertical ? scrollToBeVisibleVertically(thumbnailContainer, container) : scrollToBeVisibleHorizontally(thumbnailContainer, container);
          }
        }, [currentPage, thumbnailDirection]);
        var handleRenderCompleted = React__namespace.useCallback(function(pageIndex) {
          if (isMounted.current) {
            renderQueue.markRendered(pageIndex);
            hasRenderingThumbnailRef.current = false;
            renderNextThumbnail();
          }
        }, [docId]);
        var handleVisibilityChanged = React__namespace.useCallback(function(pageIndex, visibility) {
          visibility.isVisible ? renderQueue.setVisibility(pageIndex, visibility.ratio) : renderQueue.setOutOfRange(pageIndex);
          renderNextThumbnail();
        }, [docId]);
        var renderNextThumbnail = React__namespace.useCallback(function() {
          if (hasRenderingThumbnailRef.current) {
            return;
          }
          var nextPage = renderQueue.getHighestPriorityPage();
          if (nextPage > -1) {
            renderQueue.markRendering(nextPage);
            hasRenderingThumbnailRef.current = true;
            setRenderPageIndex(nextPage);
          }
        }, [docId]);
        React__namespace.useEffect(function() {
          if (rotatedPage >= 0) {
            renderQueue.markRendering(rotatedPage);
            hasRenderingThumbnailRef.current = true;
            setRenderPageIndex(rotatedPage);
          }
        }, [docId, rotatedPage]);
        core.useIsomorphicLayoutEffect(function() {
          if (previousViewMode !== viewMode) {
            renderQueue.markNotRendered();
            renderNextThumbnail();
          }
        }, [viewMode]);
        var renderPageThumbnail = function(pageIndex) {
          var isCover = viewMode === core.ViewMode.DualPageWithCover && (pageIndex === 0 || numPages % 2 === 0 && pageIndex === numPages - 1);
          var key = "".concat(doc.loadingTask.docId, "___").concat(pageIndex);
          var pageLabel = labels.length === numPages ? labels[pageIndex] : "".concat(pageIndex + 1);
          var label = renderCurrentPageLabel ? renderCurrentPageLabel({ currentPage, pageIndex, numPages, pageLabel }) : pageLabel;
          var pageRotation = pagesRotation.has(pageIndex) ? pagesRotation.get(pageIndex) : 0;
          var thumbnail = React__namespace.createElement(ThumbnailContainer, { doc, pageHeight, pageIndex, pageRotation, pageWidth, rotation, shouldRender: renderPageIndex === pageIndex, thumbnailWidth, onRenderCompleted: handleRenderCompleted, onVisibilityChanged: handleVisibilityChanged });
          return renderThumbnailItem ? renderThumbnailItem({
            currentPage,
            key,
            numPages,
            pageIndex,
            renderPageLabel: React__namespace.createElement(React__namespace.Fragment, null, label),
            renderPageThumbnail: thumbnail,
            onJumpToPage: function() {
              return onJumpToPage(pageIndex);
            },
            onRotatePage: function(direction2) {
              return onRotatePage(pageIndex, direction2);
            }
          }) : React__namespace.createElement(
            "div",
            { key },
            React__namespace.createElement("div", { className: core.classNames({
              "rpv-thumbnail__item": true,
              "rpv-thumbnail__item--dual-even": viewMode === core.ViewMode.DualPage && pageIndex % 2 === 0,
              "rpv-thumbnail__item--dual-odd": viewMode === core.ViewMode.DualPage && pageIndex % 2 === 1,
              "rpv-thumbnail__item--dual-cover": isCover,
              "rpv-thumbnail__item--dual-cover-even": viewMode === core.ViewMode.DualPageWithCover && !isCover && pageIndex % 2 === 0,
              "rpv-thumbnail__item--dual-cover-odd": viewMode === core.ViewMode.DualPageWithCover && !isCover && pageIndex % 2 === 1,
              "rpv-thumbnail__item--single": viewMode === core.ViewMode.SinglePage,
              "rpv-thumbnail__item--selected": currentPage === pageIndex
            }), role: "button", tabIndex: currentPage === pageIndex ? 0 : -1, onClick: function() {
              return onJumpToPage(pageIndex);
            } }, thumbnail),
            React__namespace.createElement("div", { "data-testid": "thumbnail__label-".concat(pageIndex), className: "rpv-thumbnail__label" }, label)
          );
        };
        return React__namespace.createElement("div", { ref: containerRef, "data-testid": "thumbnail__list", className: core.classNames({
          "rpv-thumbnail__list": true,
          "rpv-thumbnail__list--horizontal": thumbnailDirection === exports2.ThumbnailDirection.Horizontal,
          "rpv-thumbnail__list--rtl": isRtl,
          "rpv-thumbnail__list--vertical": thumbnailDirection === exports2.ThumbnailDirection.Vertical
        }), onKeyDown: handleKeyDown }, chunks.map(function(chunkItem, index) {
          var isSelectedChunk = false;
          switch (viewMode) {
            case core.ViewMode.DualPage:
              isSelectedChunk = currentPage === 2 * index || currentPage === 2 * index + 1;
              break;
            case core.ViewMode.DualPageWithCover:
              isSelectedChunk = currentPage === 0 && index === 0 || index > 0 && currentPage === 2 * index - 1 || index > 0 && currentPage === 2 * index;
              break;
            case core.ViewMode.SinglePage:
            default:
              isSelectedChunk = currentPage === index;
              break;
          }
          return React__namespace.createElement("div", { className: core.classNames({
            "rpv-thumbnail__items": true,
            "rpv-thumbnail__items--dual": viewMode === core.ViewMode.DualPage,
            "rpv-thumbnail__items--dual-cover": viewMode === core.ViewMode.DualPageWithCover,
            "rpv-thumbnail__items--single": viewMode === core.ViewMode.SinglePage,
            "rpv-thumbnail__items--selected": isSelectedChunk
          }), key: "".concat(index, "___").concat(viewMode) }, chunkItem.map(function(pageIndex) {
            return renderPageThumbnail(pageIndex);
          }));
        }));
      };
      var ThumbnailListWithStore = function(_a) {
        var renderCurrentPageLabel = _a.renderCurrentPageLabel, renderThumbnailItem = _a.renderThumbnailItem, store = _a.store, thumbnailDirection = _a.thumbnailDirection, thumbnailWidth = _a.thumbnailWidth;
        var _b = React__namespace.useState(store.get("doc")), currentDoc = _b[0], setCurrentDoc = _b[1];
        var _c = React__namespace.useState(store.get("currentPage") || 0), currentPage = _c[0], setCurrentPage = _c[1];
        var _d = React__namespace.useState(store.get("pageHeight") || 0), pageHeight = _d[0], setPageHeight = _d[1];
        var _e = React__namespace.useState(store.get("pageWidth") || 0), pageWidth = _e[0], setPageWidth = _e[1];
        var _f = React__namespace.useState(store.get("rotation") || 0), rotation = _f[0], setRotation = _f[1];
        var _g = React__namespace.useState(store.get("pagesRotation") || /* @__PURE__ */ new Map()), pagesRotation = _g[0], setPagesRotation = _g[1];
        var _h = React__namespace.useState(store.get("rotatedPage") || -1), rotatedPage = _h[0], setRotatedPage = _h[1];
        var _j = React__namespace.useState(store.get("viewMode")), viewMode = _j[0], setViewMode = _j[1];
        var handleCurrentPageChanged = function(currentPageIndex) {
          setCurrentPage(currentPageIndex);
        };
        var handleDocumentChanged = function(doc) {
          setCurrentDoc(doc);
        };
        var handlePageHeightChanged = function(height) {
          setPageHeight(height);
        };
        var handlePageWidthChanged = function(width) {
          setPageWidth(width);
        };
        var handleRotationChanged = function(currentRotation) {
          setRotation(currentRotation);
        };
        var handlePagesRotationChanged = function(rotations) {
          setPagesRotation(rotations);
        };
        var handleRotatedPage = function(rotatedPage2) {
          setRotatedPage(rotatedPage2);
        };
        var handleViewModeChanged = function(viewMode2) {
          setViewMode(viewMode2);
        };
        var jump = function(pageIndex) {
          var jumpToPage = store.get("jumpToPage");
          if (jumpToPage) {
            jumpToPage(pageIndex);
          }
        };
        var rotatePage = function(pageIndex, direction) {
          store.get("rotatePage")(pageIndex, direction);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          store.subscribe("pageHeight", handlePageHeightChanged);
          store.subscribe("pageWidth", handlePageWidthChanged);
          store.subscribe("rotatedPage", handleRotatedPage);
          store.subscribe("rotation", handleRotationChanged);
          store.subscribe("pagesRotation", handlePagesRotationChanged);
          store.subscribe("viewMode", handleViewModeChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
            store.unsubscribe("pageHeight", handlePageHeightChanged);
            store.unsubscribe("pageWidth", handlePageWidthChanged);
            store.unsubscribe("rotatedPage", handleRotatedPage);
            store.unsubscribe("rotation", handleRotationChanged);
            store.unsubscribe("pagesRotation", handlePagesRotationChanged);
            store.unsubscribe("viewMode", handleViewModeChanged);
          };
        }, []);
        core.useIsomorphicLayoutEffect(function() {
          store.subscribe("currentPage", handleCurrentPageChanged);
          return function() {
            store.unsubscribe("currentPage", handleCurrentPageChanged);
          };
        }, []);
        return currentDoc ? React__namespace.createElement(
          core.LazyRender,
          { testId: "thumbnail__list-container", attrs: {
            className: "rpv-thumbnail__list-container"
          } },
          React__namespace.createElement(FetchLabels, { doc: currentDoc }, function(labels) {
            return React__namespace.createElement(ThumbnailList, { currentPage, doc: currentDoc, labels, pagesRotation, pageHeight, pageWidth, renderCurrentPageLabel, renderThumbnailItem, rotatedPage, rotation, thumbnailDirection, thumbnailWidth, viewMode, onJumpToPage: jump, onRotatePage: rotatePage });
          })
        ) : React__namespace.createElement("div", { "data-testid": "thumbnail-list__loader", className: "rpv-thumbnail__loader" }, React__namespace.useContext(SpinnerContext).renderSpinner());
      };
      var thumbnailPlugin = function(pluginProps) {
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            rotatePage: function() {
            },
            viewMode: core.ViewMode.SinglePage
          });
        }, []);
        var _a = React__namespace.useState(""), docId = _a[0], setDocId = _a[1];
        var CoverDecorator = function(props) {
          return React__namespace.createElement(Cover, __assign({}, props, { renderSpinner: pluginProps === null || pluginProps === void 0 ? void 0 : pluginProps.renderSpinner, store }));
        };
        var ThumbnailsDecorator = React__namespace.useCallback(function(props) {
          return React__namespace.createElement(
            SpinnerContext.Provider,
            { value: { renderSpinner: (pluginProps === null || pluginProps === void 0 ? void 0 : pluginProps.renderSpinner) || defaultSpinner } },
            React__namespace.createElement(ThumbnailListWithStore, { renderCurrentPageLabel: pluginProps === null || pluginProps === void 0 ? void 0 : pluginProps.renderCurrentPageLabel, renderThumbnailItem: props === null || props === void 0 ? void 0 : props.renderThumbnailItem, store, thumbnailDirection: (props === null || props === void 0 ? void 0 : props.thumbnailDirection) || exports2.ThumbnailDirection.Vertical, thumbnailWidth: (pluginProps === null || pluginProps === void 0 ? void 0 : pluginProps.thumbnailWidth) || 100 })
          );
        }, [docId]);
        return {
          install: function(pluginFunctions) {
            store.update("jumpToPage", pluginFunctions.jumpToPage);
            store.update("rotatePage", pluginFunctions.rotatePage);
          },
          onDocumentLoad: function(props) {
            setDocId(props.doc.loadingTask.docId);
            store.update("doc", props.doc);
          },
          onViewerStateChange: function(viewerState) {
            store.update("currentPage", viewerState.pageIndex);
            store.update("pagesRotation", viewerState.pagesRotation);
            store.update("pageHeight", viewerState.pageHeight);
            store.update("pageWidth", viewerState.pageWidth);
            store.update("rotation", viewerState.rotation);
            store.update("rotatedPage", viewerState.rotatedPage);
            store.update("viewMode", viewerState.viewMode);
            return viewerState;
          },
          Cover: CoverDecorator,
          Thumbnails: ThumbnailsDecorator
        };
      };
      exports2.thumbnailPlugin = thumbnailPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/thumbnail/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/@react-pdf-viewer/thumbnail/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_thumbnail();
      }
    }
  });

  // node_modules/@react-pdf-viewer/selection-mode/lib/cjs/selection-mode.js
  var require_selection_mode = __commonJS({
    "node_modules/@react-pdf-viewer/selection-mode/lib/cjs/selection-mode.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var HandToolIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M11.5,5.5v-2C11.5,2.672,12.172,2,13,2s1.5,0.672,1.5,1.5v2 M14.5,11.5v-6C14.5,4.672,15.172,4,16,4\n            c0.828,0,1.5,0.672,1.5,1.5v3 M17.5,13V8.5C17.5,7.672,18.172,7,19,7s1.5,0.672,1.5,1.5v10c0,2.761-2.239,5-5,5h-3.335\n            c-1.712-0.001-3.305-0.876-4.223-2.321C6.22,18.467,4.083,14,4.083,14c-0.378-0.545-0.242-1.292,0.303-1.67\n            c0.446-0.309,1.044-0.281,1.458,0.07L8.5,15.5v-10C8.5,4.672,9.172,4,10,4s1.5,0.672,1.5,1.5v6" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      exports2.SelectionMode = void 0;
      (function(SelectionMode) {
        SelectionMode["Hand"] = "Hand";
        SelectionMode["Text"] = "Text";
      })(exports2.SelectionMode || (exports2.SelectionMode = {}));
      var TextSelectionIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M13.675,11.671l2.941-2.941c0.195-0.196,0.195-0.512-0.001-0.707C16.563,7.971,16.5,7.931,16.43,7.906\n            L4.168,3.527C3.908,3.434,3.622,3.57,3.529,3.83c-0.039,0.109-0.039,0.228,0,0.336l4.379,12.262\n            c0.093,0.26,0.379,0.396,0.639,0.303c0.07-0.025,0.133-0.065,0.185-0.117l2.943-2.943l6.146,6.146c0.195,0.195,0.512,0.195,0.707,0\n            l1.293-1.293c0.195-0.195,0.195-0.512,0-0.707L13.675,11.671z" })
        );
      };
      var SwitchSelectionModeDecorator = function(_a) {
        var children = _a.children, mode = _a.mode, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = "";
        var icon = React__namespace.createElement(TextSelectionIcon, null);
        switch (mode) {
          case exports2.SelectionMode.Hand:
            label = l10n && l10n.selectionMode ? l10n.selectionMode.handTool : "Hand tool";
            icon = React__namespace.createElement(HandToolIcon, null);
            break;
          case exports2.SelectionMode.Text:
          default:
            label = l10n && l10n.selectionMode ? l10n.selectionMode.textSelectionTool : "Text selection tool";
            icon = React__namespace.createElement(TextSelectionIcon, null);
            break;
        }
        return children({ icon, label, onClick });
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var SwitchSelectionModeButton = function(_a) {
        var isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
        var testId = "";
        switch (mode) {
          case exports2.SelectionMode.Hand:
            testId = "selection-mode__hand-button";
            break;
          case exports2.SelectionMode.Text:
          default:
            testId = "selection-mode__text-button";
        }
        return React__namespace.createElement(SwitchSelectionModeDecorator, { mode, onClick }, function(props) {
          return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "selection-mode-switch", position: core.Position.BottomCenter, target: React__namespace.createElement(core.MinimalButton, { ariaLabel: props.label, isSelected, testId, onClick: props.onClick }, props.icon), content: function() {
            return props.label;
          }, offset: TOOLTIP_OFFSET });
        });
      };
      var SwitchSelectionMode = function(_a) {
        var children = _a.children, mode = _a.mode, store = _a.store;
        var onClick = function() {
          return store.update("selectionMode", mode);
        };
        var isSelected = mode === store.get("selectionMode");
        var defaultChildren = function(props) {
          return React__namespace.createElement(SwitchSelectionModeButton, { isSelected, mode: props.mode, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          isSelected,
          mode,
          onClick
        });
      };
      var SwitchSelectionModeMenuItem = function(_a) {
        var isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
        var testId = "";
        switch (mode) {
          case exports2.SelectionMode.Hand:
            testId = "selection-mode__hand-menu";
            break;
          case exports2.SelectionMode.Text:
          default:
            testId = "selection-mode__text-menu";
        }
        return React__namespace.createElement(SwitchSelectionModeDecorator, { mode, onClick }, function(props) {
          return React__namespace.createElement(core.MenuItem, { checked: isSelected, icon: props.icon, testId, onClick: props.onClick }, props.label);
        });
      };
      var Tracker = function(_a) {
        var store = _a.store;
        var pagesRef = React__namespace.useRef(null);
        var _b = React__namespace.useState(exports2.SelectionMode.Text), selectionMode = _b[0], setSelectionMode = _b[1];
        var pos = React__namespace.useRef({ top: 0, left: 0, x: 0, y: 0 });
        var onMouseMoveHandler = function(e) {
          var ele = pagesRef.current;
          if (!ele) {
            return;
          }
          ele.scrollTop = pos.current.top - (e.clientY - pos.current.y);
          ele.scrollLeft = pos.current.left - (e.clientX - pos.current.x);
        };
        var onMouseUpHandler = function() {
          var ele = pagesRef.current;
          if (!ele) {
            return;
          }
          ele.classList.add("rpv-selection-mode__grab");
          ele.classList.remove("rpv-selection-mode__grabbing");
          document.removeEventListener("mousemove", onMouseMoveHandler);
          document.removeEventListener("mouseup", onMouseUpHandler);
        };
        var onMouseDownHandler = function(e) {
          var ele = pagesRef.current;
          if (!ele || selectionMode === exports2.SelectionMode.Text) {
            return;
          }
          ele.classList.remove("rpv-selection-mode__grab");
          ele.classList.add("rpv-selection-mode__grabbing");
          e.preventDefault();
          e.stopPropagation();
          pos.current = {
            left: ele.scrollLeft,
            top: ele.scrollTop,
            x: e.clientX,
            y: e.clientY
          };
          document.addEventListener("mousemove", onMouseMoveHandler);
          document.addEventListener("mouseup", onMouseUpHandler);
        };
        var handlePagesContainer = function(getPagesContainer) {
          pagesRef.current = getPagesContainer();
        };
        var handleSelectionModeChanged = function(mode) {
          setSelectionMode(mode);
        };
        React__namespace.useEffect(function() {
          var ele = pagesRef.current;
          if (!ele) {
            return;
          }
          selectionMode === exports2.SelectionMode.Hand ? ele.classList.add("rpv-selection-mode__grab") : ele.classList.remove("rpv-selection-mode__grab");
          ele.addEventListener("mousedown", onMouseDownHandler);
          return function() {
            ele.removeEventListener("mousedown", onMouseDownHandler);
          };
        }, [selectionMode]);
        React__namespace.useEffect(function() {
          store.subscribe("getPagesContainer", handlePagesContainer);
          store.subscribe("selectionMode", handleSelectionModeChanged);
          return function() {
            store.unsubscribe("getPagesContainer", handlePagesContainer);
            store.unsubscribe("selectionMode", handleSelectionModeChanged);
          };
        }, []);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var selectionModePlugin = function(props) {
        var store = React__namespace.useMemo(function() {
          return core.createStore();
        }, []);
        var SwitchSelectionModeDecorator2 = function(props2) {
          return React__namespace.createElement(SwitchSelectionMode, __assign({}, props2, { store }));
        };
        var SwitchSelectionModeButtonDecorator = function(props2) {
          return React__namespace.createElement(SwitchSelectionModeDecorator2, { mode: props2.mode }, function(p) {
            return React__namespace.createElement(SwitchSelectionModeButton, { isSelected: p.isSelected, mode: p.mode, onClick: function() {
              p.onClick();
            } });
          });
        };
        var SwitchSelectionModeMenuItemDecorator = function(props2) {
          return React__namespace.createElement(SwitchSelectionModeDecorator2, { mode: props2.mode }, function(p) {
            return React__namespace.createElement(SwitchSelectionModeMenuItem, { isSelected: p.isSelected, mode: p.mode, onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var renderViewer = function(props2) {
          var currentSlot = props2.slot;
          if (currentSlot.subSlot && currentSlot.subSlot.children) {
            currentSlot.subSlot.children = React__namespace.createElement(
              React__namespace.Fragment,
              null,
              React__namespace.createElement(Tracker, { store }),
              currentSlot.subSlot.children
            );
          }
          return currentSlot;
        };
        return {
          install: function(pluginFunctions) {
            store.update("selectionMode", props && props.selectionMode ? props.selectionMode : exports2.SelectionMode.Text);
            store.update("getPagesContainer", pluginFunctions.getPagesContainer);
          },
          renderViewer,
          SwitchSelectionMode: SwitchSelectionModeDecorator2,
          SwitchSelectionModeButton: SwitchSelectionModeButtonDecorator,
          SwitchSelectionModeMenuItem: SwitchSelectionModeMenuItemDecorator
        };
      };
      exports2.HandToolIcon = HandToolIcon;
      exports2.TextSelectionIcon = TextSelectionIcon;
      exports2.selectionModePlugin = selectionModePlugin;
    }
  });

  // node_modules/@react-pdf-viewer/selection-mode/lib/index.js
  var require_lib5 = __commonJS({
    "node_modules/@react-pdf-viewer/selection-mode/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_selection_mode();
      }
    }
  });

  // node_modules/@react-pdf-viewer/full-screen/lib/cjs/full-screen.js
  var require_full_screen = __commonJS({
    "node_modules/@react-pdf-viewer/full-screen/lib/cjs/full-screen.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var ExitFullScreenIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M11.5 23.499L11.5 14.499" }),
          React__namespace.createElement("path", { d: "M7.5 18.499L11.5 14.499 15.5 18.499" }),
          React__namespace.createElement("path", { d: "M11.5 1.499L11.5 10.499" }),
          React__namespace.createElement("path", { d: "M7.5 6.499L11.5 10.499 15.5 6.499" }),
          React__namespace.createElement("path", { d: "M20.5 12.499L1.5 12.499" })
        );
      };
      var FullScreenIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M0.5 12L23.5 12" }),
          React__namespace.createElement("path", { d: "M11.5 1L11.5 23" }),
          React__namespace.createElement("path", { d: "M8.5 4L11.5 1 14.5 4" }),
          React__namespace.createElement("path", { d: "M20.5 9L23.5 12 20.5 15" }),
          React__namespace.createElement("path", { d: "M3.5 15L0.5 12 3.5 9" }),
          React__namespace.createElement("path", { d: "M14.5 20L11.5 23 8.5 20" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var TOOLTIP_OFFSET$1 = { left: 0, top: 8 };
      var EnterFullScreenButton = function(_a) {
        var enableShortcuts = _a.enableShortcuts, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.fullScreen ? l10n.fullScreen.enterFullScreen : "Full screen";
        var ariaKeyShortcuts = enableShortcuts ? core.isMac() ? "Meta+Ctrl+F" : "F11" : "";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "full-screen-enter", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaKeyShortcuts, ariaLabel: label, isDisabled: !core.isFullScreenEnabled(), testId: "full-screen__enter-button", onClick },
          React__namespace.createElement(FullScreenIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET$1 });
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var ExitFullScreenButtonWithTooltip = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var exitFullScreenLabel = l10n && l10n.fullScreen ? l10n.fullScreen.exitFullScreen : "Exit full screen";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "full-screen-exit", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaKeyShortcuts: "Esc", ariaLabel: exitFullScreenLabel, testId: "full-screen__exit-button-with-tooltip", onClick },
          React__namespace.createElement(ExitFullScreenIcon, null)
        ), content: function() {
          return exitFullScreenLabel;
        }, offset: TOOLTIP_OFFSET });
      };
      var useEnterFullScreen = function(getFullScreenTarget, store) {
        var _a = React__namespace.useState(store.get("fullScreenMode")), fullScreenMode = _a[0], setFullScreenMode = _a[1];
        var handleFullScreenMode = React__namespace.useCallback(function(fullScreenMode2) {
          setFullScreenMode(fullScreenMode2);
        }, []);
        var enterFullScreen = function() {
          var pagesContainer = store.get("getPagesContainer");
          if (!pagesContainer) {
            return;
          }
          var target = getFullScreenTarget(pagesContainer());
          store.get("enterFullScreenMode")(target);
        };
        var exitFullScreen = function() {
          store.get("exitFullScreenMode")();
        };
        React__namespace.useEffect(function() {
          store.subscribe("fullScreenMode", handleFullScreenMode);
          return function() {
            store.unsubscribe("fullScreenMode", handleFullScreenMode);
          };
        }, []);
        return {
          enterFullScreen,
          exitFullScreen,
          isFullScreen: fullScreenMode === core.FullScreenMode.Entering || fullScreenMode === core.FullScreenMode.EnteredCompletely
        };
      };
      var EnterFullScreen = function(_a) {
        var children = _a.children, enableShortcuts = _a.enableShortcuts, getFullScreenTarget = _a.getFullScreenTarget, store = _a.store;
        var _b = useEnterFullScreen(getFullScreenTarget, store), enterFullScreen = _b.enterFullScreen, exitFullScreen = _b.exitFullScreen, isFullScreen = _b.isFullScreen;
        var defaultChildren = function(props) {
          return isFullScreen ? React__namespace.createElement(ExitFullScreenButtonWithTooltip, { onClick: props.onClick }) : React__namespace.createElement(EnterFullScreenButton, { enableShortcuts, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          onClick: isFullScreen ? exitFullScreen : enterFullScreen
        });
      };
      var EnterFullScreenMenuItem = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.fullScreen ? l10n.fullScreen.enterFullScreen : "Full screen";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(FullScreenIcon, null), isDisabled: !core.isFullScreenEnabled(), testId: "full-screen__enter-menu", onClick }, label);
      };
      var ExitFullScreenButton = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var exitFullScreenLabel = l10n && l10n.fullScreen ? l10n.fullScreen.exitFullScreen : "Exit full screen";
        return React__namespace.createElement(
          "div",
          { className: core.classNames({
            "rpv-full-screen__exit-button": true,
            "rpv-full-screen__exit-button--ltr": !isRtl,
            "rpv-full-screen__exit-button--rtl": isRtl
          }) },
          React__namespace.createElement(
            core.MinimalButton,
            { ariaLabel: exitFullScreenLabel, testId: "full-screen__exit-button", onClick },
            React__namespace.createElement(ExitFullScreenIcon, null)
          )
        );
      };
      var ExitFullScreen = function(_a) {
        var children = _a.children, getFullScreenTarget = _a.getFullScreenTarget, store = _a.store;
        var _b = useEnterFullScreen(getFullScreenTarget, store), enterFullScreen = _b.enterFullScreen, exitFullScreen = _b.exitFullScreen, isFullScreen = _b.isFullScreen;
        var defaultChildren = function(props) {
          return React__namespace.createElement(ExitFullScreenButton, { onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return isFullScreen && render({
          onClick: isFullScreen ? exitFullScreen : enterFullScreen
        });
      };
      var FullScreenModeTracker = function(_a) {
        var store = _a.store, onEnterFullScreen = _a.onEnterFullScreen, onExitFullScreen = _a.onExitFullScreen;
        var _b = React__namespace.useState(store.get("fullScreenMode")), fullScreenMode = _b[0], setFullScreenMode = _b[1];
        var handleFullScreenMode = React__namespace.useCallback(function(fullScreenMode2) {
          setFullScreenMode(fullScreenMode2);
        }, []);
        var handleEnteredFullScreen = function() {
          onEnterFullScreen(store.get("zoom"));
        };
        var handleExitedFullScreen = function() {
          onExitFullScreen(store.get("zoom"));
        };
        React__namespace.useEffect(function() {
          switch (fullScreenMode) {
            case core.FullScreenMode.EnteredCompletely:
              handleEnteredFullScreen();
              break;
            case core.FullScreenMode.Exited:
              handleExitedFullScreen();
              break;
          }
        }, [fullScreenMode]);
        React__namespace.useEffect(function() {
          store.subscribe("fullScreenMode", handleFullScreenMode);
          return function() {
            store.unsubscribe("fullScreenMode", handleFullScreenMode);
          };
        }, []);
        return (fullScreenMode === core.FullScreenMode.Entering || fullScreenMode === core.FullScreenMode.Entered) && React__namespace.createElement(
          "div",
          { className: "rpv-full-screen__overlay" },
          React__namespace.createElement(core.Spinner, null)
        );
      };
      var ShortcutHandler = function(_a) {
        var containerRef = _a.containerRef, getFullScreenTarget = _a.getFullScreenTarget, store = _a.store;
        var enterFullScreen = useEnterFullScreen(getFullScreenTarget, store).enterFullScreen;
        var keydownHandler = function(e) {
          if (e.shiftKey || e.altKey) {
            return;
          }
          var areShortcutsPressed = core.isMac() ? e.metaKey && e.ctrlKey && e.key === "f" : e.key === "F11";
          if (!areShortcutsPressed) {
            return;
          }
          var containerEle = containerRef.current;
          if (!containerEle || !document.activeElement || !containerEle.contains(document.activeElement)) {
            return;
          }
          e.preventDefault();
          enterFullScreen();
        };
        React__namespace.useEffect(function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          document.addEventListener("keydown", keydownHandler);
          return function() {
            document.removeEventListener("keydown", keydownHandler);
          };
        }, [containerRef.current]);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var fullScreenPlugin = function(props) {
        var defaultFullScreenTarget = function(ele) {
          return ele;
        };
        var getFullScreenTarget = (props === null || props === void 0 ? void 0 : props.getFullScreenTarget) || defaultFullScreenTarget;
        var fullScreenPluginProps = React__namespace.useMemo(function() {
          return Object.assign({}, { enableShortcuts: true, onEnterFullScreen: function() {
          }, onExitFullScreen: function() {
          } }, props);
        }, []);
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            enterFullScreenMode: function() {
            },
            exitFullScreenMode: function() {
            },
            fullScreenMode: core.FullScreenMode.Normal,
            zoom: function() {
            }
          });
        }, []);
        var EnterFullScreenDecorator = function(props2) {
          return React__namespace.createElement(EnterFullScreen, __assign({}, props2, { enableShortcuts: fullScreenPluginProps.enableShortcuts, getFullScreenTarget, store }));
        };
        var EnterFullScreenButtonDecorator = function() {
          return React__namespace.createElement(EnterFullScreenDecorator, null, function(renderProps) {
            return React__namespace.createElement(EnterFullScreenButton, __assign({ enableShortcuts: fullScreenPluginProps.enableShortcuts }, renderProps));
          });
        };
        var EnterFullScreenMenuItemDecorator = function(props2) {
          return React__namespace.createElement(EnterFullScreenDecorator, null, function(p) {
            return React__namespace.createElement(EnterFullScreenMenuItem, { onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var ExitFullScreenDecorator = function() {
          return React__namespace.createElement(ExitFullScreen, { getFullScreenTarget, store }, props === null || props === void 0 ? void 0 : props.renderExitFullScreenButton);
        };
        var renderViewer = function(props2) {
          var currentSlot = props2.slot;
          if (currentSlot.subSlot) {
            currentSlot.subSlot.children = React__namespace.createElement(
              React__namespace.Fragment,
              null,
              fullScreenPluginProps.enableShortcuts && React__namespace.createElement(ShortcutHandler, { containerRef: props2.containerRef, getFullScreenTarget, store }),
              React__namespace.createElement(FullScreenModeTracker, { store, onEnterFullScreen: fullScreenPluginProps.onEnterFullScreen, onExitFullScreen: fullScreenPluginProps.onExitFullScreen }),
              React__namespace.createElement(ExitFullScreenDecorator, null),
              currentSlot.subSlot.children
            );
          }
          return currentSlot;
        };
        return {
          install: function(pluginFunctions) {
            store.update("enterFullScreenMode", pluginFunctions.enterFullScreenMode);
            store.update("exitFullScreenMode", pluginFunctions.exitFullScreenMode);
            store.update("getPagesContainer", pluginFunctions.getPagesContainer);
            store.update("zoom", pluginFunctions.zoom);
          },
          onViewerStateChange: function(viewerState) {
            store.update("fullScreenMode", viewerState.fullScreenMode);
            return viewerState;
          },
          renderViewer,
          EnterFullScreen: EnterFullScreenDecorator,
          EnterFullScreenButton: EnterFullScreenButtonDecorator,
          EnterFullScreenMenuItem: EnterFullScreenMenuItemDecorator
        };
      };
      exports2.ExitFullScreenIcon = ExitFullScreenIcon;
      exports2.FullScreenIcon = FullScreenIcon;
      exports2.fullScreenPlugin = fullScreenPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/full-screen/lib/index.js
  var require_lib6 = __commonJS({
    "node_modules/@react-pdf-viewer/full-screen/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_full_screen();
      }
    }
  });

  // node_modules/@react-pdf-viewer/get-file/lib/cjs/get-file.js
  var require_get_file = __commonJS({
    "node_modules/@react-pdf-viewer/get-file/lib/cjs/get-file.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var DownloadIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M5.5,11.5c-.275,0-.341.159-.146.354l6.292,6.293a.5.5,0,0,0,.709,0l6.311-6.275c.2-.193.13-.353-.145-.355L15.5,11.5V1.5a1,1,0,0,0-1-1h-5a1,1,0,0,0-1,1V11a.5.5,0,0,1-.5.5Z" }),
          React__namespace.createElement("path", { d: "M23.5,18.5v4a1,1,0,0,1-1,1H1.5a1,1,0,0,1-1-1v-4" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var DownloadButton = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.download ? l10n.download.download : "Download";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "get-file", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaLabel: label, testId: "get-file__download-button", onClick },
          React__namespace.createElement(DownloadIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var isChromeIOS = function() {
        return /iphone|ipod|ipad/i.test(navigator.userAgent) && /CriOS/i.test(navigator.userAgent);
      };
      var isSafariIOS = function() {
        return /iphone|ipod|ipad/i.test(navigator.userAgent) && !/CriOS/i.test(navigator.userAgent);
      };
      var encodeUint8Array = function(data) {
        return btoa(Array(data.length).fill("").map(function(_, i) {
          return String.fromCharCode(data[i]);
        }).join(""));
      };
      var download = function(url, saveAs) {
        var link = document.createElement("a");
        link.style.display = "none";
        link.href = url;
        link.setAttribute("download", saveAs);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      };
      var downloadBlob = function(data, saveAs, mimeType) {
        var blobUrl = URL.createObjectURL(new Blob([data], { type: mimeType }));
        download(blobUrl, saveAs);
        if (blobUrl) {
          URL.revokeObjectURL(blobUrl);
        }
        return;
      };
      var downloadFile = function(doc, saveAs) {
        doc.getData().then(function(data) {
          isSafariIOS() ? downloadBlob(data, saveAs, "application/octet-stream") : isChromeIOS() ? download("data:application/pdf;base64,".concat(encodeUint8Array(data)), saveAs) : downloadBlob(data, saveAs, "application/pdf");
        });
      };
      var Download = function(_a) {
        var children = _a.children, fileNameGenerator = _a.fileNameGenerator, store = _a.store;
        var _b = React__namespace.useState(store.get("file")), currentFile = _b[0], setCurrentFile = _b[1];
        var _c = React__namespace.useState(store.get("doc")), currentDocument = _c[0], setCurrentDocument = _c[1];
        var handleDocumentChanged = function(doc) {
          setCurrentDocument(doc);
        };
        var handleFileChanged = function(file) {
          setCurrentFile(file);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          store.subscribe("file", handleFileChanged);
          return function() {
            store.subscribe("doc", handleDocumentChanged);
            store.unsubscribe("file", handleFileChanged);
          };
        }, []);
        var download2 = function() {
          if (currentDocument && currentFile) {
            downloadFile(currentDocument, fileNameGenerator(currentFile));
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(DownloadButton, { onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          onClick: download2
        });
      };
      var DownloadMenuItem = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.download ? l10n.download.download : "Download";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(DownloadIcon, null), testId: "get-file__download-menu", onClick }, label);
      };
      var getFileName = function(url) {
        var str = url.split("/").pop();
        return str ? str.split("#")[0].split("?")[0] : url;
      };
      var getFilePlugin = function(props) {
        var store = React__namespace.useMemo(function() {
          return core.createStore({});
        }, []);
        var defaultFileNameGenerator = function(file) {
          return file.name ? getFileName(file.name) : "document.pdf";
        };
        var DownloadDecorator = function(downloadProps) {
          return React__namespace.createElement(Download, __assign({}, downloadProps, { fileNameGenerator: props ? props.fileNameGenerator || defaultFileNameGenerator : defaultFileNameGenerator, store }));
        };
        var DownloadButtonDecorator = function() {
          return React__namespace.createElement(DownloadDecorator, null, function(props2) {
            return React__namespace.createElement(DownloadButton, __assign({}, props2));
          });
        };
        var DownloadMenuItemDecorator = function(props2) {
          return React__namespace.createElement(DownloadDecorator, null, function(p) {
            return React__namespace.createElement(DownloadMenuItem, { onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        return {
          onDocumentLoad: function(props2) {
            store.update("doc", props2.doc);
            store.update("file", props2.file);
          },
          Download: DownloadDecorator,
          DownloadButton: DownloadButtonDecorator,
          DownloadMenuItem: DownloadMenuItemDecorator
        };
      };
      exports2.DownloadIcon = DownloadIcon;
      exports2.getFilePlugin = getFilePlugin;
    }
  });

  // node_modules/@react-pdf-viewer/get-file/lib/index.js
  var require_lib7 = __commonJS({
    "node_modules/@react-pdf-viewer/get-file/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_get_file();
      }
    }
  });

  // node_modules/@react-pdf-viewer/open/lib/cjs/open.js
  var require_open = __commonJS({
    "node_modules/@react-pdf-viewer/open/lib/cjs/open.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var OpenFileIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M18.5,7.5c.275,0,.341-.159.146-.354L12.354.854a.5.5,0,0,0-.708,0L5.354,7.147c-.2.195-.129.354.146.354h3v10a1,1,0,0,0,1,1h5a1,1,0,0,0,1-1V7.5Z" }),
          React__namespace.createElement("path", { d: "M23.5,18.5v4a1,1,0,0,1-1,1H1.5a1,1,0,0,1-1-1v-4" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var useTriggerOpen = function(store) {
        var inputRef = React__namespace.useRef();
        var openFile = function() {
          var inputEle = inputRef.current;
          if (inputEle) {
            inputEle.click();
            if (store.get("triggerOpenFile")) {
              store.update("triggerOpenFile", false);
            }
          }
        };
        var handleOpenFileTriggered = function(trigger) {
          if (trigger) {
            openFile();
          }
        };
        React__namespace.useEffect(function() {
          store.subscribe("triggerOpenFile", handleOpenFileTriggered);
          return function() {
            store.unsubscribe("triggerOpenFile", handleOpenFileTriggered);
          };
        }, []);
        return {
          inputRef,
          openFile
        };
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var OpenButton = function(_a) {
        var enableShortcuts = _a.enableShortcuts, store = _a.store, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.open ? l10n.open.openFile : "Open file";
        var _b = useTriggerOpen(store), inputRef = _b.inputRef, openFile = _b.openFile;
        var ariaKeyShortcuts = enableShortcuts ? core.isMac() ? "Meta+O" : "Ctrl+O" : "";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "open", position: core.Position.BottomCenter, target: React__namespace.createElement(
          "div",
          { className: "rpv-open__input-wrapper" },
          React__namespace.createElement("input", { accept: ".pdf", ref: inputRef, className: "rpv-open__input", multiple: false, tabIndex: -1, title: "", type: "file", onChange: onClick }),
          React__namespace.createElement(
            core.MinimalButton,
            { ariaKeyShortcuts, ariaLabel: label, testId: "open__button", onClick: openFile },
            React__namespace.createElement(OpenFileIcon, null)
          )
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var Open = function(_a) {
        var children = _a.children, enableShortcuts = _a.enableShortcuts, store = _a.store;
        var handleOpenFiles = function(e) {
          var files = e.target.files;
          if (!files || !files.length) {
            return;
          }
          var openFile = store.get("openFile");
          if (openFile) {
            openFile(files[0]);
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(OpenButton, { enableShortcuts, store, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          onClick: handleOpenFiles
        });
      };
      var OpenMenuItem = function(_a) {
        var store = _a.store, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.open ? l10n.open.openFile : "Open file";
        var _b = useTriggerOpen(store), inputRef = _b.inputRef, openFile = _b.openFile;
        return React__namespace.createElement(
          core.MenuItem,
          { icon: React__namespace.createElement(OpenFileIcon, null), testId: "open__menu", onClick: openFile },
          React__namespace.createElement(
            "div",
            { className: "rpv-open__input-wrapper" },
            React__namespace.createElement("input", { accept: ".pdf", ref: inputRef, className: "rpv-open__input", multiple: false, tabIndex: -1, title: "", type: "file", onChange: onClick }),
            label
          )
        );
      };
      var ShortcutHandler = function(_a) {
        var containerRef = _a.containerRef, store = _a.store;
        var keydownHandler = function(e) {
          if (e.shiftKey || e.altKey || e.key !== "o") {
            return;
          }
          var isCommandPressed = core.isMac() ? e.metaKey : e.ctrlKey;
          if (!isCommandPressed) {
            return;
          }
          var containerEle = containerRef.current;
          if (!containerEle || !document.activeElement || !containerEle.contains(document.activeElement)) {
            return;
          }
          e.preventDefault();
          store.update("triggerOpenFile", true);
        };
        React__namespace.useEffect(function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          document.addEventListener("keydown", keydownHandler);
          return function() {
            document.removeEventListener("keydown", keydownHandler);
          };
        }, [containerRef.current]);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var openPlugin = function(props) {
        var openPluginProps = React__namespace.useMemo(function() {
          return Object.assign({}, { enableShortcuts: true }, props);
        }, []);
        var store = React__namespace.useMemo(function() {
          return core.createStore({});
        }, []);
        var OpenDecorator = function(props2) {
          return React__namespace.createElement(Open, __assign({ enableShortcuts: openPluginProps.enableShortcuts }, props2, { store }));
        };
        var OpenButtonDecorator = function() {
          return React__namespace.createElement(OpenDecorator, null);
        };
        var OpenMenuItemDecorator = function() {
          return React__namespace.createElement(OpenDecorator, null, function(p) {
            return React__namespace.createElement(OpenMenuItem, { store, onClick: p.onClick });
          });
        };
        var renderViewer = function(props2) {
          var slot = props2.slot;
          var updateSlot = {
            children: React__namespace.createElement(
              React__namespace.Fragment,
              null,
              openPluginProps.enableShortcuts && React__namespace.createElement(ShortcutHandler, { containerRef: props2.containerRef, store }),
              slot.children
            )
          };
          return __assign(__assign({}, slot), updateSlot);
        };
        return {
          install: function(pluginFunctions) {
            store.update("openFile", pluginFunctions.openFile);
          },
          renderViewer,
          Open: OpenDecorator,
          OpenButton: OpenButtonDecorator,
          OpenMenuItem: OpenMenuItemDecorator
        };
      };
      exports2.OpenFileIcon = OpenFileIcon;
      exports2.openPlugin = openPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/open/lib/index.js
  var require_lib8 = __commonJS({
    "node_modules/@react-pdf-viewer/open/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_open();
      }
    }
  });

  // node_modules/@react-pdf-viewer/page-navigation/lib/cjs/page-navigation.js
  var require_page_navigation = __commonJS({
    "node_modules/@react-pdf-viewer/page-navigation/lib/cjs/page-navigation.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var DownArrowIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M2.32,2.966h19.452c0.552,0.001,1,0.449,0.999,1.001c0,0.182-0.05,0.36-0.144,0.516L12.9,20.552\n            c-0.286,0.472-0.901,0.624-1.373,0.338c-0.138-0.084-0.254-0.2-0.338-0.338L1.465,4.483C1.179,4.01,1.331,3.396,1.804,3.11\n            C1.96,3.016,2.138,2.966,2.32,2.966z" })
        );
      };
      var NextIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M0.541,5.627L11.666,18.2c0.183,0.207,0.499,0.226,0.706,0.043c0.015-0.014,0.03-0.028,0.043-0.043\n            L23.541,5.627" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var useCurrentPage = function(store) {
        var _a = React__namespace.useState(store.get("currentPage") || 0), currentPage = _a[0], setCurrentPage = _a[1];
        var handleCurrentPageChanged = function(currentPageIndex) {
          setCurrentPage(currentPageIndex);
        };
        core.useIsomorphicLayoutEffect(function() {
          store.subscribe("currentPage", handleCurrentPageChanged);
          return function() {
            store.unsubscribe("currentPage", handleCurrentPageChanged);
          };
        }, []);
        return { currentPage };
      };
      var useNumberOfPages = function(store) {
        var _a = React__namespace.useState(store.get("numberOfPages") || 0), numberOfPages = _a[0], setNumberOfPages = _a[1];
        var handleNumberOfPages = function(total) {
          setNumberOfPages(total);
        };
        React__namespace.useEffect(function() {
          store.subscribe("numberOfPages", handleNumberOfPages);
          return function() {
            store.unsubscribe("numberOfPages", handleNumberOfPages);
          };
        }, []);
        return { numberOfPages };
      };
      var CurrentPageInput = function(_a) {
        var store = _a.store;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var _b = React__namespace.useState("1"), editingPage = _b[0], setEditingPage = _b[1];
        var currentPage = useCurrentPage(store).currentPage;
        var numberOfPages = useNumberOfPages(store).numberOfPages;
        React__namespace.useEffect(function() {
          return setEditingPage("".concat(currentPage + 1));
        }, [currentPage]);
        var gotoNextPage = function() {
          var nextPage = currentPage + 1;
          if (nextPage < numberOfPages) {
            setEditingPage("".concat(nextPage + 1));
            jumpTo(nextPage);
          }
        };
        var gotoPreviousPage = function() {
          var previousPage = currentPage - 1;
          if (previousPage >= 0) {
            setEditingPage("".concat(previousPage + 1));
            jumpTo(previousPage);
          }
        };
        var jumpTo = function(page) {
          var jumpToPage = store.get("jumpToPage");
          if (jumpToPage) {
            jumpToPage(page);
          }
        };
        var jump = function() {
          var newPage = parseInt(editingPage, 10);
          editingPage === "" || newPage < 1 || newPage > numberOfPages ? setEditingPage("".concat(currentPage + 1)) : jumpTo(newPage - 1);
        };
        var keydownPage = function(e) {
          switch (e.key) {
            case "ArrowUp":
              gotoPreviousPage();
              break;
            case "ArrowDown":
              gotoNextPage();
              break;
            case "Enter":
              jump();
              break;
          }
        };
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.enterPageNumber : "Enter a page number";
        return React__namespace.createElement(
          "span",
          { className: "rpv-page-navigation__current-page-input" },
          React__namespace.createElement(core.TextBox, { ariaLabel: label, testId: "page-navigation__current-page-input", type: "text", value: editingPage, onChange: setEditingPage, onKeyDown: keydownPage })
        );
      };
      var FetchLabels = function(_a) {
        var children = _a.children, doc = _a.doc;
        var isMounted = core.useIsMounted();
        var _b = React__namespace.useState({
          loading: true,
          labels: []
        }), status = _b[0], setStatus = _b[1];
        React__namespace.useEffect(function() {
          doc.getPageLabels().then(function(result) {
            isMounted.current && setStatus({ loading: false, labels: result || [] });
          });
        }, [doc.loadingTask.docId]);
        return status.loading ? React__namespace.createElement(React__namespace.Fragment, null) : children(status.labels);
      };
      var useDocument = function(store) {
        var _a = React__namespace.useState(store.get("doc")), currentDoc = _a[0], setCurrentDoc = _a[1];
        var handleDocumentChanged = function(doc) {
          setCurrentDoc(doc);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
          };
        }, []);
        return currentDoc;
      };
      var CurrentPageLabel = function(_a) {
        var children = _a.children, store = _a.store;
        var currentDoc = useDocument(store);
        var currentPage = useCurrentPage(store).currentPage;
        var numberOfPages = useNumberOfPages(store).numberOfPages;
        var defaultChildren = function(props) {
          return React__namespace.createElement(React__namespace.Fragment, null, props.currentPage + 1);
        };
        var render = children || defaultChildren;
        return currentDoc ? React__namespace.createElement(FetchLabels, { doc: currentDoc }, function(labels) {
          var pageLabel = labels.length === numberOfPages && numberOfPages > 0 ? labels[currentPage] : "";
          return render({
            currentPage,
            numberOfPages,
            pageLabel
          });
        }) : React__namespace.createElement(React__namespace.Fragment, null);
      };
      var UpArrowIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M21.783,21.034H2.332c-0.552,0-1-0.448-1-1c0-0.182,0.05-0.361,0.144-0.517L11.2,3.448\n            c0.286-0.472,0.901-0.624,1.373-0.338c0.138,0.084,0.254,0.2,0.338,0.338l9.726,16.069c0.286,0.473,0.134,1.087-0.339,1.373\n            C22.143,20.984,21.965,21.034,21.783,21.034z" })
        );
      };
      var TOOLTIP_OFFSET$3 = { left: 0, top: 8 };
      var GoToFirstPageButton = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToFirstPage : "First page";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "page-navigation-first", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaLabel: label, isDisabled, testId: "page-navigation__first-button", onClick },
          React__namespace.createElement(UpArrowIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET$3 });
      };
      var GoToFirstPage = function(_a) {
        var children = _a.children, store = _a.store;
        var currentPage = useCurrentPage(store).currentPage;
        var goToFirstPage = function() {
          var jumpToPage = store.get("jumpToPage");
          if (jumpToPage) {
            jumpToPage(0);
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(GoToFirstPageButton, { isDisabled: props.isDisabled, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          isDisabled: currentPage === 0,
          onClick: goToFirstPage
        });
      };
      var GoToFirstPageMenuItem = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToFirstPage : "First page";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(UpArrowIcon, null), isDisabled, testId: "page-navigation__first-menu", onClick }, label);
      };
      var TOOLTIP_OFFSET$2 = { left: 0, top: 8 };
      var GoToLastPageButton = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToLastPage : "Last page";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "page-navigation-last", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaLabel: label, isDisabled, testId: "page-navigation__last-button", onClick },
          React__namespace.createElement(DownArrowIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET$2 });
      };
      var GoToLastPage = function(_a) {
        var children = _a.children, store = _a.store;
        var currentPage = useCurrentPage(store).currentPage;
        var numberOfPages = useNumberOfPages(store).numberOfPages;
        var goToLastPage = function() {
          var jumpToPage = store.get("jumpToPage");
          if (jumpToPage) {
            jumpToPage(numberOfPages - 1);
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(GoToLastPageButton, { isDisabled: props.isDisabled, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          isDisabled: currentPage + 1 >= numberOfPages,
          onClick: goToLastPage
        });
      };
      var GoToLastPageMenuItem = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToLastPage : "Last page";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(DownArrowIcon, null), isDisabled, testId: "page-navigation__last-menu", onClick }, label);
      };
      var TOOLTIP_OFFSET$1 = { left: 0, top: 8 };
      var GoToNextPageButton = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToNextPage : "Next page";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "page-navigation-next", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaLabel: label, isDisabled, testId: "page-navigation__next-button", onClick },
          React__namespace.createElement(NextIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET$1 });
      };
      var GoToNextPage = function(_a) {
        var children = _a.children, store = _a.store;
        var currentPage = useCurrentPage(store).currentPage;
        var numberOfPages = useNumberOfPages(store).numberOfPages;
        var goToNextPage = function() {
          var jumpToNextPage = store.get("jumpToNextPage");
          if (jumpToNextPage) {
            jumpToNextPage();
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(GoToNextPageButton, { onClick: props.onClick, isDisabled: props.isDisabled });
        };
        var render = children || defaultChildren;
        return render({
          isDisabled: currentPage + 1 >= numberOfPages,
          onClick: goToNextPage
        });
      };
      var GoToNextPageMenuItem = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToNextPage : "Next page";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(NextIcon, null), isDisabled, testId: "page-navigation__next-menu", onClick }, label);
      };
      var PreviousIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M23.535,18.373L12.409,5.8c-0.183-0.207-0.499-0.226-0.706-0.043C11.688,5.77,11.674,5.785,11.66,5.8\n            L0.535,18.373" })
        );
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var GoToPreviousPageButton = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToPreviousPage : "Previous page";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "page-navigation-previous", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaLabel: label, isDisabled, testId: "page-navigation__previous-button", onClick },
          React__namespace.createElement(PreviousIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var GoToPreviousPage = function(_a) {
        var store = _a.store, children = _a.children;
        var currentPage = useCurrentPage(store).currentPage;
        var goToPreviousPage = function() {
          var jumpToPreviousPage = store.get("jumpToPreviousPage");
          if (jumpToPreviousPage) {
            jumpToPreviousPage();
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(GoToPreviousPageButton, { isDisabled: props.isDisabled, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          isDisabled: currentPage <= 0,
          onClick: goToPreviousPage
        });
      };
      var GoToPreviousPageMenuItem = function(_a) {
        var isDisabled = _a.isDisabled, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.pageNavigation ? l10n.pageNavigation.goToPreviousPage : "Previous page";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(PreviousIcon, null), isDisabled, testId: "page-navigation__previous-menu", onClick }, label);
      };
      var NumberOfPages = function(_a) {
        var children = _a.children, store = _a.store;
        var numberOfPages = useNumberOfPages(store).numberOfPages;
        return children ? children({ numberOfPages }) : React__namespace.createElement(React__namespace.Fragment, null, numberOfPages);
      };
      var ShortcutHandler = function(_a) {
        var containerRef = _a.containerRef, numPages = _a.numPages, store = _a.store;
        var currentPage = useCurrentPage(store).currentPage;
        var currentPageRef = React__namespace.useRef(currentPage);
        currentPageRef.current = currentPage;
        var isMouseInsideRef = React__namespace.useRef(false);
        var handleMouseEnter = function() {
          isMouseInsideRef.current = true;
        };
        var handleMouseLeave = function() {
          isMouseInsideRef.current = false;
        };
        var goToNextPage = function() {
          var jumpToPage = store.get("jumpToPage");
          var targetPage = currentPageRef.current + 1;
          if (jumpToPage && targetPage < numPages) {
            jumpToPage(targetPage);
          }
        };
        var goToPreviousPage = function() {
          var jumpToPage = store.get("jumpToPage");
          var targetPage = currentPageRef.current - 1;
          if (jumpToPage && targetPage >= 0) {
            jumpToPage(targetPage);
          }
        };
        var jumpToNextDestination = function() {
          var jumpToNextDestination2 = store.get("jumpToNextDestination");
          if (jumpToNextDestination2) {
            jumpToNextDestination2();
          }
        };
        var jumpToPreviousDestination = function() {
          var jumpToPreviousDestination2 = store.get("jumpToPreviousDestination");
          if (jumpToPreviousDestination2) {
            jumpToPreviousDestination2();
          }
        };
        var handleKeydown = function(e) {
          var containerEle = containerRef.current;
          var shouldHandleShortcuts = isMouseInsideRef.current || document.activeElement && containerEle.contains(document.activeElement);
          if (!containerEle || !shouldHandleShortcuts) {
            return;
          }
          var shouldGoToNextPage = e.altKey && e.key === "ArrowDown" || !e.shiftKey && !e.altKey && e.key === "PageDown";
          var shouldGoToPreviousPage = e.altKey && e.key === "ArrowUp" || !e.shiftKey && !e.altKey && e.key === "PageUp";
          if (shouldGoToNextPage) {
            e.preventDefault();
            goToNextPage();
            return;
          }
          if (shouldGoToPreviousPage) {
            e.preventDefault();
            goToPreviousPage();
            return;
          }
          var isCommandPressed = core.isMac() ? e.metaKey && !e.ctrlKey : e.altKey;
          if (isCommandPressed) {
            switch (e.key) {
              case "ArrowLeft":
                e.preventDefault();
                jumpToPreviousDestination();
                break;
              case "ArrowRight":
                e.preventDefault();
                jumpToNextDestination();
                break;
            }
          }
        };
        React__namespace.useEffect(function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          document.addEventListener("keydown", handleKeydown);
          containerEle.addEventListener("mouseenter", handleMouseEnter);
          containerEle.addEventListener("mouseleave", handleMouseLeave);
          return function() {
            document.removeEventListener("keydown", handleKeydown);
            containerEle.removeEventListener("mouseenter", handleMouseEnter);
            containerEle.removeEventListener("mouseleave", handleMouseLeave);
          };
        }, [containerRef.current]);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var pageNavigationPlugin = function(props) {
        var pageNavigationPluginProps = React__namespace.useMemo(function() {
          return Object.assign({}, { enableShortcuts: true }, props);
        }, []);
        var store = React__namespace.useMemo(function() {
          return core.createStore();
        }, []);
        var CurrentPageInputDecorator = function() {
          return React__namespace.createElement(CurrentPageInput, { store });
        };
        var CurrentPageLabelDecorator = function(props2) {
          return React__namespace.createElement(CurrentPageLabel, __assign({}, props2, { store }));
        };
        var GoToFirstPageDecorator = function(props2) {
          return React__namespace.createElement(GoToFirstPage, __assign({}, props2, { store }));
        };
        var GoToFirstPageButtonDecorator = function() {
          return React__namespace.createElement(GoToFirstPageDecorator, null, function(props2) {
            return React__namespace.createElement(GoToFirstPageButton, __assign({}, props2));
          });
        };
        var GoToFirstPageMenuItemDecorator = function(props2) {
          return React__namespace.createElement(GoToFirstPageDecorator, null, function(p) {
            return React__namespace.createElement(GoToFirstPageMenuItem, { isDisabled: p.isDisabled, onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var GoToLastPageDecorator = function(props2) {
          return React__namespace.createElement(GoToLastPage, __assign({}, props2, { store }));
        };
        var GoToLastPageButtonDecorator = function() {
          return React__namespace.createElement(GoToLastPageDecorator, null, function(props2) {
            return React__namespace.createElement(GoToLastPageButton, __assign({}, props2));
          });
        };
        var GoToLastPageMenuItemDecorator = function(props2) {
          return React__namespace.createElement(GoToLastPageDecorator, null, function(p) {
            return React__namespace.createElement(GoToLastPageMenuItem, { isDisabled: p.isDisabled, onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var GoToNextPageDecorator = function(props2) {
          return React__namespace.createElement(GoToNextPage, __assign({}, props2, { store }));
        };
        var GoToNextPageButtonDecorator = function() {
          return React__namespace.createElement(GoToNextPageDecorator, null, function(props2) {
            return React__namespace.createElement(GoToNextPageButton, __assign({}, props2));
          });
        };
        var GoToNextPageMenuItemDecorator = function(props2) {
          return React__namespace.createElement(GoToNextPageDecorator, null, function(p) {
            return React__namespace.createElement(GoToNextPageMenuItem, { isDisabled: p.isDisabled, onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var GoToPreviousPageDecorator = function(props2) {
          return React__namespace.createElement(GoToPreviousPage, __assign({}, props2, { store }));
        };
        var GoToPreviousPageButtonDecorator = function() {
          return React__namespace.createElement(GoToPreviousPageDecorator, null, function(props2) {
            return React__namespace.createElement(GoToPreviousPageButton, __assign({}, props2));
          });
        };
        var GoToPreviousPageMenuItemDecorator = function(props2) {
          return React__namespace.createElement(GoToPreviousPageDecorator, null, function(p) {
            return React__namespace.createElement(GoToPreviousPageMenuItem, { isDisabled: p.isDisabled, onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var NumberOfPagesDecorator = function(props2) {
          return React__namespace.createElement(NumberOfPages, __assign({}, props2, { store }));
        };
        var renderViewer = function(props2) {
          var slot = props2.slot;
          if (!pageNavigationPluginProps.enableShortcuts) {
            return slot;
          }
          var updateSlot = {
            children: React__namespace.createElement(
              React__namespace.Fragment,
              null,
              React__namespace.createElement(ShortcutHandler, { containerRef: props2.containerRef, numPages: props2.doc.numPages, store }),
              slot.children
            )
          };
          return __assign(__assign({}, slot), updateSlot);
        };
        return {
          install: function(pluginFunctions) {
            store.update("jumpToDestination", pluginFunctions.jumpToDestination);
            store.update("jumpToNextDestination", pluginFunctions.jumpToNextDestination);
            store.update("jumpToNextPage", pluginFunctions.jumpToNextPage);
            store.update("jumpToPage", pluginFunctions.jumpToPage);
            store.update("jumpToPreviousDestination", pluginFunctions.jumpToPreviousDestination);
            store.update("jumpToPreviousPage", pluginFunctions.jumpToPreviousPage);
          },
          renderViewer,
          onDocumentLoad: function(props2) {
            store.update("doc", props2.doc);
            store.update("numberOfPages", props2.doc.numPages);
          },
          onViewerStateChange: function(viewerState) {
            store.update("currentPage", viewerState.pageIndex);
            return viewerState;
          },
          jumpToNextPage: function() {
            var jump = store.get("jumpToNextPage");
            if (jump) {
              jump();
            }
          },
          jumpToPage: function(pageIndex) {
            var jumpTo = store.get("jumpToPage");
            if (jumpTo) {
              jumpTo(pageIndex);
            }
          },
          jumpToPreviousPage: function() {
            var jump = store.get("jumpToPreviousPage");
            if (jump) {
              jump();
            }
          },
          CurrentPageInput: CurrentPageInputDecorator,
          CurrentPageLabel: CurrentPageLabelDecorator,
          GoToFirstPage: GoToFirstPageDecorator,
          GoToFirstPageButton: GoToFirstPageButtonDecorator,
          GoToFirstPageMenuItem: GoToFirstPageMenuItemDecorator,
          GoToLastPage: GoToLastPageDecorator,
          GoToLastPageButton: GoToLastPageButtonDecorator,
          GoToLastPageMenuItem: GoToLastPageMenuItemDecorator,
          GoToNextPage: GoToNextPageDecorator,
          GoToNextPageButton: GoToNextPageButtonDecorator,
          GoToNextPageMenuItem: GoToNextPageMenuItemDecorator,
          GoToPreviousPage: GoToPreviousPageDecorator,
          GoToPreviousPageButton: GoToPreviousPageButtonDecorator,
          GoToPreviousPageMenuItem: GoToPreviousPageMenuItemDecorator,
          NumberOfPages: NumberOfPagesDecorator
        };
      };
      exports2.DownArrowIcon = DownArrowIcon;
      exports2.NextIcon = NextIcon;
      exports2.PreviousIcon = PreviousIcon;
      exports2.UpArrowIcon = UpArrowIcon;
      exports2.pageNavigationPlugin = pageNavigationPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/page-navigation/lib/index.js
  var require_lib9 = __commonJS({
    "node_modules/@react-pdf-viewer/page-navigation/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_page_navigation();
      }
    }
  });

  // node_modules/@react-pdf-viewer/print/lib/cjs/print.js
  var require_print = __commonJS({
    "node_modules/@react-pdf-viewer/print/lib/cjs/print.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      var reactDom = require_react_dom();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var getAllPagesNumbers = function(doc) {
        return Array(doc.numPages).fill(0).map(function(_, i) {
          return i;
        });
      };
      var generateRange = function(min, max) {
        return Array(max - min + 1).fill(0).map(function(_, i) {
          return min + i;
        });
      };
      var removeDuplicate = function(arr) {
        return arr.filter(function(i) {
          return arr.indexOf(i) === arr.lastIndexOf(i);
        });
      };
      var getCustomPagesNumbers = function(customPages) {
        return function(doc) {
          var results = [];
          customPages.replace(/\s+/g, "").split(",").forEach(function(part) {
            var range = part.split("-").map(function(c) {
              return parseInt(c, 10);
            }).filter(function(c) {
              return Number.isInteger(c);
            });
            if (range.length === 1) {
              results.push(range[0] - 1);
            } else if (range.length === 2) {
              results.push.apply(results, generateRange(range[0] - 1, range[1] - 1));
            }
          });
          return removeDuplicate(results).filter(function(i) {
            return i >= 0 && i < doc.numPages;
          });
        };
      };
      var getEvenPagesNumbers = function(doc) {
        return Array(doc.numPages).fill(0).map(function(_, i) {
          return i;
        }).filter(function(i) {
          return (i + 1) % 2 === 0;
        });
      };
      var getOddPagesNumbers = function(doc) {
        return Array(doc.numPages).fill(0).map(function(_, i) {
          return i;
        }).filter(function(i) {
          return (i + 1) % 2 === 1;
        });
      };
      var PrintIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M7.5,19.499h9 M7.5,16.499h9 M5.5,16.5h-3c-1.103-0.003-1.997-0.897-2-2v-6c0.003-1.103,0.897-1.997,2-2h19\n            c1.103,0.003,1.997,0.897,2,2v6c-0.003,1.103-0.897,1.997-2,2h-3\n            M5.5,4.5v-4h9.586c0.265,0,0.52,0.105,0.707,0.293l2.414,2.414\n            C18.395,3.394,18.5,3.649,18.5,3.914V4.5\n            M18.5,22.5c0,0.552-0.448,1-1,1h-11c-0.552,0-1-0.448-1-1v-9h13V22.5z\n            M3.5,8.499\n            c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S2.948,8.499,3.5,8.499z\n            M14.5,0.499v4h4" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var PrintButton = function(_a) {
        var enableShortcuts = _a.enableShortcuts, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.print ? l10n.print.print : "Print";
        var ariaKeyShortcuts = enableShortcuts ? core.isMac() ? "Meta+P" : "Ctrl+P" : "";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "print", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaKeyShortcuts, ariaLabel: label, testId: "print__button", onClick },
          React__namespace.createElement(PrintIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var PrintStatus;
      (function(PrintStatus2) {
        PrintStatus2["CheckingPermission"] = "CheckingPermission";
        PrintStatus2["Inactive"] = "Inactive";
        PrintStatus2["Preparing"] = "Preparing";
        PrintStatus2["Cancelled"] = "Cancelled";
        PrintStatus2["Ready"] = "Ready";
      })(PrintStatus || (PrintStatus = {}));
      var Print = function(_a) {
        var children = _a.children, enableShortcuts = _a.enableShortcuts, store = _a.store;
        var print = function() {
          store.update("printStatus", PrintStatus.CheckingPermission);
        };
        var render = children || PrintButton;
        return render({
          enableShortcuts,
          onClick: print
        });
      };
      var PERMISSION_PRINT = 4;
      var PERMISSION_PRINT_HIGHT_QUALITY = 2048;
      var CheckPrintPermission = function(_a) {
        var doc = _a.doc, store = _a.store;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var _b = React__namespace.useState(true), isAllowed = _b[0], setIsAllowed = _b[1];
        React__namespace.useEffect(function() {
          doc.getPermissions().then(function(permissions) {
            var canPrint = permissions === null || permissions.includes(PERMISSION_PRINT) || permissions.includes(PERMISSION_PRINT_HIGHT_QUALITY);
            canPrint ? store.update("printStatus", PrintStatus.Preparing) : setIsAllowed(false);
          });
        }, []);
        return isAllowed ? React__namespace.createElement(React__namespace.Fragment, null) : React__namespace.createElement(core.Modal, { ariaControlsSuffix: "print-permission", closeOnClickOutside: false, closeOnEscape: false, content: function(toggle) {
          var close = function() {
            toggle();
            store.update("printStatus", PrintStatus.Cancelled);
          };
          return React__namespace.createElement(
            React__namespace.Fragment,
            null,
            React__namespace.createElement("div", { className: "rpv-print__permission-body" }, l10n && l10n.print ? l10n.print.disallowPrint : "The document does not allow to print"),
            React__namespace.createElement(
              "div",
              { className: "rpv-print__permission-footer" },
              React__namespace.createElement(core.Button, { onClick: close }, l10n && l10n.print ? l10n.print.close : "Close")
            )
          );
        }, isOpened: true });
      };
      var PrintProgress = function(_a) {
        var numLoadedPages = _a.numLoadedPages, numPages = _a.numPages, onCancel = _a.onCancel;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var progress = Math.floor(numLoadedPages * 100 / numPages);
        return React__namespace.createElement(
          "div",
          { className: "rpv-print__progress" },
          React__namespace.createElement(
            "div",
            { className: core.classNames({
              "rpv-print__progress-body": true,
              "rpv-print__progress-body--rtl": isRtl
            }) },
            React__namespace.createElement("div", { className: "rpv-print__progress-message" }, l10n && l10n.print ? l10n.print.preparingDocument : "Preparing document ..."),
            React__namespace.createElement(
              "div",
              { className: "rpv-print__progress-bar" },
              React__namespace.createElement(core.ProgressBar, { progress })
            ),
            React__namespace.createElement(core.Button, { onClick: onCancel }, l10n && l10n.print ? l10n.print.cancel : "Cancel")
          )
        );
      };
      var isRunningInJest = function() {
        return typeof process !== "undefined" && process.env.JEST_WORKER_ID !== void 0;
      };
      var PageThumbnail = function(_a) {
        var canvas = _a.canvas, page = _a.page, pageHeight = _a.pageHeight, pageIndex = _a.pageIndex, pageWidth = _a.pageWidth, rotation = _a.rotation, onLoad = _a.onLoad;
        var isMounted = core.useIsMounted();
        var renderTask = React__namespace.useRef();
        var _b = React__namespace.useState(""), src = _b[0], setSrc = _b[1];
        var testWithJest = React__namespace.useMemo(function() {
          return isRunningInJest();
        }, []);
        var handleImageLoad = function() {
          if (!testWithJest) {
            onLoad();
          }
        };
        React__namespace.useEffect(function() {
          var task = renderTask.current;
          if (task) {
            task.cancel();
          }
          var printUnit = 150 / 72;
          canvas.height = Math.floor(pageHeight * printUnit);
          canvas.width = Math.floor(pageWidth * printUnit);
          var canvasContext = canvas.getContext("2d");
          canvasContext.save();
          canvasContext.fillStyle = "rgb(255, 255, 255)";
          canvasContext.fillRect(0, 0, canvas.width, canvas.height);
          canvasContext.restore();
          var viewport = page.getViewport({ rotation, scale: 1 });
          renderTask.current = page.render({
            canvasContext,
            intent: "print",
            transform: [printUnit, 0, 0, printUnit, 0, 0],
            viewport
          });
          renderTask.current.promise.then(function() {
            if ("toBlob" in canvas && "createObjectURL" in URL) {
              canvas.toBlob(function(blob) {
                isMounted.current && setSrc(URL.createObjectURL(blob));
                testWithJest && onLoad();
              });
            } else {
              isMounted.current && setSrc(canvas.toDataURL());
              testWithJest && onLoad();
            }
          }, function() {
          });
        }, []);
        return src && React__namespace.createElement(
          "div",
          { className: "rpv-print__page" },
          React__namespace.createElement("img", { "data-testid": "print__thumbnail-".concat(pageIndex), src, onLoad: handleImageLoad })
        );
      };
      var PageThumbnailContainer = function(_a) {
        var canvas = _a.canvas, doc = _a.doc, pageIndex = _a.pageIndex, pageRotation = _a.pageRotation, pageSize = _a.pageSize, rotation = _a.rotation, shouldRender = _a.shouldRender, onLoad = _a.onLoad;
        var isMounted = core.useIsMounted();
        var _b = React__namespace.useState(null), page = _b[0], setPage = _b[1];
        var isVertical = Math.abs(rotation + pageRotation) % 180 === 0;
        React__namespace.useEffect(function() {
          if (shouldRender) {
            core.getPage(doc, pageIndex).then(function(pdfPage) {
              isMounted.current && setPage(pdfPage);
            });
          }
        }, [shouldRender]);
        var rotationNumber = (pageSize.rotation + rotation + pageRotation) % 360;
        return page && React__namespace.createElement(PageThumbnail, { canvas, page, pageHeight: isVertical ? pageSize.pageHeight : pageSize.pageWidth, pageIndex, pageWidth: isVertical ? pageSize.pageWidth : pageSize.pageHeight, rotation: rotationNumber, onLoad });
      };
      var PrintZone = function(_a) {
        var doc = _a.doc, numLoadedPages = _a.numLoadedPages, pagesRotation = _a.pagesRotation, pageSizes = _a.pageSizes, printPages = _a.printPages, printStatus = _a.printStatus, rotation = _a.rotation, onCancel = _a.onCancel, onLoad = _a.onLoad;
        var canvas = React__namespace.useMemo(function() {
          return document.createElement("canvas");
        }, []);
        var container = React__namespace.useMemo(function() {
          var zoneEle = document.querySelector(".rpv-print__zone");
          if (zoneEle) {
            return zoneEle;
          }
          var div = document.createElement("div");
          div.classList.add("rpv-print__zone");
          div.setAttribute("data-testid", "print__zone");
          document.body.appendChild(div);
          return div;
        }, []);
        React__namespace.useEffect(function() {
          if (printStatus === PrintStatus.Ready) {
            document.documentElement.classList.add("rpv-print__html-printing");
            document.body.classList.add("rpv-print__body-printing");
            window.print();
          }
          var handler = function() {
            if (printStatus === PrintStatus.Ready) {
              document.documentElement.classList.remove("rpv-print__html-printing");
              document.body.classList.remove("rpv-print__body-printing");
              var zones = document.querySelectorAll(".rpv-print__zone");
              if (zones) {
                zones.forEach(function(zoneEle) {
                  zoneEle.parentElement.removeChild(zoneEle);
                });
              }
              canvas.height = 0;
              canvas.width = 0;
              document.removeEventListener("mousemove", handler);
              onCancel();
            }
          };
          document.addEventListener("mousemove", handler);
          return function() {
            return document.removeEventListener("mousemove", handler);
          };
        }, [printStatus]);
        var pageHeight = pageSizes[0].pageHeight;
        var pageWidth = pageSizes[0].pageWidth;
        return reactDom.createPortal(React__namespace.createElement(
          React__namespace.Fragment,
          null,
          printPages.map(function(pageIndex, loopIndex) {
            return React__namespace.createElement(PageThumbnailContainer, { key: pageIndex, canvas, doc, pageIndex, pageRotation: pagesRotation.has(pageIndex) ? pagesRotation.get(pageIndex) : 0, pageSize: pageSizes[pageIndex], rotation, shouldRender: loopIndex === numLoadedPages, onLoad });
          }),
          React__namespace.createElement("style", { dangerouslySetInnerHTML: {
            __html: "@page { size: ".concat(pageWidth, "pt ").concat(pageHeight, "pt }")
          } })
        ), container);
      };
      var PrintContainer = function(_a) {
        var doc = _a.doc, pagesRotation = _a.pagesRotation, pageSizes = _a.pageSizes, renderProgressBar = _a.renderProgressBar, rotation = _a.rotation, setPages = _a.setPages, store = _a.store;
        var _b = React__namespace.useState(PrintStatus.Inactive), printStatus = _b[0], setPrintStatus = _b[1];
        var _c = React__namespace.useState(0), numLoadedPagesForPrint = _c[0], setNumLoadedPagesForPrint = _c[1];
        var printPages = React__namespace.useMemo(function() {
          var numPages = doc.numPages;
          return setPages(doc).filter(function(index) {
            return index >= 0 && index < numPages;
          });
        }, [doc, setPages]);
        var numPrintPages = printPages.length;
        var cancelPrinting = function() {
          setNumLoadedPagesForPrint(0);
          setPrintStatus(PrintStatus.Inactive);
        };
        var handlePrintStatus = function(status) {
          return setPrintStatus(status);
        };
        var onLoadPage = function() {
          var total = numLoadedPagesForPrint + 1;
          if (total <= numPrintPages) {
            setNumLoadedPagesForPrint(total);
            total === numPrintPages && setPrintStatus(PrintStatus.Ready);
          }
        };
        React__namespace.useEffect(function() {
          store.subscribe("printStatus", handlePrintStatus);
          return function() {
            store.unsubscribe("printStatus", handlePrintStatus);
          };
        }, []);
        return React__namespace.createElement(
          React__namespace.Fragment,
          null,
          printStatus === PrintStatus.CheckingPermission && React__namespace.createElement(CheckPrintPermission, { doc, store }),
          printStatus === PrintStatus.Preparing && (renderProgressBar ? renderProgressBar(numLoadedPagesForPrint, numPrintPages, cancelPrinting) : React__namespace.createElement(PrintProgress, { numLoadedPages: numLoadedPagesForPrint, numPages: numPrintPages, onCancel: cancelPrinting })),
          (printStatus === PrintStatus.Preparing || printStatus === PrintStatus.Ready) && numLoadedPagesForPrint <= numPrintPages && React__namespace.createElement(PrintZone, { doc, numLoadedPages: numLoadedPagesForPrint, pagesRotation, pageSizes, printPages, printStatus, rotation, onCancel: cancelPrinting, onLoad: onLoadPage })
        );
      };
      var PrintMenuItem = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.print ? l10n.print.print : "Print";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(PrintIcon, null), testId: "print__menu", onClick }, label);
      };
      var ShortcutHandler = function(_a) {
        var containerRef = _a.containerRef, store = _a.store;
        var keydownHandler = function(e) {
          if (e.shiftKey || e.altKey || e.key !== "p") {
            return;
          }
          var isCommandPressed = core.isMac() ? e.metaKey : e.ctrlKey;
          if (!isCommandPressed) {
            return;
          }
          var containerEle = containerRef.current;
          if (!containerEle || !document.activeElement || !containerEle.contains(document.activeElement)) {
            return;
          }
          e.preventDefault();
          store.update("printStatus", PrintStatus.Preparing);
        };
        React__namespace.useEffect(function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          document.addEventListener("keydown", keydownHandler);
          return function() {
            document.removeEventListener("keydown", keydownHandler);
          };
        }, [containerRef.current]);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var printPlugin = function(props) {
        var printPluginProps = React__namespace.useMemo(function() {
          return Object.assign({}, {
            enableShortcuts: true,
            setPages: function(doc) {
              return Array(doc.numPages).fill(0).map(function(_, i) {
                return i;
              });
            }
          }, props);
        }, []);
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            printStatus: PrintStatus.Inactive
          });
        }, []);
        var print = function() {
          store.update("printStatus", PrintStatus.CheckingPermission);
        };
        var PrintDecorator = function(props2) {
          return React__namespace.createElement(Print, __assign({ enableShortcuts: printPluginProps.enableShortcuts }, props2, { store }));
        };
        var PrintButtonDecorator = function() {
          return React__namespace.createElement(PrintDecorator, null, function(props2) {
            return React__namespace.createElement(PrintButton, __assign({}, props2));
          });
        };
        var PrintMenuItemDecorator = function(props2) {
          return React__namespace.createElement(PrintDecorator, null, function(p) {
            return React__namespace.createElement(PrintMenuItem, { onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var renderViewer = function(renderViewerProps) {
          var slot = renderViewerProps.slot;
          var updateSlot = {
            children: React__namespace.createElement(
              React__namespace.Fragment,
              null,
              printPluginProps.enableShortcuts && React__namespace.createElement(ShortcutHandler, { containerRef: renderViewerProps.containerRef, store }),
              React__namespace.createElement(PrintContainer, { doc: renderViewerProps.doc, pagesRotation: renderViewerProps.pagesRotation, pageSizes: renderViewerProps.pageSizes, renderProgressBar: props === null || props === void 0 ? void 0 : props.renderProgressBar, rotation: renderViewerProps.rotation, setPages: printPluginProps.setPages, store }),
              slot.children
            )
          };
          return __assign(__assign({}, slot), updateSlot);
        };
        var setPages = function(printPages) {
          printPluginProps.setPages = printPages;
        };
        return {
          print,
          renderViewer,
          Print: PrintDecorator,
          PrintButton: PrintButtonDecorator,
          PrintMenuItem: PrintMenuItemDecorator,
          setPages
        };
      };
      exports2.PrintIcon = PrintIcon;
      exports2.getAllPagesNumbers = getAllPagesNumbers;
      exports2.getCustomPagesNumbers = getCustomPagesNumbers;
      exports2.getEvenPagesNumbers = getEvenPagesNumbers;
      exports2.getOddPagesNumbers = getOddPagesNumbers;
      exports2.printPlugin = printPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/print/lib/index.js
  var require_lib10 = __commonJS({
    "node_modules/@react-pdf-viewer/print/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_print();
      }
    }
  });

  // node_modules/@react-pdf-viewer/properties/lib/cjs/properties.js
  var require_properties = __commonJS({
    "node_modules/@react-pdf-viewer/properties/lib/cjs/properties.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var InfoIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M12,1.001c6.075,0,11,4.925,11,11s-4.925,11-11,11s-11-4.925-11-11S5.925,1.001,12,1.001z\n            M14.5,17.005H13\n            c-0.552,0-1-0.448-1-1v-6.5c0-0.276-0.224-0.5-0.5-0.5H10\n            M11.745,6.504L11.745,6.504\n            M11.745,6.5c-0.138,0-0.25,0.112-0.25,0.25\n            S11.607,7,11.745,7s0.25-0.112,0.25-0.25S11.883,6.5,11.745,6.5" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var PropertiesLoader = function(_a) {
        var doc = _a.doc, render = _a.render;
        var _b = React__namespace.useState(), data = _b[0], setData = _b[1];
        React__namespace.useEffect(function() {
          doc.getMetadata().then(function(meta) {
            return Promise.resolve(meta);
          }).then(function(meta) {
            return doc.getDownloadInfo().then(function(d) {
              return Promise.resolve({
                fileName: meta.contentDispositionFilename || "",
                info: meta.info,
                length: d.length
              });
            });
          }).then(function(response) {
            setData(response);
          });
        }, []);
        return data ? render(data) : React__namespace.createElement(
          "div",
          { className: "rpv-properties__loader" },
          React__namespace.createElement(core.Spinner, null)
        );
      };
      var PropertyItem = function(_a) {
        var label = _a.label, value = _a.value;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        return React__namespace.createElement(
          "dl",
          { className: core.classNames({
            "rpv-properties__item": true,
            "rpv-properties__item--rtl": isRtl
          }) },
          React__namespace.createElement(
            "dt",
            { className: "rpv-properties__item-label" },
            label,
            ":"
          ),
          React__namespace.createElement("dd", { className: "rpv-properties__item-value" }, value || "-")
        );
      };
      var dateRegex = new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
      var parse = function(value, min, max, defaultValue) {
        var parsed = parseInt(value, 10);
        return parsed >= min && parsed <= max ? parsed : defaultValue;
      };
      var convertDate = function(input) {
        var matches = dateRegex.exec(input);
        if (!matches) {
          return null;
        }
        var year = parseInt(matches[1], 10);
        var month = parse(matches[2], 1, 12, 1) - 1;
        var day = parse(matches[3], 1, 31, 1);
        var hour = parse(matches[4], 0, 23, 0);
        var minute = parse(matches[5], 0, 59, 0);
        var second = parse(matches[6], 0, 59, 0);
        var universalTimeRelation = matches[7] || "Z";
        var offsetHour = parse(matches[8], 0, 23, 0);
        var offsetMinute = parse(matches[9], 0, 59, 0);
        switch (universalTimeRelation) {
          case "-":
            hour += offsetHour;
            minute += offsetMinute;
            break;
          case "+":
            hour -= offsetHour;
            minute -= offsetMinute;
            break;
        }
        return new Date(Date.UTC(year, month, day, hour, minute, second));
      };
      var getFileName = function(url) {
        var str = url.split("/").pop();
        return str ? str.split("#")[0].split("?")[0] : url;
      };
      var getFileSize = function(bytes) {
        var sufixes = ["B", "kB", "MB", "GB", "TB"];
        var i = Math.floor(Math.log(bytes) / Math.log(1024));
        return "".concat((bytes / Math.pow(1024, i)).toFixed(2), " ").concat(sufixes[i]);
      };
      var PropertiesModal = function(_a) {
        var doc = _a.doc, fileName = _a.fileName, onToggle = _a.onToggle;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var formatDate = function(input) {
          var date = convertDate(input);
          return date ? "".concat(date.toLocaleDateString(), ", ").concat(date.toLocaleTimeString()) : "";
        };
        var renderData = function(data) {
          return React__namespace.createElement(
            React__namespace.Fragment,
            null,
            React__namespace.createElement(
              "div",
              { className: "rpv-properties__modal-section" },
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.fileName : "File name", value: data.fileName || getFileName(fileName) }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.fileSize : "File size", value: getFileSize(data.length) })
            ),
            React__namespace.createElement(core.Separator, null),
            React__namespace.createElement(
              "div",
              { className: "rpv-properties__modal-section" },
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.title : "Title", value: data.info.Title }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.author : "Author", value: data.info.Author }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.subject : "Subject", value: data.info.Subject }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.keywords : "Keywords", value: data.info.Keywords }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.creator : "Creator", value: data.info.Creator }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.creationDate : "Creation date", value: formatDate(data.info.CreationDate) }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.modificationDate : "Modification date", value: formatDate(data.info.ModDate) })
            ),
            React__namespace.createElement(core.Separator, null),
            React__namespace.createElement(
              "div",
              { className: "rpv-properties__modal-section" },
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.pdfProducer : "PDF producer", value: data.info.Producer }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.pdfVersion : "PDF version", value: data.info.PDFFormatVersion }),
              React__namespace.createElement(PropertyItem, { label: l10n && l10n.properties ? l10n.properties.pageCount : "Page count", value: "".concat(doc.numPages) })
            )
          );
        };
        return React__namespace.createElement(
          "div",
          { className: "rpv-properties__modal" },
          React__namespace.createElement(PropertiesLoader, { doc, render: renderData }),
          React__namespace.createElement(
            "div",
            { className: "rpv-properties__modal-footer" },
            React__namespace.createElement(core.Button, { onClick: onToggle }, l10n && l10n.properties ? l10n.properties.close : "Close")
          )
        );
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var ShowPropertiesButton = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.properties ? l10n.properties.showProperties : "Show properties";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "properties", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaLabel: label, testId: "properties__button", onClick },
          React__namespace.createElement(InfoIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var useDocument = function(store) {
        var _a = React__namespace.useState(store.get("doc")), currentDoc = _a[0], setCurrentDoc = _a[1];
        var handleDocumentChanged = function(doc) {
          setCurrentDoc(doc);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
          };
        }, []);
        return { currentDoc };
      };
      var ShowProperties = function(_a) {
        var children = _a.children, store = _a.store;
        var currentDoc = useDocument(store).currentDoc;
        var fileName = store.get("fileName") || "";
        var defaultChildren = function(props) {
          return React__namespace.createElement(ShowPropertiesButton, __assign({}, props));
        };
        var render = children || defaultChildren;
        return currentDoc ? React__namespace.createElement(core.Modal, { ariaControlsSuffix: "properties", target: function(toggle) {
          return render({
            onClick: toggle
          });
        }, content: function(toggle) {
          return React__namespace.createElement(PropertiesModal, { doc: currentDoc, fileName, onToggle: toggle });
        }, closeOnClickOutside: true, closeOnEscape: true }) : React__namespace.createElement(React__namespace.Fragment, null);
      };
      var ShowPropertiesMenuItem = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.properties ? l10n.properties.showProperties : "Show properties";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(InfoIcon, null), testId: "properties__menu", onClick }, label);
      };
      var propertiesPlugin = function() {
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            fileName: ""
          });
        }, []);
        var ShowPropertiesDecorator = function(props) {
          return React__namespace.createElement(ShowProperties, __assign({}, props, { store }));
        };
        var ShowPropertiesButtonDecorator = function() {
          return React__namespace.createElement(ShowProperties, { store });
        };
        var ShowPropertiesMenuItemDecorator = function(props) {
          return React__namespace.createElement(ShowPropertiesDecorator, null, function(p) {
            return React__namespace.createElement(ShowPropertiesMenuItem, __assign({}, p));
          });
        };
        return {
          onDocumentLoad: function(props) {
            store.update("doc", props.doc);
          },
          onViewerStateChange: function(viewerState) {
            store.update("fileName", viewerState.file.name);
            return viewerState;
          },
          ShowProperties: ShowPropertiesDecorator,
          ShowPropertiesButton: ShowPropertiesButtonDecorator,
          ShowPropertiesMenuItem: ShowPropertiesMenuItemDecorator
        };
      };
      exports2.InfoIcon = InfoIcon;
      exports2.propertiesPlugin = propertiesPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/properties/lib/index.js
  var require_lib11 = __commonJS({
    "node_modules/@react-pdf-viewer/properties/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_properties();
      }
    }
  });

  // node_modules/@react-pdf-viewer/rotate/lib/cjs/rotate.js
  var require_rotate = __commonJS({
    "node_modules/@react-pdf-viewer/rotate/lib/cjs/rotate.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var RotateBackwardIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { ignoreDirection: true, size: 16 },
          React__namespace.createElement("path", { d: "M3.434,10.537c0.141-0.438,0.316-0.864,0.523-1.274\n            M3.069,14.425C3.023,14.053,3,13.679,3,13.305 c0-0.291,0.014-0.579,0.041-0.863\n            M4.389,18.111c-0.341-0.539-0.623-1.112-0.843-1.711\n            M7.163,20.9 c-0.543-0.345-1.048-0.747-1.506-1.2\n            M10.98,22.248c-0.65-0.074-1.29-0.218-1.909-0.431\n            M10,4.25h2 c4.987,0.015,9.017,4.069,9.003,9.055c-0.013,4.581-3.456,8.426-8.008,8.945\n            M13.5,1.75L10,4.25l3.5,2.5" })
        );
      };
      var RotateForwardIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { ignoreDirection: true, size: 16 },
          React__namespace.createElement("path", { d: "M20.566,10.537c-0.141-0.438-0.316-0.864-0.523-1.274\n            M20.931,14.425C20.977,14.053,21,13.679,21,13.305 c0-0.291-0.014-0.579-0.041-0.863\n            M19.611,18.111c0.341-0.539,0.624-1.114,0.843-1.713\n            M16.837,20.9 c0.543-0.345,1.048-0.747,1.506-1.2\n            M13.02,22.248c0.65-0.074,1.29-0.218,1.909-0.431\n            M14,4.25h-2 c-4.987,0.015-9.017,4.069-9.003,9.055c0.013,4.581,3.456,8.426,8.008,8.945\n            M10.5,1.75l3.5,2.5l-3.5,2.5" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var RotateButton = function(_a) {
        var direction = _a.direction, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var backwardLabel = l10n && l10n.rotate ? l10n.rotate.rotateBackward : "Rotate counterclockwise";
        var forwardLabel = l10n && l10n.rotate ? l10n.rotate.rotateForward : "Rotate clockwise";
        var label = direction === core.RotateDirection.Backward ? backwardLabel : forwardLabel;
        var icon = direction === core.RotateDirection.Backward ? React__namespace.createElement(RotateBackwardIcon, null) : React__namespace.createElement(RotateForwardIcon, null);
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "rotate", position: core.Position.BottomCenter, target: React__namespace.createElement(core.MinimalButton, { ariaLabel: label, testId: direction === core.RotateDirection.Backward ? "rotate__backward-button" : "rotate__forward-button", onClick }, icon), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var Rotate = function(_a) {
        var children = _a.children, direction = _a.direction, store = _a.store;
        var onClick = function() {
          var rotate = store.get("rotate");
          if (rotate) {
            rotate(direction);
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(RotateButton, { direction: props.direction, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          direction,
          onClick
        });
      };
      var RotateMenuItem = function(_a) {
        var direction = _a.direction, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var backwardLabel = l10n && l10n.rotate ? l10n.rotate.rotateBackward : "Rotate counterclockwise";
        var forwardLabel = l10n && l10n.rotate ? l10n.rotate.rotateForward : "Rotate clockwise";
        var label = direction === core.RotateDirection.Backward ? backwardLabel : forwardLabel;
        var icon = direction === core.RotateDirection.Backward ? React__namespace.createElement(RotateBackwardIcon, null) : React__namespace.createElement(RotateForwardIcon, null);
        return React__namespace.createElement(core.MenuItem, { icon, testId: direction === core.RotateDirection.Backward ? "rotate__backward-menu" : "rotate__forward-menu", onClick }, label);
      };
      var RotatePage = function(_a) {
        var children = _a.children, store = _a.store;
        var onRotatePage = function(pageIndex, direction) {
          var rotatePage = store.get("rotatePage");
          if (rotatePage) {
            rotatePage(pageIndex, direction);
          }
        };
        return children({
          onRotatePage
        });
      };
      var rotatePlugin = function() {
        var store = React__namespace.useMemo(function() {
          return core.createStore();
        }, []);
        var RotateDecorator = function(props) {
          return React__namespace.createElement(Rotate, __assign({}, props, { store }));
        };
        var RotateBackwardButtonDecorator = function() {
          return React__namespace.createElement(RotateDecorator, { direction: core.RotateDirection.Backward }, function(props) {
            return React__namespace.createElement(RotateButton, __assign({}, props));
          });
        };
        var RotateBackwardMenuItemDecorator = function(props) {
          return React__namespace.createElement(RotateDecorator, { direction: core.RotateDirection.Backward }, function(p) {
            return React__namespace.createElement(RotateMenuItem, { direction: p.direction, onClick: function() {
              p.onClick();
              props.onClick();
            } });
          });
        };
        var RotateForwardButtonDecorator = function() {
          return React__namespace.createElement(RotateDecorator, { direction: core.RotateDirection.Forward }, function(props) {
            return React__namespace.createElement(RotateButton, __assign({}, props));
          });
        };
        var RotateForwardMenuItemDecorator = function(props) {
          return React__namespace.createElement(RotateDecorator, { direction: core.RotateDirection.Forward }, function(p) {
            return React__namespace.createElement(RotateMenuItem, { direction: p.direction, onClick: function() {
              p.onClick();
              props.onClick();
            } });
          });
        };
        var RotatePageDecorator = function(props) {
          return React__namespace.createElement(RotatePage, __assign({}, props, { store }));
        };
        return {
          install: function(pluginFunctions) {
            store.update("rotate", pluginFunctions.rotate);
            store.update("rotatePage", pluginFunctions.rotatePage);
          },
          Rotate: RotateDecorator,
          RotateBackwardButton: RotateBackwardButtonDecorator,
          RotateBackwardMenuItem: RotateBackwardMenuItemDecorator,
          RotateForwardButton: RotateForwardButtonDecorator,
          RotateForwardMenuItem: RotateForwardMenuItemDecorator,
          RotatePage: RotatePageDecorator
        };
      };
      exports2.RotateBackwardIcon = RotateBackwardIcon;
      exports2.RotateForwardIcon = RotateForwardIcon;
      exports2.rotatePlugin = rotatePlugin;
    }
  });

  // node_modules/@react-pdf-viewer/rotate/lib/index.js
  var require_lib12 = __commonJS({
    "node_modules/@react-pdf-viewer/rotate/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_rotate();
      }
    }
  });

  // node_modules/@react-pdf-viewer/scroll-mode/lib/cjs/scroll-mode.js
  var require_scroll_mode = __commonJS({
    "node_modules/@react-pdf-viewer/scroll-mode/lib/cjs/scroll-mode.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var DualPageCoverViewModeIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("rect", { x: "0.5", y: "0.497", width: "22", height: "22", rx: "1", ry: "1" }),
          React__namespace.createElement("line", { x1: "0.5", y1: "6.497", x2: "22.5", y2: "6.497" }),
          React__namespace.createElement("line", { x1: "11.5", y1: "6.497", x2: "11.5", y2: "22.497" })
        );
      };
      var DualPageViewModeIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("rect", { x: "0.5", y: "0.497", width: "22", height: "22", rx: "1", ry: "1" }),
          React__namespace.createElement("line", { x1: "11.5", y1: "0.497", x2: "11.5", y2: "22.497" })
        );
      };
      var HorizontalScrollingIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M6.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\n            M14.5,21.5c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z\n            M22.5,21.5 c0,0.552-0.448,1-1,1h-4c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1V21.5z" })
        );
      };
      var PageScrollingIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("rect", { x: "0.5", y: "0.497", width: "22", height: "22", rx: "1", ry: "1" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var switchScrollMode = function(store, scrollMode) {
        store.get("switchScrollMode")(scrollMode);
        var currentViewMode = store.get("viewMode");
        if ((scrollMode === core.ScrollMode.Horizontal || scrollMode === core.ScrollMode.Wrapped) && currentViewMode !== core.ViewMode.SinglePage) {
          store.get("switchViewMode")(core.ViewMode.SinglePage);
        }
      };
      var VerticalScrollingIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M23.5,5.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V5.5z\n            M23.5,13.5c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V13.5z\n            M23.5,21.5 c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-3c0-0.552,0.448-1,1-1h21c0.552,0,1,0.448,1,1V21.5z" })
        );
      };
      var WrappedScrollingIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M10.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n            M23.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n            M10.5,22.5 c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z\n            M23.5,22.5c0,0.552-0.448,1-1,1 h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z" })
        );
      };
      var SwitchScrollModeDecorator = function(_a) {
        var children = _a.children, mode = _a.mode, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = "";
        var icon = React__namespace.createElement(VerticalScrollingIcon, null);
        switch (mode) {
          case core.ScrollMode.Horizontal:
            label = l10n && l10n.scrollMode ? l10n.scrollMode.horizontalScrolling : "Horizontal scrolling";
            icon = React__namespace.createElement(HorizontalScrollingIcon, null);
            break;
          case core.ScrollMode.Page:
            label = l10n && l10n.scrollMode ? l10n.scrollMode.pageScrolling : "Page scrolling";
            icon = React__namespace.createElement(PageScrollingIcon, null);
            break;
          case core.ScrollMode.Wrapped:
            label = l10n && l10n.scrollMode ? l10n.scrollMode.wrappedScrolling : "Wrapped scrolling";
            icon = React__namespace.createElement(WrappedScrollingIcon, null);
            break;
          case core.ScrollMode.Vertical:
          default:
            label = l10n && l10n.scrollMode ? l10n.scrollMode.verticalScrolling : "Vertical scrolling";
            icon = React__namespace.createElement(VerticalScrollingIcon, null);
            break;
        }
        return children({ icon, label, onClick });
      };
      var TOOLTIP_OFFSET$1 = { left: 0, top: 8 };
      var SwitchScrollModeButton = function(_a) {
        var isDisabled = _a.isDisabled, isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
        var testId = "";
        switch (mode) {
          case core.ScrollMode.Horizontal:
            testId = "scroll-mode__horizontal-button";
            break;
          case core.ScrollMode.Page:
            testId = "scroll-mode__page-button";
            break;
          case core.ScrollMode.Wrapped:
            testId = "scroll-mode__wrapped-button";
            break;
          case core.ScrollMode.Vertical:
          default:
            testId = "scroll-mode__vertical-button";
            break;
        }
        return React__namespace.createElement(SwitchScrollModeDecorator, { mode, onClick }, function(props) {
          return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "scroll-mode-switch", position: core.Position.BottomCenter, target: React__namespace.createElement(core.MinimalButton, { ariaLabel: props.label, isDisabled, isSelected, testId, onClick: props.onClick }, props.icon), content: function() {
            return props.label;
          }, offset: TOOLTIP_OFFSET$1 });
        });
      };
      var useScrollMode = function(store) {
        var _a = React__namespace.useState(store.get("scrollMode") || core.ScrollMode.Vertical), scrollMode = _a[0], setScrollMode = _a[1];
        var handleScrollModeChanged = function(currentScrollMode) {
          setScrollMode(currentScrollMode);
        };
        React__namespace.useEffect(function() {
          store.subscribe("scrollMode", handleScrollModeChanged);
          return function() {
            store.unsubscribe("scrollMode", handleScrollModeChanged);
          };
        }, []);
        return { scrollMode };
      };
      var useViewMode = function(store) {
        var _a = React__namespace.useState(store.get("viewMode") || core.ViewMode.SinglePage), viewMode = _a[0], setViewMode = _a[1];
        var handleViewModeChanged = function(currentViewMode) {
          setViewMode(currentViewMode);
        };
        React__namespace.useEffect(function() {
          store.subscribe("viewMode", handleViewModeChanged);
          return function() {
            store.unsubscribe("viewMode", handleViewModeChanged);
          };
        }, []);
        return { viewMode };
      };
      var SwitchScrollMode = function(_a) {
        var children = _a.children, mode = _a.mode, store = _a.store;
        var viewMode = useViewMode(store).viewMode;
        var scrollMode = useScrollMode(store).scrollMode;
        var onClick = function() {
          switchScrollMode(store, mode);
        };
        var isSelected = scrollMode === mode;
        var isDisabled = (mode === core.ScrollMode.Horizontal || mode === core.ScrollMode.Wrapped) && viewMode !== core.ViewMode.SinglePage;
        var defaultChildren = function(props) {
          return React__namespace.createElement(SwitchScrollModeButton, { isDisabled, isSelected, mode: props.mode, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          isDisabled,
          isSelected,
          mode,
          onClick
        });
      };
      var SwitchScrollModeMenuItem = function(_a) {
        var isDisabled = _a.isDisabled, isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
        var testId = "";
        switch (mode) {
          case core.ScrollMode.Horizontal:
            testId = "scroll-mode__horizontal-menu";
            break;
          case core.ScrollMode.Page:
            testId = "scroll-mode__page-menu";
            break;
          case core.ScrollMode.Wrapped:
            testId = "scroll-mode__wrapped-menu";
            break;
          case core.ScrollMode.Vertical:
          default:
            testId = "scroll-mode__vertical-menu";
            break;
        }
        return React__namespace.createElement(SwitchScrollModeDecorator, { mode, onClick }, function(props) {
          return React__namespace.createElement(core.MenuItem, { checked: isSelected, icon: props.icon, isDisabled, testId, onClick: props.onClick }, props.label);
        });
      };
      var switchViewMode = function(store, viewMode) {
        store.get("switchViewMode")(viewMode);
        var currentScrollMode = store.get("scrollMode");
        if ((currentScrollMode === core.ScrollMode.Horizontal || currentScrollMode === core.ScrollMode.Wrapped) && viewMode !== core.ViewMode.SinglePage) {
          store.get("switchScrollMode")(core.ScrollMode.Vertical);
        }
      };
      var SwitchViewModeDecorator = function(_a) {
        var children = _a.children, mode = _a.mode, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = "";
        var icon = React__namespace.createElement(PageScrollingIcon, null);
        switch (mode) {
          case core.ViewMode.DualPage:
            label = l10n && l10n.scrollMode ? l10n.scrollMode.dualPage : "Dual page";
            icon = React__namespace.createElement(DualPageViewModeIcon, null);
            break;
          case core.ViewMode.DualPageWithCover:
            label = l10n && l10n.scrollMode ? l10n.scrollMode.dualPageCover : "Dual page with cover";
            icon = React__namespace.createElement(DualPageCoverViewModeIcon, null);
            break;
          case core.ViewMode.SinglePage:
          default:
            label = l10n && l10n.scrollMode ? l10n.scrollMode.singlePage : "Single page";
            icon = React__namespace.createElement(PageScrollingIcon, null);
            break;
        }
        return children({ icon, label, onClick });
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var SwitchViewModeButton = function(_a) {
        var isDisabled = _a.isDisabled, isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
        var testId = "";
        switch (mode) {
          case core.ViewMode.DualPage:
            testId = "view-mode__dual-button";
            break;
          case core.ViewMode.DualPageWithCover:
            testId = "view-mode__dual-cover-button";
            break;
          case core.ViewMode.SinglePage:
          default:
            testId = "view-mode__single-button";
            break;
        }
        return React__namespace.createElement(SwitchViewModeDecorator, { mode, onClick }, function(props) {
          return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "view-mode-switch", position: core.Position.BottomCenter, target: React__namespace.createElement(core.MinimalButton, { ariaLabel: props.label, isDisabled, isSelected, testId, onClick: props.onClick }, props.icon), content: function() {
            return props.label;
          }, offset: TOOLTIP_OFFSET });
        });
      };
      var SwitchViewMode = function(_a) {
        var children = _a.children, mode = _a.mode, store = _a.store;
        var viewMode = useViewMode(store).viewMode;
        var scrollMode = useScrollMode(store).scrollMode;
        var onClick = function() {
          switchViewMode(store, mode);
        };
        var isSelected = viewMode === mode;
        var isDisabled = (scrollMode === core.ScrollMode.Horizontal || scrollMode === core.ScrollMode.Wrapped) && mode !== core.ViewMode.SinglePage;
        var defaultChildren = function(props) {
          return React__namespace.createElement(SwitchViewModeButton, { isDisabled, isSelected, mode: props.mode, onClick: props.onClick });
        };
        var render = children || defaultChildren;
        return render({
          isDisabled,
          isSelected,
          mode,
          onClick
        });
      };
      var SwitchViewModeMenuItem = function(_a) {
        var isDisabled = _a.isDisabled, isSelected = _a.isSelected, mode = _a.mode, onClick = _a.onClick;
        var testId = "";
        switch (mode) {
          case core.ViewMode.DualPage:
            testId = "view-mode__dual-menu";
            break;
          case core.ViewMode.DualPageWithCover:
            testId = "view-mode__dual-cover-menu";
            break;
          case core.ViewMode.SinglePage:
          default:
            testId = "view-mode__single-menu";
            break;
        }
        return React__namespace.createElement(SwitchViewModeDecorator, { mode, onClick }, function(props) {
          return React__namespace.createElement(core.MenuItem, { checked: isSelected, icon: props.icon, isDisabled, testId, onClick: props.onClick }, props.label);
        });
      };
      var scrollModePlugin = function() {
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            scrollMode: core.ScrollMode.Vertical,
            viewMode: core.ViewMode.SinglePage,
            switchScrollMode: function() {
            },
            switchViewMode: function() {
            }
          });
        }, []);
        var SwitchScrollModeDecorator2 = function(props) {
          return React__namespace.createElement(SwitchScrollMode, __assign({}, props, { store }));
        };
        var SwitchScrollModeButtonDecorator = function(props) {
          return React__namespace.createElement(SwitchScrollModeDecorator2, { mode: props.mode }, function(p) {
            return React__namespace.createElement(SwitchScrollModeButton, { isDisabled: p.isDisabled, isSelected: p.isSelected, mode: p.mode, onClick: function() {
              p.onClick();
            } });
          });
        };
        var SwitchScrollModeMenuItemDecorator = function(props) {
          return React__namespace.createElement(SwitchScrollModeDecorator2, { mode: props.mode }, function(p) {
            return React__namespace.createElement(SwitchScrollModeMenuItem, { isDisabled: p.isDisabled, isSelected: p.isSelected, mode: p.mode, onClick: function() {
              p.onClick();
              props.onClick();
            } });
          });
        };
        var SwitchViewModeDecorator2 = function(props) {
          return React__namespace.createElement(SwitchViewMode, __assign({}, props, { store }));
        };
        var SwitchViewModeButtonDecorator = function(props) {
          return React__namespace.createElement(SwitchViewModeDecorator2, { mode: props.mode }, function(p) {
            return React__namespace.createElement(SwitchViewModeButton, { isDisabled: p.isDisabled, isSelected: p.isSelected, mode: p.mode, onClick: function() {
              p.onClick();
            } });
          });
        };
        var SwitchViewModeMenuItemDecorator = function(props) {
          return React__namespace.createElement(SwitchViewModeDecorator2, { mode: props.mode }, function(p) {
            return React__namespace.createElement(SwitchViewModeMenuItem, { isDisabled: p.isDisabled, isSelected: p.isSelected, mode: p.mode, onClick: function() {
              p.onClick();
              props.onClick();
            } });
          });
        };
        return {
          install: function(pluginFunctions) {
            store.update("switchScrollMode", pluginFunctions.switchScrollMode);
            store.update("switchViewMode", pluginFunctions.switchViewMode);
          },
          onViewerStateChange: function(viewerState) {
            store.update("scrollMode", viewerState.scrollMode);
            store.update("viewMode", viewerState.viewMode);
            return viewerState;
          },
          switchScrollMode: function(scrollMode) {
            switchScrollMode(store, scrollMode);
          },
          switchViewMode: function(viewMode) {
            switchViewMode(store, viewMode);
          },
          SwitchScrollMode: SwitchScrollModeDecorator2,
          SwitchScrollModeButton: SwitchScrollModeButtonDecorator,
          SwitchScrollModeMenuItem: SwitchScrollModeMenuItemDecorator,
          SwitchViewMode: SwitchViewModeDecorator2,
          SwitchViewModeButton: SwitchViewModeButtonDecorator,
          SwitchViewModeMenuItem: SwitchViewModeMenuItemDecorator
        };
      };
      exports2.DualPageCoverViewModeIcon = DualPageCoverViewModeIcon;
      exports2.DualPageViewModeIcon = DualPageViewModeIcon;
      exports2.HorizontalScrollingIcon = HorizontalScrollingIcon;
      exports2.PageScrollingIcon = PageScrollingIcon;
      exports2.VerticalScrollingIcon = VerticalScrollingIcon;
      exports2.WrappedScrollingIcon = WrappedScrollingIcon;
      exports2.scrollModePlugin = scrollModePlugin;
    }
  });

  // node_modules/@react-pdf-viewer/scroll-mode/lib/index.js
  var require_lib13 = __commonJS({
    "node_modules/@react-pdf-viewer/scroll-mode/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scroll_mode();
      }
    }
  });

  // node_modules/@react-pdf-viewer/search/lib/cjs/search.js
  var require_search = __commonJS({
    "node_modules/@react-pdf-viewer/search/lib/cjs/search.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var NextIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M0.541,5.627L11.666,18.2c0.183,0.207,0.499,0.226,0.706,0.043c0.015-0.014,0.03-0.028,0.043-0.043\n            L23.541,5.627" })
        );
      };
      var PreviousIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M23.535,18.373L12.409,5.8c-0.183-0.207-0.499-0.226-0.706-0.043C11.688,5.77,11.674,5.785,11.66,5.8\n            L0.535,18.373" })
        );
      };
      var SearchIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { ignoreDirection: true, size: 16 },
          React__namespace.createElement("path", { d: "M10.5,0.5c5.523,0,10,4.477,10,10s-4.477,10-10,10s-10-4.477-10-10S4.977,0.5,10.5,0.5z\n            M23.5,23.5\n            l-5.929-5.929" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var EMPTY_KEYWORD_REGEXP = {
        keyword: "",
        regExp: new RegExp(" "),
        wholeWords: false
      };
      var calculateOffset = function(children, parent) {
        var top = children.offsetTop;
        var left = children.offsetLeft;
        var p = children.parentElement;
        while (p && p !== parent) {
          top += p.offsetTop;
          left += p.offsetLeft;
          p = p.parentElement;
        }
        return {
          left,
          top
        };
      };
      var getCssProperties = function(area) {
        return {
          left: "".concat(area.left, "%"),
          top: "".concat(area.top, "%"),
          height: "".concat(area.height, "%"),
          width: "".concat(area.width, "%")
        };
      };
      var HightlightItem = function(_a) {
        var index = _a.index, area = _a.area, onHighlightKeyword = _a.onHighlightKeyword;
        var containerRef = React__namespace.useRef();
        core.useIsomorphicLayoutEffect(function() {
          var highlightEle = containerRef.current;
          if (onHighlightKeyword && highlightEle) {
            onHighlightKeyword({
              highlightEle,
              keyword: area.keyword
            });
          }
        }, []);
        return React__namespace.createElement("div", { className: "rpv-search__highlight", "data-index": index, ref: containerRef, style: getCssProperties(area), title: area.keywordStr.trim() });
      };
      var removeNode = function(ele) {
        var parent = ele.parentNode;
        if (parent) {
          parent.removeChild(ele);
        }
      };
      var replaceNode = function(replacementNode, node) {
        removeNode(replacementNode);
        var parent = node.parentNode;
        if (parent) {
          parent.insertBefore(replacementNode, node);
        }
        removeNode(node);
      };
      var unwrap = function(ele) {
        var parent = ele.parentNode;
        if (!parent) {
          return;
        }
        var range = document.createRange();
        range.selectNodeContents(ele);
        replaceNode(range.extractContents(), ele);
        parent.normalize();
      };
      var sortHighlightPosition = function(a, b) {
        if (a.top < b.top) {
          return -1;
        }
        if (a.top > b.top) {
          return 1;
        }
        if (a.left < b.left) {
          return -1;
        }
        if (a.left > b.left) {
          return 1;
        }
        return 0;
      };
      var Highlights = function(_a) {
        var numPages = _a.numPages, pageIndex = _a.pageIndex, renderHighlights = _a.renderHighlights, store = _a.store, onHighlightKeyword = _a.onHighlightKeyword;
        var containerRef = React__namespace.useRef();
        var defaultRenderHighlights = React__namespace.useCallback(function(renderProps) {
          return React__namespace.createElement(React__namespace.Fragment, null, renderProps.highlightAreas.map(function(area, index) {
            return React__namespace.createElement(HightlightItem, { index, key: index, area, onHighlightKeyword });
          }));
        }, []);
        var renderHighlightElements = renderHighlights || defaultRenderHighlights;
        var _b = React__namespace.useState(store.get("matchPosition")), matchPosition = _b[0], setMatchPosition = _b[1];
        var _c = React__namespace.useState(store.get("keyword") || [EMPTY_KEYWORD_REGEXP]), keywordRegexp = _c[0], setKeywordRegexp = _c[1];
        var _d = React__namespace.useState({
          pageIndex,
          scale: 1,
          status: core.LayerRenderStatus.PreRender
        }), renderStatus = _d[0], setRenderStatus = _d[1];
        var currentMatchRef = React__namespace.useRef(null);
        var characterIndexesRef = React__namespace.useRef([]);
        var _e = React__namespace.useState([]), highlightAreas = _e[0], setHighlightAreas = _e[1];
        var defaultTargetPageFilter = function() {
          return true;
        };
        var targetPageFilter = React__namespace.useCallback(function() {
          return store.get("targetPageFilter") || defaultTargetPageFilter;
        }, [store.get("targetPageFilter")]);
        var highlight = function(keywordStr, keyword, textLayerEle, span, charIndexSpan) {
          var range = document.createRange();
          var firstChild = span.firstChild;
          if (!firstChild || firstChild.nodeType !== Node.TEXT_NODE) {
            return null;
          }
          var length = firstChild.textContent.length;
          var startOffset = charIndexSpan[0].charIndexInSpan;
          var endOffset = charIndexSpan.length === 1 ? startOffset : charIndexSpan[charIndexSpan.length - 1].charIndexInSpan;
          if (startOffset > length || endOffset + 1 > length) {
            return null;
          }
          range.setStart(firstChild, startOffset);
          range.setEnd(firstChild, endOffset + 1);
          var wrapper = document.createElement("span");
          range.surroundContents(wrapper);
          var wrapperRect = wrapper.getBoundingClientRect();
          var textLayerRect = textLayerEle.getBoundingClientRect();
          var pageHeight = textLayerRect.height;
          var pageWidth = textLayerRect.width;
          var left = 100 * (wrapperRect.left - textLayerRect.left) / pageWidth;
          var top = 100 * (wrapperRect.top - textLayerRect.top) / pageHeight;
          var height = 100 * wrapperRect.height / pageHeight;
          var width = 100 * wrapperRect.width / pageWidth;
          unwrap(wrapper);
          return {
            keyword,
            keywordStr,
            numPages,
            pageIndex,
            left,
            top,
            height,
            width,
            pageHeight,
            pageWidth
          };
        };
        var highlightAll = function(textLayerEle) {
          var charIndexes = characterIndexesRef.current;
          if (charIndexes.length === 0) {
            return [];
          }
          var highlightPos = [];
          var spans = [].slice.call(textLayerEle.querySelectorAll(".rpv-core__text-layer-text"));
          var fullText = charIndexes.map(function(item) {
            return item.char;
          }).join("");
          keywordRegexp.forEach(function(keyword) {
            var keywordStr = keyword.keyword;
            if (!keywordStr.trim()) {
              return;
            }
            var cloneKeyword = keyword.regExp.flags.indexOf("g") === -1 ? new RegExp(keyword.regExp, "".concat(keyword.regExp.flags, "g")) : keyword.regExp;
            var match;
            var matches = [];
            while ((match = cloneKeyword.exec(fullText)) !== null) {
              matches.push({
                keyword: cloneKeyword,
                startIndex: match.index,
                endIndex: cloneKeyword.lastIndex
              });
            }
            matches.map(function(item) {
              return {
                keyword: item.keyword,
                indexes: charIndexes.slice(item.startIndex, item.endIndex)
              };
            }).forEach(function(item) {
              var spanIndexes = item.indexes.reduce(function(acc, item2) {
                acc[item2.spanIndex] = (acc[item2.spanIndex] || []).concat([item2]);
                return acc;
              }, {});
              Object.values(spanIndexes).forEach(function(charIndexSpan) {
                if (charIndexSpan.length !== 1 || charIndexSpan[0].char.trim() !== "") {
                  var normalizedCharSpan = keyword.wholeWords ? charIndexSpan.slice(1, -1) : charIndexSpan;
                  var hightlighPosition = highlight(keywordStr, item.keyword, textLayerEle, spans[normalizedCharSpan[0].spanIndex], normalizedCharSpan);
                  if (hightlighPosition) {
                    highlightPos.push(hightlighPosition);
                  }
                }
              });
            });
          });
          return highlightPos.sort(sortHighlightPosition);
        };
        var handleKeywordChanged = function(keyword) {
          if (keyword && keyword.length > 0) {
            setKeywordRegexp(keyword);
          }
        };
        var handleMatchPositionChanged = function(currentPosition) {
          return setMatchPosition(currentPosition);
        };
        var handleRenderStatusChanged = function(status) {
          if (!status.has(pageIndex)) {
            return;
          }
          var currentStatus = status.get(pageIndex);
          if (currentStatus) {
            setRenderStatus({
              ele: currentStatus.ele,
              pageIndex,
              scale: currentStatus.scale,
              status: currentStatus.status
            });
          }
        };
        var isEmptyKeyword = function() {
          return keywordRegexp.length === 0 || keywordRegexp.length === 1 && keywordRegexp[0].keyword.trim() === "";
        };
        React__namespace.useEffect(function() {
          if (isEmptyKeyword() || renderStatus.status !== core.LayerRenderStatus.DidRender || characterIndexesRef.current.length) {
            return;
          }
          var textLayerEle = renderStatus.ele;
          var spans = [].slice.call(textLayerEle.querySelectorAll(".rpv-core__text-layer-text"));
          var charIndexes = spans.map(function(span) {
            return span.textContent;
          }).reduce(function(prev, curr, index) {
            return prev.concat(curr.split("").map(function(c, i) {
              return {
                char: c,
                charIndexInSpan: i,
                spanIndex: index
              };
            }));
          }, [
            {
              char: "",
              charIndexInSpan: 0,
              spanIndex: 0
            }
          ]).slice(1);
          characterIndexesRef.current = charIndexes;
        }, [keywordRegexp, renderStatus.status]);
        React__namespace.useEffect(function() {
          if (isEmptyKeyword() || !renderStatus.ele || renderStatus.status !== core.LayerRenderStatus.DidRender || !targetPageFilter()({ pageIndex, numPages })) {
            return;
          }
          var textLayerEle = renderStatus.ele;
          var highlightPos = highlightAll(textLayerEle);
          setHighlightAreas(highlightPos);
        }, [keywordRegexp, matchPosition, renderStatus.status, characterIndexesRef.current]);
        React__namespace.useEffect(function() {
          if (isEmptyKeyword() && renderStatus.ele && renderStatus.status === core.LayerRenderStatus.DidRender) {
            setHighlightAreas([]);
          }
        }, [keywordRegexp, renderStatus.status]);
        React__namespace.useEffect(function() {
          if (highlightAreas.length === 0) {
            return;
          }
          var container = containerRef.current;
          if (matchPosition.pageIndex !== pageIndex || !container || renderStatus.status !== core.LayerRenderStatus.DidRender) {
            return;
          }
          var highlightEle = container.querySelector('.rpv-search__highlight[data-index="'.concat(matchPosition.matchIndex, '"]'));
          if (!highlightEle) {
            return;
          }
          var _a2 = calculateOffset(highlightEle, container), left = _a2.left, top = _a2.top;
          var jump = store.get("jumpToDestination");
          if (jump) {
            jump({
              pageIndex,
              bottomOffset: (container.getBoundingClientRect().height - top) / renderStatus.scale,
              leftOffset: left / renderStatus.scale,
              scaleTo: renderStatus.scale
            });
            if (currentMatchRef.current) {
              currentMatchRef.current.classList.remove("rpv-search__highlight--current");
            }
            currentMatchRef.current = highlightEle;
            highlightEle.classList.add("rpv-search__highlight--current");
          }
        }, [highlightAreas, matchPosition]);
        React__namespace.useEffect(function() {
          store.subscribe("keyword", handleKeywordChanged);
          store.subscribe("matchPosition", handleMatchPositionChanged);
          store.subscribe("renderStatus", handleRenderStatusChanged);
          return function() {
            store.unsubscribe("keyword", handleKeywordChanged);
            store.unsubscribe("matchPosition", handleMatchPositionChanged);
            store.unsubscribe("renderStatus", handleRenderStatusChanged);
          };
        }, []);
        return React__namespace.createElement("div", { className: "rpv-search__highlights", "data-testid": "search__highlights-".concat(pageIndex), ref: containerRef }, renderHighlightElements({
          getCssProperties,
          highlightAreas
        }));
      };
      var escapeRegExp = function(input) {
        return input.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      };
      var normalizeFlagKeyword = function(flagKeyword) {
        var source = flagKeyword.wholeWords ? " ".concat(flagKeyword.keyword, " ") : flagKeyword.keyword;
        var flags = flagKeyword.matchCase ? "g" : "gi";
        return {
          keyword: flagKeyword.keyword,
          regExp: new RegExp(escapeRegExp(source), flags),
          wholeWords: flagKeyword.wholeWords || false
        };
      };
      var normalizeSingleKeyword = function(keyword, matchCase, wholeWords) {
        if (keyword instanceof RegExp) {
          return {
            keyword: keyword.source,
            regExp: keyword,
            wholeWords: wholeWords || false
          };
        }
        if (typeof keyword === "string") {
          return keyword === "" ? EMPTY_KEYWORD_REGEXP : normalizeFlagKeyword({
            keyword,
            matchCase: matchCase || false,
            wholeWords: wholeWords || false
          });
        }
        if (typeof matchCase !== "undefined") {
          keyword.matchCase = matchCase;
        }
        if (typeof wholeWords !== "undefined") {
          keyword.wholeWords = wholeWords;
        }
        return normalizeFlagKeyword(keyword);
      };
      var useDocument = function(store) {
        var currentDocRef = React__namespace.useRef(store.get("doc"));
        var handleDocumentChanged = function(doc) {
          currentDocRef.current = doc;
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
          };
        }, []);
        return currentDocRef;
      };
      var useSearch = function(store) {
        var initialKeyword = store.get("initialKeyword");
        var normalizedKeywordFlags = React__namespace.useMemo(function() {
          if (initialKeyword && initialKeyword.length === 1) {
            var normalizedKeyword = normalizeSingleKeyword(initialKeyword[0]);
            return {
              matchCase: normalizedKeyword.regExp.flags.indexOf("i") === -1,
              wholeWords: normalizedKeyword.wholeWords
            };
          } else {
            return {
              matchCase: false,
              wholeWords: false
            };
          }
        }, []);
        var currentDocRef = useDocument(store);
        var _a = React__namespace.useState(initialKeyword), keywords = _a[0], setKeywords = _a[1];
        var _b = React__namespace.useState([]), found = _b[0], setFound = _b[1];
        var _c = React__namespace.useState(0), currentMatch = _c[0], setCurrentMatch = _c[1];
        var _d = React__namespace.useState(normalizedKeywordFlags.matchCase), matchCase = _d[0], setMatchCase = _d[1];
        var textContents = React__namespace.useRef([]);
        var _e = React__namespace.useState(normalizedKeywordFlags.wholeWords), wholeWords = _e[0], setWholeWords = _e[1];
        var defaultTargetPageFilter = function() {
          return true;
        };
        var targetPageFilter = React__namespace.useCallback(function() {
          return store.get("targetPageFilter") || defaultTargetPageFilter;
        }, [store.get("targetPageFilter")]);
        var changeMatchCase = function(isChecked) {
          setMatchCase(isChecked);
          if (keywords.length > 0) {
            searchFor(keywords, isChecked, wholeWords);
          }
        };
        var changeWholeWords = function(isChecked) {
          setWholeWords(isChecked);
          if (keywords.length > 0) {
            searchFor(keywords, matchCase, isChecked);
          }
        };
        var jumpToMatch = function(index) {
          var numMatches = found.length;
          if (keywords.length === 0 || numMatches === 0) {
            return null;
          }
          var normalizedIndex = index === numMatches + 1 ? 1 : Math.max(1, Math.min(numMatches, index));
          setCurrentMatch(normalizedIndex);
          return jumpToGivenMatch(found[normalizedIndex - 1]);
        };
        var jumpToPreviousMatch = function() {
          return jumpToMatch(currentMatch - 1);
        };
        var jumpToNextMatch = function() {
          return jumpToMatch(currentMatch + 1);
        };
        var clearKeyword = function() {
          store.update("keyword", [EMPTY_KEYWORD_REGEXP]);
          setKeyword("");
          setCurrentMatch(0);
          setFound([]);
          setMatchCase(false);
          setWholeWords(false);
        };
        var search = function() {
          return searchFor(keywords, matchCase, wholeWords);
        };
        var setKeyword = function(keyword) {
          return setKeywords(keyword === "" ? [] : [keyword]);
        };
        var setTargetPages = function(targetPageFilter2) {
          store.update("targetPageFilter", targetPageFilter2);
        };
        var getTextContents = function() {
          var currentDoc = currentDocRef.current;
          if (!currentDoc) {
            return Promise.resolve([]);
          }
          var promises = Array(currentDoc.numPages).fill(0).map(function(_, pageIndex) {
            return core.getPage(currentDoc, pageIndex).then(function(page) {
              return page.getTextContent();
            }).then(function(content) {
              var pageContent = content.items.map(function(item) {
                return item.str || "";
              }).join("");
              return Promise.resolve({
                pageContent,
                pageIndex
              });
            });
          });
          return Promise.all(promises).then(function(data) {
            data.sort(function(a, b) {
              return a.pageIndex - b.pageIndex;
            });
            return Promise.resolve(data.map(function(item) {
              return item.pageContent;
            }));
          });
        };
        var jumpToGivenMatch = function(match) {
          var jumpToPage = store.get("jumpToPage");
          if (jumpToPage) {
            jumpToPage(match.pageIndex);
          }
          store.update("matchPosition", {
            matchIndex: match.matchIndex,
            pageIndex: match.pageIndex
          });
          return match;
        };
        var getKeywordSource = function(keyword) {
          if (keyword instanceof RegExp) {
            return keyword.source;
          }
          if (typeof keyword === "string") {
            return keyword;
          }
          return keyword.keyword;
        };
        var searchFor = function(keywordParam, matchCaseParam, wholeWordsParam) {
          var currentDoc = currentDocRef.current;
          if (!currentDoc) {
            return Promise.resolve([]);
          }
          var numPages = currentDoc.numPages;
          var keywords2 = keywordParam.map(function(k) {
            return normalizeSingleKeyword(k, matchCaseParam, wholeWordsParam);
          });
          store.update("keyword", keywords2);
          setCurrentMatch(0);
          setFound([]);
          return new Promise(function(resolve, _) {
            var getTextPromise = textContents.current.length === 0 ? getTextContents().then(function(response) {
              textContents.current = response;
              return Promise.resolve(response);
            }) : Promise.resolve(textContents.current);
            getTextPromise.then(function(response) {
              var arr = [];
              response.forEach(function(pageText, pageIndex) {
                if (targetPageFilter()({ pageIndex, numPages })) {
                  keywords2.forEach(function(keyword) {
                    var matchIndex = 0;
                    var matches;
                    while ((matches = keyword.regExp.exec(pageText)) !== null) {
                      arr.push({
                        keyword: keyword.regExp,
                        matchIndex,
                        pageIndex,
                        pageText,
                        startIndex: matches.index,
                        endIndex: keyword.regExp.lastIndex
                      });
                      matchIndex++;
                    }
                  });
                }
              });
              setFound(arr);
              if (arr.length > 0) {
                setCurrentMatch(1);
                jumpToGivenMatch(arr[0]);
              }
              resolve(arr);
            });
          });
        };
        React__namespace.useEffect(function() {
          textContents.current = [];
        }, [currentDocRef.current]);
        return {
          clearKeyword,
          changeMatchCase,
          changeWholeWords,
          currentMatch,
          jumpToMatch,
          jumpToNextMatch,
          jumpToPreviousMatch,
          keywords,
          matchCase,
          numberOfMatches: found.length,
          wholeWords,
          search,
          searchFor,
          setKeywords,
          keyword: keywords.length === 0 ? "" : getKeywordSource(keywords[0]),
          setKeyword,
          setTargetPages
        };
      };
      var Search = function(_a) {
        var children = _a.children, store = _a.store;
        var result = useSearch(store);
        var _b = React__namespace.useState(false), isDocumentLoaded = _b[0], setDocumentLoaded = _b[1];
        var handleDocumentChanged = function(_) {
          return setDocumentLoaded(true);
        };
        React__namespace.useEffect(function() {
          store.subscribe("doc", handleDocumentChanged);
          return function() {
            store.unsubscribe("doc", handleDocumentChanged);
          };
        }, []);
        return children(__assign(__assign({}, result), { isDocumentLoaded }));
      };
      var ShortcutHandler = function(_a) {
        var containerRef = _a.containerRef, store = _a.store;
        var isMouseInsideRef = React__namespace.useRef(false);
        var handleMouseEnter = function() {
          isMouseInsideRef.current = true;
        };
        var handleMouseLeave = function() {
          isMouseInsideRef.current = false;
        };
        var handleKeydown = function(e) {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          if (e.shiftKey || e.altKey || e.key !== "f") {
            return;
          }
          var isCommandPressed = core.isMac() ? e.metaKey && !e.ctrlKey : e.ctrlKey;
          if (!isCommandPressed) {
            return;
          }
          if (isMouseInsideRef.current || document.activeElement && containerEle.contains(document.activeElement)) {
            e.preventDefault();
            store.update("areShortcutsPressed", true);
          }
        };
        React__namespace.useEffect(function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          document.addEventListener("keydown", handleKeydown);
          containerEle.addEventListener("mouseenter", handleMouseEnter);
          containerEle.addEventListener("mouseleave", handleMouseLeave);
          return function() {
            document.removeEventListener("keydown", handleKeydown);
            containerEle.removeEventListener("mouseenter", handleMouseEnter);
            containerEle.removeEventListener("mouseleave", handleMouseLeave);
          };
        }, [containerRef.current]);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var PORTAL_OFFSET$1 = { left: 0, top: 8 };
      var SearchPopover = function(_a) {
        var store = _a.store, onToggle = _a.onToggle;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var _b = React__namespace.useState(false), isQuerying = _b[0], setIsQuerying = _b[1];
        var _c = React__namespace.useState(false), searchDone = _c[0], setSearchDone = _c[1];
        var isRtl = direction === core.TextDirection.RightToLeft;
        var _d = useSearch(store), clearKeyword = _d.clearKeyword, changeMatchCase = _d.changeMatchCase, changeWholeWords = _d.changeWholeWords, currentMatch = _d.currentMatch, jumpToNextMatch = _d.jumpToNextMatch, jumpToPreviousMatch = _d.jumpToPreviousMatch, keyword = _d.keyword, matchCase = _d.matchCase, numberOfMatches = _d.numberOfMatches, wholeWords = _d.wholeWords, search = _d.search, setKeyword = _d.setKeyword;
        var performSearch = function(cb) {
          setIsQuerying(true);
          search().then(function(_) {
            setIsQuerying(false);
            setSearchDone(true);
            cb && cb();
          });
        };
        var onKeydownSearch = function(e) {
          if (e.key === "Enter" && keyword) {
            searchDone ? jumpToNextMatch() : performSearch();
          }
        };
        var onChangeMatchCase = function(e) {
          setSearchDone(false);
          changeMatchCase(e.target.checked);
        };
        var onChangeWholeWords = function(e) {
          setSearchDone(false);
          changeWholeWords(e.target.checked);
        };
        var onClose = function() {
          onToggle();
          clearKeyword();
        };
        var onChangeKeyword = function(value) {
          setSearchDone(false);
          setKeyword(value);
        };
        React__namespace.useEffect(function() {
          var initialKeyword = store.get("initialKeyword");
          if (initialKeyword && initialKeyword.length === 1 && keyword) {
            performSearch(function() {
              store.update("initialKeyword", []);
            });
          }
        }, []);
        var searchLabel = l10n && l10n.search ? l10n.search.enterToSearch : "Enter to search";
        var previousMatchLabel = l10n && l10n.search ? l10n.search.previousMatch : "Previous match";
        var nextMatchLabel = l10n && l10n.search ? l10n.search.nextMatch : "Next match";
        var closeButtonLabel = l10n && l10n.search ? l10n.search.close : "Close";
        return React__namespace.createElement(
          "div",
          { className: "rpv-search__popover" },
          React__namespace.createElement(
            "div",
            { className: "rpv-search__popover-input-counter" },
            React__namespace.createElement(core.TextBox, { ariaLabel: searchLabel, autoFocus: true, placeholder: searchLabel, type: "text", value: keyword, onChange: onChangeKeyword, onKeyDown: onKeydownSearch }),
            React__namespace.createElement(
              "div",
              { className: core.classNames({
                "rpv-search__popover-counter": true,
                "rpv-search__popover-counter--ltr": !isRtl,
                "rpv-search__popover-counter--rtl": isRtl
              }) },
              isQuerying && React__namespace.createElement(core.Spinner, { testId: "search__popover-searching", size: "1rem" }),
              !isQuerying && React__namespace.createElement(
                "span",
                { "data-testid": "search__popover-num-matches" },
                currentMatch,
                "/",
                numberOfMatches
              )
            )
          ),
          React__namespace.createElement(
            "label",
            { className: "rpv-search__popover-label" },
            React__namespace.createElement("input", { className: "rpv-search__popover-label-checkbox", "data-testid": "search__popover-match-case", checked: matchCase, type: "checkbox", onChange: onChangeMatchCase }),
            " ",
            l10n && l10n.search ? l10n.search.matchCase : "Match case"
          ),
          React__namespace.createElement(
            "label",
            { className: "rpv-search__popover-label" },
            React__namespace.createElement("input", { className: "rpv-search__popover-label-checkbox", checked: wholeWords, "data-testid": "search__popover-whole-words", type: "checkbox", onChange: onChangeWholeWords }),
            " ",
            l10n && l10n.search ? l10n.search.wholeWords : "Whole words"
          ),
          React__namespace.createElement(
            "div",
            { className: "rpv-search__popover-footer" },
            React__namespace.createElement(
              "div",
              { className: "rpv-search__popover-footer-item" },
              React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "search-previous-match", position: isRtl ? core.Position.BottomRight : core.Position.BottomCenter, target: React__namespace.createElement(
                core.MinimalButton,
                { ariaLabel: previousMatchLabel, isDisabled: currentMatch <= 1, onClick: jumpToPreviousMatch },
                React__namespace.createElement(PreviousIcon, null)
              ), content: function() {
                return previousMatchLabel;
              }, offset: PORTAL_OFFSET$1 })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-search__popover-footer-item" },
              React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "search-next-match", position: core.Position.BottomCenter, target: React__namespace.createElement(
                core.MinimalButton,
                { ariaLabel: nextMatchLabel, isDisabled: currentMatch > numberOfMatches - 1, onClick: jumpToNextMatch },
                React__namespace.createElement(NextIcon, null)
              ), content: function() {
                return nextMatchLabel;
              }, offset: PORTAL_OFFSET$1 })
            ),
            React__namespace.createElement(
              "div",
              { className: core.classNames({
                "rpv-search__popover-footer-button": true,
                "rpv-search__popover-footer-button--ltr": !isRtl,
                "rpv-search__popover-footer-button--rtl": isRtl
              }) },
              React__namespace.createElement(core.Button, { onClick: onClose }, closeButtonLabel)
            )
          )
        );
      };
      var ShowSearchPopoverDecorator = function(_a) {
        var children = _a.children, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.search ? l10n.search.search : "Search";
        var icon = React__namespace.createElement(SearchIcon, null);
        return children({ icon, label, onClick });
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var ShowSearchPopoverButton = function(_a) {
        var enableShortcuts = _a.enableShortcuts, store = _a.store, onClick = _a.onClick;
        var ariaKeyShortcuts = enableShortcuts ? core.isMac() ? "Meta+F" : "Ctrl+F" : "";
        var handleShortcutsPressed = function(areShortcutsPressed) {
          if (areShortcutsPressed) {
            onClick();
          }
        };
        React__namespace.useEffect(function() {
          store.subscribe("areShortcutsPressed", handleShortcutsPressed);
          return function() {
            store.unsubscribe("areShortcutsPressed", handleShortcutsPressed);
          };
        }, []);
        return React__namespace.createElement(ShowSearchPopoverDecorator, { onClick }, function(p) {
          return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "search-popover", position: core.Position.BottomCenter, target: React__namespace.createElement(core.MinimalButton, { ariaKeyShortcuts, ariaLabel: p.label, testId: "search__popover-button", onClick }, p.icon), content: function() {
            return p.label;
          }, offset: TOOLTIP_OFFSET });
        });
      };
      var PORTAL_OFFSET = { left: 0, top: 8 };
      var ShowSearchPopover = function(_a) {
        var children = _a.children, enableShortcuts = _a.enableShortcuts, store = _a.store;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var portalPosition = direction === core.TextDirection.RightToLeft ? core.Position.BottomRight : core.Position.BottomLeft;
        var defaultChildren = function(props) {
          return React__namespace.createElement(ShowSearchPopoverButton, __assign({ enableShortcuts, store }, props));
        };
        var render = children || defaultChildren;
        return React__namespace.createElement(core.Popover, { ariaControlsSuffix: "search", lockScroll: false, position: portalPosition, target: function(toggle) {
          return render({
            onClick: toggle
          });
        }, content: function(toggle) {
          return React__namespace.createElement(SearchPopover, { store, onToggle: toggle });
        }, offset: PORTAL_OFFSET, closeOnClickOutside: false, closeOnEscape: true });
      };
      var normalizeKeywords = function(keyword) {
        return Array.isArray(keyword) ? keyword.map(function(k) {
          return normalizeSingleKeyword(k);
        }) : [normalizeSingleKeyword(keyword)];
      };
      var searchPlugin = function(props) {
        var searchPluginProps = React__namespace.useMemo(function() {
          return Object.assign({}, { enableShortcuts: true, onHighlightKeyword: function() {
          } }, props);
        }, []);
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            initialKeyword: props && props.keyword ? Array.isArray(props.keyword) ? props.keyword : [props.keyword] : [],
            keyword: props && props.keyword ? normalizeKeywords(props.keyword) : [EMPTY_KEYWORD_REGEXP],
            matchPosition: {
              matchIndex: -1,
              pageIndex: -1
            },
            renderStatus: /* @__PURE__ */ new Map()
          });
        }, []);
        var _a = useSearch(store), clearKeyword = _a.clearKeyword, jumpToMatch = _a.jumpToMatch, jumpToNextMatch = _a.jumpToNextMatch, jumpToPreviousMatch = _a.jumpToPreviousMatch, searchFor = _a.searchFor, setKeywords = _a.setKeywords, setTargetPages = _a.setTargetPages;
        var SearchDecorator = function(props2) {
          return React__namespace.createElement(Search, __assign({}, props2, { store }));
        };
        var ShowSearchPopoverDecorator2 = function(props2) {
          return React__namespace.createElement(ShowSearchPopover, __assign({ enableShortcuts: searchPluginProps.enableShortcuts }, props2, { store }));
        };
        var ShowSearchPopoverButtonDecorator = function() {
          return React__namespace.createElement(ShowSearchPopoverDecorator2, null, function(props2) {
            return React__namespace.createElement(ShowSearchPopoverButton, __assign({ enableShortcuts: searchPluginProps.enableShortcuts, store }, props2));
          });
        };
        var renderViewer = function(renderViewerProps) {
          var currentSlot = renderViewerProps.slot;
          if (currentSlot.subSlot) {
            currentSlot.subSlot.children = React__namespace.createElement(
              React__namespace.Fragment,
              null,
              searchPluginProps.enableShortcuts && React__namespace.createElement(ShortcutHandler, { containerRef: renderViewerProps.containerRef, store }),
              currentSlot.subSlot.children
            );
          }
          return currentSlot;
        };
        var renderPageLayer = function(renderProps) {
          return React__namespace.createElement(Highlights, { key: renderProps.pageIndex, numPages: renderProps.doc.numPages, pageIndex: renderProps.pageIndex, renderHighlights: props === null || props === void 0 ? void 0 : props.renderHighlights, store, onHighlightKeyword: searchPluginProps.onHighlightKeyword });
        };
        return {
          install: function(pluginFunctions) {
            var initialKeyword = props && props.keyword ? Array.isArray(props.keyword) ? props.keyword : [props.keyword] : [];
            var keyword = props && props.keyword ? normalizeKeywords(props.keyword) : [EMPTY_KEYWORD_REGEXP];
            store.update("initialKeyword", initialKeyword);
            store.update("jumpToDestination", pluginFunctions.jumpToDestination);
            store.update("jumpToPage", pluginFunctions.jumpToPage);
            store.update("keyword", keyword);
          },
          renderPageLayer,
          renderViewer,
          uninstall: function(props2) {
            var renderStatus = store.get("renderStatus");
            if (renderStatus) {
              renderStatus.clear();
            }
          },
          onDocumentLoad: function(props2) {
            store.update("doc", props2.doc);
          },
          onTextLayerRender: function(props2) {
            var renderStatus = store.get("renderStatus");
            if (renderStatus) {
              renderStatus = renderStatus.set(props2.pageIndex, props2);
              store.update("renderStatus", renderStatus);
            }
          },
          Search: SearchDecorator,
          ShowSearchPopover: ShowSearchPopoverDecorator2,
          ShowSearchPopoverButton: ShowSearchPopoverButtonDecorator,
          clearHighlights: function() {
            clearKeyword();
          },
          highlight: function(keyword) {
            var keywords = Array.isArray(keyword) ? keyword : [keyword];
            setKeywords(keywords);
            return searchFor(keywords);
          },
          jumpToMatch,
          jumpToNextMatch,
          jumpToPreviousMatch,
          setTargetPages
        };
      };
      exports2.NextIcon = NextIcon;
      exports2.PreviousIcon = PreviousIcon;
      exports2.SearchIcon = SearchIcon;
      exports2.searchPlugin = searchPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/search/lib/index.js
  var require_lib14 = __commonJS({
    "node_modules/@react-pdf-viewer/search/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_search();
      }
    }
  });

  // node_modules/@react-pdf-viewer/theme/lib/cjs/theme.js
  var require_theme = __commonJS({
    "node_modules/@react-pdf-viewer/theme/lib/cjs/theme.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var DarkIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M19.5,15.106l2.4-2.4a1,1,0,0,0,0-1.414l-2.4-2.4V5.5a1,1,0,0,0-1-1H15.106l-2.4-2.4a1,1,0,0,0-1.414,0l-2.4,2.4H5.5a1,1,0,0,0-1,1V8.894l-2.4,2.4a1,1,0,0,0,0,1.414l2.4,2.4V18.5a1,1,0,0,0,1,1H8.894l2.4,2.4a1,1,0,0,0,1.414,0l2.4-2.4H18.5a1,1,0,0,0,1-1Z" }),
          React__namespace.createElement("path", { d: "M10,6.349a6,6,0,0,1,0,11.3,6,6,0,1,0,0-11.3Z" })
        );
      };
      var LightIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M19.491,15.106l2.4-2.4a1,1,0,0,0,0-1.414l-2.4-2.4V5.5a1,1,0,0,0-1-1H15.1L12.7,2.1a1,1,0,0,0-1.414,0l-2.4,2.4H5.491a1,1,0,0,0-1,1V8.894l-2.4,2.4a1,1,0,0,0,0,1.414l2.4,2.4V18.5a1,1,0,0,0,1,1H8.885l2.4,2.4a1,1,0,0,0,1.414,0l2.4-2.4h3.394a1,1,0,0,0,1-1Z" }),
          React__namespace.createElement("path", { d: "M11.491,6c4,0,6,2.686,6,6s-2,6-6,6Z" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var SwitchThemeButton = function(_a) {
        var onClick = _a.onClick;
        var theme = React__namespace.useContext(core.ThemeContext);
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var isDarkTheme = theme.currentTheme === "dark";
        var label = l10n && l10n.theme ? isDarkTheme ? l10n.theme.switchLightTheme : l10n.theme.switchDarkTheme : isDarkTheme ? "Switch to the light theme" : "Switch to the dark theme";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "theme-switch", position: core.Position.BottomCenter, target: React__namespace.createElement(core.MinimalButton, { ariaLabel: label, testId: "theme__switch-button", onClick }, isDarkTheme ? React__namespace.createElement(LightIcon, null) : React__namespace.createElement(DarkIcon, null)), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var SwitchTheme = function(_a) {
        var children = _a.children;
        var theme = React__namespace.useContext(core.ThemeContext);
        var defaultChildern = function(props) {
          return React__namespace.createElement(SwitchThemeButton, { onClick: props.onClick });
        };
        var render = children || defaultChildern;
        return render({
          onClick: function() {
            return theme.setCurrentTheme(theme.currentTheme === "dark" ? "light" : "dark");
          }
        });
      };
      var SwitchThemeMenuItem = function(_a) {
        var onClick = _a.onClick;
        var theme = React__namespace.useContext(core.ThemeContext);
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var isDarkTheme = theme.currentTheme === "dark";
        var label = l10n && l10n.theme ? isDarkTheme ? l10n.theme.switchLightTheme : l10n.theme.switchDarkTheme : isDarkTheme ? "Switch to the light theme" : "Switch to the dark theme";
        return React__namespace.createElement(core.MenuItem, { icon: isDarkTheme ? React__namespace.createElement(LightIcon, null) : React__namespace.createElement(DarkIcon, null), testId: "theme__switch-menu", onClick }, label);
      };
      var themePlugin = function() {
        var SwitchThemeDecorator = function(props) {
          return React__namespace.createElement(SwitchTheme, __assign({}, props));
        };
        var SwitchThemeButtonDecorator = function() {
          return React__namespace.createElement(SwitchThemeDecorator, null, function(props) {
            return React__namespace.createElement(SwitchThemeButton, __assign({}, props));
          });
        };
        var SwitchThemeMenuItemDecorator = function(props) {
          return React__namespace.createElement(SwitchThemeDecorator, null, function(p) {
            return React__namespace.createElement(SwitchThemeMenuItem, { onClick: function() {
              p.onClick();
              props.onClick();
            } });
          });
        };
        return {
          SwitchTheme: SwitchThemeDecorator,
          SwitchThemeButton: SwitchThemeButtonDecorator,
          SwitchThemeMenuItem: SwitchThemeMenuItemDecorator
        };
      };
      exports2.DarkIcon = DarkIcon;
      exports2.LightIcon = LightIcon;
      exports2.themePlugin = themePlugin;
    }
  });

  // node_modules/@react-pdf-viewer/theme/lib/index.js
  var require_lib15 = __commonJS({
    "node_modules/@react-pdf-viewer/theme/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_theme();
      }
    }
  });

  // node_modules/@react-pdf-viewer/zoom/lib/cjs/zoom.js
  var require_zoom = __commonJS({
    "node_modules/@react-pdf-viewer/zoom/lib/cjs/zoom.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var ZoomInIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { ignoreDirection: true, size: 16 },
          React__namespace.createElement("path", { d: "M10.5,0.499c5.523,0,10,4.477,10,10s-4.477,10-10,10s-10-4.477-10-10S4.977,0.499,10.5,0.499z\n            M23.5,23.499\n            l-5.929-5.929\n            M5.5,10.499h10\n            M10.5,5.499v10" })
        );
      };
      var ZoomOutIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { ignoreDirection: true, size: 16 },
          React__namespace.createElement("path", { d: "M10.5,0.499c5.523,0,10,4.477,10,10s-4.477,10-10,10s-10-4.477-10-10S4.977,0.499,10.5,0.499z\n            M23.5,23.499\n            l-5.929-5.929\n            M5.5,10.499h10" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var useZoom = function(store) {
        var _a = React__namespace.useState(store.get("scale") || 0), scale = _a[0], setScale = _a[1];
        var handleScaleChanged = function(currentScale) {
          setScale(currentScale);
        };
        React__namespace.useEffect(function() {
          store.subscribe("scale", handleScaleChanged);
          return function() {
            store.unsubscribe("scale", handleScaleChanged);
          };
        }, []);
        return { scale };
      };
      var CurrentScale = function(_a) {
        var children = _a.children, store = _a.store;
        var scale = useZoom(store).scale;
        var defaultChildren = function(props) {
          return React__namespace.createElement(React__namespace.Fragment, null, "".concat(Math.round(props.scale * 100), "%"));
        };
        var render = children || defaultChildren;
        return render({ scale });
      };
      var WHEEL_EVENT_OPTIONS = {
        passive: false
      };
      var svgElement = null;
      var createSvgElement = function() {
        return svgElement || (svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg"));
      };
      var PinchZoom = function(_a) {
        var pagesContainerRef = _a.pagesContainerRef, store = _a.store;
        var zoomTo = core.useDebounceCallback(function(scale) {
          var zoom = store.get("zoom");
          if (zoom) {
            zoom(scale);
          }
        }, 40);
        var handleWheelEvent = function(e) {
          if (!e.ctrlKey) {
            return;
          }
          e.preventDefault();
          var target = e.target;
          var rect = target.getBoundingClientRect();
          var scaleDiff = 1 - e.deltaY / 100;
          var originX = e.clientX - rect.left;
          var originY = e.clientY - rect.top;
          var currentScale = store.get("scale");
          var matrix = createSvgElement().createSVGMatrix().translate(originX, originY).scale(scaleDiff).translate(-originX, -originY).scale(currentScale);
          zoomTo(matrix.a);
        };
        core.useIsomorphicLayoutEffect(function() {
          var pagesContainer = pagesContainerRef.current;
          if (!pagesContainer) {
            return;
          }
          pagesContainer.addEventListener("wheel", handleWheelEvent, WHEEL_EVENT_OPTIONS);
          return function() {
            pagesContainer.removeEventListener("wheel", handleWheelEvent);
          };
        }, []);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var LEVELS = [
        0.1,
        0.2,
        0.3,
        0.4,
        0.5,
        0.6,
        0.7,
        0.8,
        0.9,
        1,
        1.1,
        1.3,
        1.5,
        1.7,
        1.9,
        2.1,
        2.4,
        2.7,
        3,
        3.3,
        3.7,
        4.1,
        4.6,
        5.1,
        5.7,
        6.3,
        7,
        7.7,
        8.5,
        9.4,
        10
      ];
      var increase = function(currentLevel) {
        var found = LEVELS.find(function(item) {
          return item > currentLevel;
        });
        return found || currentLevel;
      };
      var decrease = function(currentLevel) {
        var found = LEVELS.findIndex(function(item) {
          return item >= currentLevel;
        });
        return found === -1 || found === 0 ? currentLevel : LEVELS[found - 1];
      };
      var ShortcutHandler = function(_a) {
        var containerRef = _a.containerRef, store = _a.store;
        var keydownHandler = function(e) {
          if (e.shiftKey || e.altKey) {
            return;
          }
          var isCommandPressed = core.isMac() ? e.metaKey : e.ctrlKey;
          if (!isCommandPressed) {
            return;
          }
          var containerEle = containerRef.current;
          if (!containerEle || !document.activeElement || !containerEle.contains(document.activeElement)) {
            return;
          }
          var zoom = store.get("zoom");
          if (!zoom) {
            return;
          }
          var scale = store.get("scale") || 1;
          var newScale = 1;
          switch (e.key) {
            case "-":
              newScale = decrease(scale);
              break;
            case "=":
              newScale = increase(scale);
              break;
            case "0":
              newScale = 1;
              break;
            default:
              newScale = scale;
              break;
          }
          if (newScale !== scale) {
            e.preventDefault();
            zoom(newScale);
          }
        };
        React__namespace.useEffect(function() {
          var containerEle = containerRef.current;
          if (!containerEle) {
            return;
          }
          document.addEventListener("keydown", keydownHandler);
          return function() {
            document.removeEventListener("keydown", keydownHandler);
          };
        }, [containerRef.current]);
        return React__namespace.createElement(React__namespace.Fragment, null);
      };
      var DEFAULT_LEVELS = [0.5, 0.75, 1, 1.25, 1.5, 2, 3, 4];
      var PORTAL_OFFSET = { left: 0, top: 8 };
      var ZoomPopover = function(_a) {
        var _b = _a.levels, levels = _b === void 0 ? DEFAULT_LEVELS : _b, scale = _a.scale, onZoom = _a.onZoom;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var getSpcialLevelLabel = function(level) {
          switch (level) {
            case core.SpecialZoomLevel.ActualSize:
              return l10n && l10n.zoom ? l10n.zoom.actualSize : "Actual size";
            case core.SpecialZoomLevel.PageFit:
              return l10n && l10n.zoom ? l10n.zoom.pageFit : "Page fit";
            case core.SpecialZoomLevel.PageWidth:
              return l10n && l10n.zoom ? l10n.zoom.pageWidth : "Page width";
          }
        };
        var zoomDocumentLabel = l10n && l10n.zoom ? l10n.zoom.zoomDocument : "Zoom document";
        var renderTarget = function(toggle) {
          var click = function() {
            toggle();
          };
          return React__namespace.createElement(
            core.MinimalButton,
            { ariaLabel: zoomDocumentLabel, testId: "zoom__popover-target", onClick: click },
            React__namespace.createElement(
              "span",
              { className: "rpv-zoom__popover-target" },
              React__namespace.createElement(
                "span",
                { "data-testid": "zoom__popover-target-scale", className: core.classNames({
                  "rpv-zoom__popover-target-scale": true,
                  "rpv-zoom__popover-target-scale--ltr": !isRtl,
                  "rpv-zoom__popover-target-scale--rtl": isRtl
                }) },
                Math.round(scale * 100),
                "%"
              ),
              React__namespace.createElement("span", { className: "rpv-zoom__popover-target-arrow" })
            )
          );
        };
        var renderContent = function(toggle) {
          return React__namespace.createElement(
            core.Menu,
            null,
            Object.keys(core.SpecialZoomLevel).map(function(k) {
              var level = k;
              var clickMenuItem = function() {
                toggle();
                onZoom(level);
              };
              return React__namespace.createElement(core.MenuItem, { key: level, onClick: clickMenuItem }, getSpcialLevelLabel(level));
            }),
            React__namespace.createElement(core.MenuDivider, null),
            levels.map(function(level) {
              var clickMenuItem = function() {
                toggle();
                onZoom(level);
              };
              return React__namespace.createElement(core.MenuItem, { key: level, onClick: clickMenuItem }, "".concat(Math.round(level * 100), "%"));
            })
          );
        };
        return React__namespace.createElement(core.Popover, { ariaControlsSuffix: "zoom", ariaHasPopup: "menu", position: core.Position.BottomCenter, target: renderTarget, content: renderContent, offset: PORTAL_OFFSET, closeOnClickOutside: true, closeOnEscape: true });
      };
      var Zoom = function(_a) {
        var children = _a.children, levels = _a.levels, store = _a.store;
        var scale = useZoom(store).scale;
        var zoomTo = function(newLevel) {
          var zoom = store.get("zoom");
          if (zoom) {
            zoom(newLevel);
          }
        };
        var defaultChildren = function(props) {
          return React__namespace.createElement(ZoomPopover, { levels, scale: props.scale, onZoom: props.onZoom });
        };
        var render = children || defaultChildren;
        return render({
          scale,
          onZoom: zoomTo
        });
      };
      var TOOLTIP_OFFSET$1 = { left: 0, top: 8 };
      var ZoomInButton = function(_a) {
        var enableShortcuts = _a.enableShortcuts, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.zoom ? l10n.zoom.zoomIn : "Zoom in";
        var ariaKeyShortcuts = enableShortcuts ? core.isMac() ? "Meta+=" : "Ctrl+=" : "";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "zoom-in", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaKeyShortcuts, ariaLabel: label, testId: "zoom__in-button", onClick },
          React__namespace.createElement(ZoomInIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET$1 });
      };
      var ZoomIn = function(_a) {
        var children = _a.children, enableShortcuts = _a.enableShortcuts, store = _a.store;
        var scale = useZoom(store).scale;
        var zoomIn = function() {
          var zoom = store.get("zoom");
          if (zoom) {
            var newLevel = increase(scale);
            zoom(newLevel);
          }
        };
        var render = children || ZoomInButton;
        return render({
          enableShortcuts,
          onClick: zoomIn
        });
      };
      var ZoomInMenuItem = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.zoom ? l10n.zoom.zoomIn : "Zoom in";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(ZoomInIcon, null), testId: "zoom__in-menu", onClick }, label);
      };
      var TOOLTIP_OFFSET = { left: 0, top: 8 };
      var ZoomOutButton = function(_a) {
        var enableShortcuts = _a.enableShortcuts, onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.zoom ? l10n.zoom.zoomOut : "Zoom out";
        var ariaKeyShortcuts = enableShortcuts ? core.isMac() ? "Meta+-" : "Ctrl+-" : "";
        return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "zoom-out", position: core.Position.BottomCenter, target: React__namespace.createElement(
          core.MinimalButton,
          { ariaKeyShortcuts, ariaLabel: label, testId: "zoom__out-button", onClick },
          React__namespace.createElement(ZoomOutIcon, null)
        ), content: function() {
          return label;
        }, offset: TOOLTIP_OFFSET });
      };
      var ZoomOut = function(_a) {
        var children = _a.children, enableShortcuts = _a.enableShortcuts, store = _a.store;
        var scale = useZoom(store).scale;
        var zoomIn = function() {
          var zoom = store.get("zoom");
          if (zoom) {
            var newLevel = decrease(scale);
            zoom(newLevel);
          }
        };
        var render = children || ZoomOutButton;
        return render({
          enableShortcuts,
          onClick: zoomIn
        });
      };
      var ZoomOutMenuItem = function(_a) {
        var onClick = _a.onClick;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var label = l10n && l10n.zoom ? l10n.zoom.zoomOut : "Zoom out";
        return React__namespace.createElement(core.MenuItem, { icon: React__namespace.createElement(ZoomOutIcon, null), testId: "zoom__out-menu", onClick }, label);
      };
      var zoomPlugin = function(props) {
        var zoomPluginProps = React__namespace.useMemo(function() {
          return Object.assign({}, { enableShortcuts: true }, props);
        }, []);
        var store = React__namespace.useMemo(function() {
          return core.createStore({});
        }, []);
        var CurrentScaleDecorator = function(props2) {
          return React__namespace.createElement(CurrentScale, __assign({}, props2, { store }));
        };
        var ZoomInDecorator = function(props2) {
          return React__namespace.createElement(ZoomIn, __assign({ enableShortcuts: zoomPluginProps.enableShortcuts }, props2, { store }));
        };
        var ZoomInButtonDecorator = function() {
          return React__namespace.createElement(ZoomInDecorator, null, function(props2) {
            return React__namespace.createElement(ZoomInButton, __assign({}, props2));
          });
        };
        var ZoomInMenuItemDecorator = function(props2) {
          return React__namespace.createElement(ZoomInDecorator, null, function(p) {
            return React__namespace.createElement(ZoomInMenuItem, { onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var ZoomOutDecorator = function(props2) {
          return React__namespace.createElement(ZoomOut, __assign({ enableShortcuts: zoomPluginProps.enableShortcuts }, props2, { store }));
        };
        var ZoomOutButtonDecorator = function() {
          return React__namespace.createElement(ZoomOutDecorator, null, function(props2) {
            return React__namespace.createElement(ZoomOutButton, __assign({}, props2));
          });
        };
        var ZoomOutMenuItemDecorator = function(props2) {
          return React__namespace.createElement(ZoomOutDecorator, null, function(p) {
            return React__namespace.createElement(ZoomOutMenuItem, { onClick: function() {
              p.onClick();
              props2.onClick();
            } });
          });
        };
        var ZoomDecorator = function(props2) {
          return React__namespace.createElement(Zoom, __assign({}, props2, { store }));
        };
        var ZoomPopoverDecorator = function(zoomPopverProps) {
          return React__namespace.createElement(ZoomDecorator, null, function(props2) {
            return React__namespace.createElement(ZoomPopover, __assign({ levels: zoomPopverProps === null || zoomPopverProps === void 0 ? void 0 : zoomPopverProps.levels }, props2));
          });
        };
        var renderViewer = function(props2) {
          var slot = props2.slot;
          if (!zoomPluginProps.enableShortcuts) {
            return slot;
          }
          var updateSlot = {
            children: React__namespace.createElement(
              React__namespace.Fragment,
              null,
              React__namespace.createElement(ShortcutHandler, { containerRef: props2.containerRef, store }),
              React__namespace.createElement(PinchZoom, { pagesContainerRef: props2.pagesContainerRef, store }),
              slot.children
            )
          };
          return __assign(__assign({}, slot), updateSlot);
        };
        return {
          renderViewer,
          install: function(pluginFunctions) {
            store.update("zoom", pluginFunctions.zoom);
          },
          onViewerStateChange: function(viewerState) {
            store.update("scale", viewerState.scale);
            return viewerState;
          },
          zoomTo: function(scale) {
            var zoom = store.get("zoom");
            if (zoom) {
              zoom(scale);
            }
          },
          CurrentScale: CurrentScaleDecorator,
          ZoomIn: ZoomInDecorator,
          ZoomInButton: ZoomInButtonDecorator,
          ZoomInMenuItem: ZoomInMenuItemDecorator,
          ZoomOut: ZoomOutDecorator,
          ZoomOutButton: ZoomOutButtonDecorator,
          ZoomOutMenuItem: ZoomOutMenuItemDecorator,
          Zoom: ZoomDecorator,
          ZoomPopover: ZoomPopoverDecorator
        };
      };
      exports2.ZoomInIcon = ZoomInIcon;
      exports2.ZoomOutIcon = ZoomOutIcon;
      exports2.zoomPlugin = zoomPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/zoom/lib/index.js
  var require_lib16 = __commonJS({
    "node_modules/@react-pdf-viewer/zoom/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_zoom();
      }
    }
  });

  // node_modules/@react-pdf-viewer/toolbar/lib/cjs/toolbar.js
  var require_toolbar = __commonJS({
    "node_modules/@react-pdf-viewer/toolbar/lib/cjs/toolbar.js"(exports2) {
      "use strict";
      var core = require_lib();
      var selectionMode = require_lib5();
      var React = require_react();
      var fullScreen = require_lib6();
      var getFile = require_lib7();
      var open = require_lib8();
      var pageNavigation = require_lib9();
      var print = require_lib10();
      var properties = require_lib11();
      var rotate = require_lib12();
      var scrollMode = require_lib13();
      var search = require_lib14();
      var theme = require_lib15();
      var zoom = require_lib16();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var MoreIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M12,0.5c1.381,0,2.5,1.119,2.5,2.5S13.381,5.5,12,5.5S9.5,4.381,9.5,3S10.619,0.5,12,0.5z\n            M12,9.5\n            c1.381,0,2.5,1.119,2.5,2.5s-1.119,2.5-2.5,2.5S9.5,13.381,9.5,12S10.619,9.5,12,9.5z\n            M12,18.5c1.381,0,2.5,1.119,2.5,2.5\n            s-1.119,2.5-2.5,2.5S9.5,22.381,9.5,21S10.619,18.5,12,18.5z" })
        );
      };
      var PORTAL_OFFSET = { left: 0, top: 8 };
      var MoreActionsPopover = function(_a) {
        var toolbarSlot = _a.toolbarSlot;
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var portalPosition = direction === core.TextDirection.RightToLeft ? core.Position.BottomLeft : core.Position.BottomRight;
        var DownloadMenuItem = toolbarSlot.DownloadMenuItem, EnterFullScreenMenuItem = toolbarSlot.EnterFullScreenMenuItem, GoToFirstPageMenuItem = toolbarSlot.GoToFirstPageMenuItem, GoToLastPageMenuItem = toolbarSlot.GoToLastPageMenuItem, GoToNextPageMenuItem = toolbarSlot.GoToNextPageMenuItem, GoToPreviousPageMenuItem = toolbarSlot.GoToPreviousPageMenuItem, OpenMenuItem = toolbarSlot.OpenMenuItem, PrintMenuItem = toolbarSlot.PrintMenuItem, RotateBackwardMenuItem = toolbarSlot.RotateBackwardMenuItem, RotateForwardMenuItem = toolbarSlot.RotateForwardMenuItem, ShowPropertiesMenuItem = toolbarSlot.ShowPropertiesMenuItem, SwitchScrollModeMenuItem = toolbarSlot.SwitchScrollModeMenuItem, SwitchSelectionModeMenuItem = toolbarSlot.SwitchSelectionModeMenuItem, SwitchViewModeMenuItem = toolbarSlot.SwitchViewModeMenuItem, SwitchThemeMenuItem = toolbarSlot.SwitchThemeMenuItem;
        var renderTarget = function(toggle, opened) {
          var label = l10n && l10n.toolbar ? l10n.toolbar.moreActions : "More actions";
          return React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "toolbar-more-actions", position: portalPosition, target: React__namespace.createElement(
            core.MinimalButton,
            { ariaLabel: label, isSelected: opened, testId: "toolbar__more-actions-popover-target", onClick: toggle },
            React__namespace.createElement(MoreIcon, null)
          ), content: function() {
            return label;
          }, offset: PORTAL_OFFSET });
        };
        var renderContent = function(toggle) {
          return React__namespace.createElement(
            core.Menu,
            null,
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(SwitchThemeMenuItem, { onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(EnterFullScreenMenuItem, { onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(OpenMenuItem, null)
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(PrintMenuItem, { onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(DownloadMenuItem, { onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(core.MenuDivider, null)
            ),
            React__namespace.createElement(GoToFirstPageMenuItem, { onClick: toggle }),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(GoToPreviousPageMenuItem, { onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--block rpv-core__display--hidden-medium" },
              React__namespace.createElement(GoToNextPageMenuItem, { onClick: toggle })
            ),
            React__namespace.createElement(GoToLastPageMenuItem, { onClick: toggle }),
            React__namespace.createElement(core.MenuDivider, null),
            React__namespace.createElement(RotateForwardMenuItem, { onClick: toggle }),
            React__namespace.createElement(RotateBackwardMenuItem, { onClick: toggle }),
            React__namespace.createElement(core.MenuDivider, null),
            React__namespace.createElement(SwitchSelectionModeMenuItem, { mode: selectionMode.SelectionMode.Text, onClick: toggle }),
            React__namespace.createElement(SwitchSelectionModeMenuItem, { mode: selectionMode.SelectionMode.Hand, onClick: toggle }),
            React__namespace.createElement(core.MenuDivider, null),
            React__namespace.createElement(SwitchScrollModeMenuItem, { mode: core.ScrollMode.Page, onClick: toggle }),
            React__namespace.createElement(SwitchScrollModeMenuItem, { mode: core.ScrollMode.Vertical, onClick: toggle }),
            React__namespace.createElement(SwitchScrollModeMenuItem, { mode: core.ScrollMode.Horizontal, onClick: toggle }),
            React__namespace.createElement(SwitchScrollModeMenuItem, { mode: core.ScrollMode.Wrapped, onClick: toggle }),
            React__namespace.createElement(core.MenuDivider, null),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--hidden rpv-core__display--block-small" },
              React__namespace.createElement(SwitchViewModeMenuItem, { mode: core.ViewMode.SinglePage, onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--hidden rpv-core__display--block-small" },
              React__namespace.createElement(SwitchViewModeMenuItem, { mode: core.ViewMode.DualPage, onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--hidden rpv-core__display--block-small" },
              React__namespace.createElement(SwitchViewModeMenuItem, { mode: core.ViewMode.DualPageWithCover, onClick: toggle })
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-core__display--hidden rpv-core__display--block-small" },
              React__namespace.createElement(core.MenuDivider, null)
            ),
            React__namespace.createElement(ShowPropertiesMenuItem, { onClick: toggle })
          );
        };
        return React__namespace.createElement(core.Popover, { ariaControlsSuffix: "toolbar-more-actions", ariaHasPopup: "menu", position: portalPosition, target: renderTarget, content: renderContent, offset: PORTAL_OFFSET, closeOnClickOutside: true, closeOnEscape: true });
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var renderDefaultToolbar = function(transformToolbarSlot) {
        return function(defaultToolbarSlot) {
          var toolbarSlot = React__namespace.useMemo(function() {
            return transformToolbarSlot(defaultToolbarSlot);
          }, []);
          var direction = React__namespace.useContext(core.ThemeContext).direction;
          var isRtl = direction === core.TextDirection.RightToLeft;
          var CurrentPageInput = toolbarSlot.CurrentPageInput, Download = toolbarSlot.Download, EnterFullScreen = toolbarSlot.EnterFullScreen, GoToNextPage = toolbarSlot.GoToNextPage, GoToPreviousPage = toolbarSlot.GoToPreviousPage, NumberOfPages = toolbarSlot.NumberOfPages, Open = toolbarSlot.Open, Print = toolbarSlot.Print, ShowSearchPopover = toolbarSlot.ShowSearchPopover, SwitchTheme = toolbarSlot.SwitchTheme, Zoom = toolbarSlot.Zoom, ZoomIn = toolbarSlot.ZoomIn, ZoomOut = toolbarSlot.ZoomOut;
          return React__namespace.createElement(
            "div",
            { "data-testid": "toolbar", className: core.classNames({
              "rpv-toolbar": true,
              "rpv-toolbar--rtl": isRtl
            }), role: "toolbar", "aria-orientation": "horizontal" },
            React__namespace.createElement(
              "div",
              { className: "rpv-toolbar__left" },
              React__namespace.createElement(
                "div",
                { className: "rpv-toolbar__item" },
                React__namespace.createElement(ShowSearchPopover, null)
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-small" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(GoToPreviousPage, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-toolbar__item" },
                React__namespace.createElement(CurrentPageInput, null),
                React__namespace.createElement(
                  "span",
                  { className: "rpv-toolbar__label" },
                  React__namespace.createElement(NumberOfPages, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-small" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(GoToNextPage, null)
                )
              )
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-toolbar__center" },
              React__namespace.createElement(
                "div",
                { className: "rpv-toolbar__item" },
                React__namespace.createElement(ZoomOut, null)
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-small" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(Zoom, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-toolbar__item" },
                React__namespace.createElement(ZoomIn, null)
              )
            ),
            React__namespace.createElement(
              "div",
              { className: "rpv-toolbar__right" },
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-medium" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(SwitchTheme, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-medium" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(EnterFullScreen, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-medium" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(Open, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-medium" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(Download, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-core__display--hidden rpv-core__display--block-medium" },
                React__namespace.createElement(
                  "div",
                  { className: "rpv-toolbar__item" },
                  React__namespace.createElement(Print, null)
                )
              ),
              React__namespace.createElement(
                "div",
                { className: "rpv-toolbar__item" },
                React__namespace.createElement(MoreActionsPopover, { toolbarSlot })
              )
            )
          );
        };
      };
      var defaultTransform = function(slot) {
        var NumberOfPages = slot.NumberOfPages;
        return Object.assign({}, slot, {
          NumberOfPages: function() {
            return React__namespace.createElement(
              React__namespace.Fragment,
              null,
              "/ ",
              React__namespace.createElement(NumberOfPages, null)
            );
          }
        });
      };
      var DefaultToobar = function(toolbarSlot) {
        return renderDefaultToolbar(defaultTransform)(toolbarSlot);
      };
      var Toolbar = function(_a) {
        var children = _a.children, slot = _a.slot;
        var render = children || DefaultToobar;
        return render(slot);
      };
      var toolbarPlugin = function(props) {
        var fullScreenPluginInstance = fullScreen.fullScreenPlugin(props ? props.fullScreenPlugin : {});
        var getFilePluginInstance = getFile.getFilePlugin(props ? props.getFilePlugin : {});
        var openPluginInstance = open.openPlugin(props ? props.openPlugin : {});
        var pageNavigationPluginInstance = pageNavigation.pageNavigationPlugin(props ? props.pageNavigationPlugin : {});
        var printPluginInstance = print.printPlugin(props ? props.printPlugin : {});
        var propertiesPluginInstance = properties.propertiesPlugin();
        var rotatePluginInstance = rotate.rotatePlugin();
        var scrollModePluginInstance = scrollMode.scrollModePlugin();
        var searchPluginInstance = search.searchPlugin(props ? props.searchPlugin : {});
        var selectionModePluginInstance = selectionMode.selectionModePlugin(props ? props.selectionModePlugin : {});
        var themePluginInstance = theme.themePlugin();
        var zoomPluginInstance = zoom.zoomPlugin(props ? props.zoomPlugin : {});
        var plugins = [
          fullScreenPluginInstance,
          getFilePluginInstance,
          openPluginInstance,
          pageNavigationPluginInstance,
          printPluginInstance,
          propertiesPluginInstance,
          rotatePluginInstance,
          scrollModePluginInstance,
          searchPluginInstance,
          selectionModePluginInstance,
          themePluginInstance,
          zoomPluginInstance
        ];
        var ToolbarDecorator = React__namespace.useCallback(function(props2) {
          var EnterFullScreen = fullScreenPluginInstance.EnterFullScreen, EnterFullScreenMenuItem = fullScreenPluginInstance.EnterFullScreenMenuItem;
          var Download = getFilePluginInstance.Download, DownloadMenuItem = getFilePluginInstance.DownloadMenuItem;
          var Open = openPluginInstance.Open, OpenMenuItem = openPluginInstance.OpenMenuItem;
          var CurrentPageInput = pageNavigationPluginInstance.CurrentPageInput, CurrentPageLabel = pageNavigationPluginInstance.CurrentPageLabel, GoToFirstPage = pageNavigationPluginInstance.GoToFirstPage, GoToFirstPageMenuItem = pageNavigationPluginInstance.GoToFirstPageMenuItem, GoToLastPage = pageNavigationPluginInstance.GoToLastPage, GoToLastPageMenuItem = pageNavigationPluginInstance.GoToLastPageMenuItem, GoToNextPage = pageNavigationPluginInstance.GoToNextPage, GoToNextPageMenuItem = pageNavigationPluginInstance.GoToNextPageMenuItem, GoToPreviousPage = pageNavigationPluginInstance.GoToPreviousPage, GoToPreviousPageMenuItem = pageNavigationPluginInstance.GoToPreviousPageMenuItem, NumberOfPages = pageNavigationPluginInstance.NumberOfPages;
          var Print = printPluginInstance.Print, PrintMenuItem = printPluginInstance.PrintMenuItem;
          var ShowProperties = propertiesPluginInstance.ShowProperties, ShowPropertiesMenuItem = propertiesPluginInstance.ShowPropertiesMenuItem;
          var Rotate = rotatePluginInstance.Rotate, RotateBackwardMenuItem = rotatePluginInstance.RotateBackwardMenuItem, RotateForwardMenuItem = rotatePluginInstance.RotateForwardMenuItem;
          var SwitchScrollMode = scrollModePluginInstance.SwitchScrollMode, SwitchScrollModeMenuItem = scrollModePluginInstance.SwitchScrollModeMenuItem, SwitchViewMode = scrollModePluginInstance.SwitchViewMode, SwitchViewModeMenuItem = scrollModePluginInstance.SwitchViewModeMenuItem;
          var Search = searchPluginInstance.Search, ShowSearchPopover = searchPluginInstance.ShowSearchPopover;
          var SwitchSelectionMode = selectionModePluginInstance.SwitchSelectionMode, SwitchSelectionModeMenuItem = selectionModePluginInstance.SwitchSelectionModeMenuItem;
          var SwitchTheme = themePluginInstance.SwitchTheme, SwitchThemeMenuItem = themePluginInstance.SwitchThemeMenuItem;
          var CurrentScale = zoomPluginInstance.CurrentScale, Zoom = zoomPluginInstance.Zoom, ZoomIn = zoomPluginInstance.ZoomIn, ZoomInMenuItem = zoomPluginInstance.ZoomInMenuItem, ZoomOut = zoomPluginInstance.ZoomOut, ZoomOutMenuItem = zoomPluginInstance.ZoomOutMenuItem;
          return React__namespace.createElement(Toolbar, __assign({}, props2, { slot: {
            CurrentPageInput,
            CurrentPageLabel,
            CurrentScale,
            Download,
            DownloadMenuItem,
            EnterFullScreen,
            EnterFullScreenMenuItem,
            GoToFirstPage,
            GoToFirstPageMenuItem,
            GoToLastPage,
            GoToLastPageMenuItem,
            GoToNextPage,
            GoToNextPageMenuItem,
            GoToPreviousPage,
            GoToPreviousPageMenuItem,
            NumberOfPages,
            Open,
            OpenMenuItem,
            Print,
            PrintMenuItem,
            Rotate,
            RotateBackwardMenuItem,
            RotateForwardMenuItem,
            Search,
            ShowProperties,
            ShowPropertiesMenuItem,
            ShowSearchPopover,
            SwitchScrollMode,
            SwitchScrollModeMenuItem,
            SwitchSelectionMode,
            SwitchSelectionModeMenuItem,
            SwitchViewMode,
            SwitchViewModeMenuItem,
            SwitchTheme,
            SwitchThemeMenuItem,
            Zoom,
            ZoomIn,
            ZoomInMenuItem,
            ZoomOut,
            ZoomOutMenuItem
          } }));
        }, []);
        return {
          fullScreenPluginInstance,
          getFilePluginInstance,
          openPluginInstance,
          pageNavigationPluginInstance,
          printPluginInstance,
          propertiesPluginInstance,
          rotatePluginInstance,
          scrollModePluginInstance,
          searchPluginInstance,
          selectionModePluginInstance,
          themePluginInstance,
          zoomPluginInstance,
          install: function(pluginFunctions) {
            plugins.forEach(function(plugin) {
              if (plugin.install) {
                plugin.install(pluginFunctions);
              }
            });
          },
          renderPageLayer: function(renderProps) {
            return React__namespace.createElement(React__namespace.Fragment, null, plugins.map(function(plugin, idx) {
              return plugin.renderPageLayer ? React__namespace.createElement(React__namespace.Fragment, { key: idx }, plugin.renderPageLayer(renderProps)) : React__namespace.createElement(React__namespace.Fragment, { key: idx });
            }));
          },
          renderViewer: function(props2) {
            var slot = props2.slot;
            plugins.forEach(function(plugin) {
              if (plugin.renderViewer) {
                slot = plugin.renderViewer(__assign(__assign({}, props2), { slot }));
              }
            });
            return slot;
          },
          uninstall: function(pluginFunctions) {
            plugins.forEach(function(plugin) {
              if (plugin.uninstall) {
                plugin.uninstall(pluginFunctions);
              }
            });
          },
          onDocumentLoad: function(props2) {
            plugins.forEach(function(plugin) {
              if (plugin.onDocumentLoad) {
                plugin.onDocumentLoad(props2);
              }
            });
          },
          onAnnotationLayerRender: function(props2) {
            plugins.forEach(function(plugin) {
              if (plugin.onAnnotationLayerRender) {
                plugin.onAnnotationLayerRender(props2);
              }
            });
          },
          onTextLayerRender: function(props2) {
            plugins.forEach(function(plugin) {
              if (plugin.onTextLayerRender) {
                plugin.onTextLayerRender(props2);
              }
            });
          },
          onViewerStateChange: function(viewerState) {
            var newState = viewerState;
            plugins.forEach(function(plugin) {
              if (plugin.onViewerStateChange) {
                newState = plugin.onViewerStateChange(newState);
              }
            });
            return newState;
          },
          renderDefaultToolbar,
          Toolbar: ToolbarDecorator
        };
      };
      exports2.MoreActionsPopover = MoreActionsPopover;
      exports2.MoreIcon = MoreIcon;
      exports2.toolbarPlugin = toolbarPlugin;
    }
  });

  // node_modules/@react-pdf-viewer/toolbar/lib/index.js
  var require_lib17 = __commonJS({
    "node_modules/@react-pdf-viewer/toolbar/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_toolbar();
      }
    }
  });

  // node_modules/@react-pdf-viewer/default-layout/lib/cjs/default-layout.js
  var require_default_layout = __commonJS({
    "node_modules/@react-pdf-viewer/default-layout/lib/cjs/default-layout.js"(exports2) {
      "use strict";
      var core = require_lib();
      var React = require_react();
      var attachment = require_lib2();
      var bookmark = require_lib3();
      var thumbnail = require_lib4();
      var toolbar = require_lib17();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n.default = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
      var BookmarkIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M11.5,1.5h11c0.552,0,1,0.448,1,1v20c0,0.552-0.448,1-1,1h-21c-0.552,0-1-0.448-1-1v-20c0-0.552,0.448-1,1-1h3\n            M11.5,10.5c0,0.55-0.3,0.661-0.659,0.248L8,7.5l-2.844,3.246c-0.363,0.414-0.659,0.3-0.659-0.247v-9c0-0.552,0.448-1,1-1h5\n            c0.552,0,1,0.448,1,1L11.5,10.5z\n            M14.5,6.499h6\n            M14.5,10.499h6\n            M3.5,14.499h17\n            M3.5,18.499h16.497" })
        );
      };
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var FileIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M7.618,15.345l8.666-8.666c0.78-0.812,2.071-0.838,2.883-0.058s0.838,2.071,0.058,2.883\n            c-0.019,0.02-0.038,0.039-0.058,0.058L7.461,21.305c-1.593,1.593-4.175,1.592-5.767,0s-1.592-4.175,0-5.767c0,0,0,0,0,0\n            L13.928,3.305c2.189-2.19,5.739-2.19,7.929-0.001s2.19,5.739,0,7.929l0,0L13.192,19.9" })
        );
      };
      var ThumbnailIcon = function() {
        return React__namespace.createElement(
          core.Icon,
          { size: 16 },
          React__namespace.createElement("path", { d: "M10.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n            M23.5,9.5c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V9.5z\n            M10.5,22.5 c0,0.552-0.448,1-1,1h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z\n            M23.5,22.5c0,0.552-0.448,1-1,1 h-8c-0.552,0-1-0.448-1-1v-8c0-0.552,0.448-1,1-1h8c0.552,0,1,0.448,1,1V22.5z" })
        );
      };
      var TOOLTIP_OFFSET_LTR = { left: 8, top: 0 };
      var TOOLTIP_OFFSET_RTL = { left: -8, top: 0 };
      var Sidebar = function(_a) {
        var attachmentTabContent = _a.attachmentTabContent, bookmarkTabContent = _a.bookmarkTabContent, store = _a.store, thumbnailTabContent = _a.thumbnailTabContent, tabs = _a.tabs;
        var containerRef = React__namespace.useRef();
        var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
        var _b = React__namespace.useState(store.get("isCurrentTabOpened") || false), opened = _b[0], setOpened = _b[1];
        var _c = React__namespace.useState(Math.max(store.get("currentTab") || 0, 0)), currentTab = _c[0], setCurrentTab = _c[1];
        var direction = React__namespace.useContext(core.ThemeContext).direction;
        var isRtl = direction === core.TextDirection.RightToLeft;
        var resizeConstrain = function(size) {
          return size.firstHalfPercentage >= 20 && size.firstHalfPercentage <= 80;
        };
        var defaultTabs = [
          {
            content: thumbnailTabContent,
            icon: React__namespace.createElement(ThumbnailIcon, null),
            title: l10n && l10n.defaultLayout ? l10n.defaultLayout.thumbnail : "Thumbnail"
          },
          {
            content: bookmarkTabContent,
            icon: React__namespace.createElement(BookmarkIcon, null),
            title: l10n && l10n.defaultLayout ? l10n.defaultLayout.bookmark : "Bookmark"
          },
          {
            content: attachmentTabContent,
            icon: React__namespace.createElement(FileIcon, null),
            title: l10n && l10n.defaultLayout ? l10n.defaultLayout.attachment : "Attachment"
          }
        ];
        var listTabs = tabs ? tabs(defaultTabs) : defaultTabs;
        var toggleTab = function(index) {
          if (currentTab === index) {
            store.update("isCurrentTabOpened", !store.get("isCurrentTabOpened"));
            var container = containerRef.current;
            if (container) {
              var width = container.style.width;
              if (width) {
                container.style.removeProperty("width");
              }
            }
          } else {
            store.update("currentTab", index);
          }
        };
        var switchToTab = function(index) {
          if (index >= 0 && index <= listTabs.length - 1) {
            store.update("isCurrentTabOpened", true);
            setCurrentTab(index);
          }
        };
        var handleCurrentTabOpened = function(opened2) {
          setOpened(opened2);
        };
        React__namespace.useEffect(function() {
          store.subscribe("currentTab", switchToTab);
          store.subscribe("isCurrentTabOpened", handleCurrentTabOpened);
          return function() {
            store.unsubscribe("currentTab", switchToTab);
            store.unsubscribe("isCurrentTabOpened", handleCurrentTabOpened);
          };
        }, []);
        if (listTabs.length === 0) {
          return React__namespace.createElement(React__namespace.Fragment, null);
        }
        return React__namespace.createElement(
          React__namespace.Fragment,
          null,
          React__namespace.createElement(
            "div",
            { "data-testid": "default-layout__sidebar", className: core.classNames({
              "rpv-default-layout__sidebar": true,
              "rpv-default-layout__sidebar--opened": opened,
              "rpv-default-layout__sidebar--ltr": !isRtl,
              "rpv-default-layout__sidebar--rtl": isRtl
            }), ref: containerRef },
            React__namespace.createElement(
              "div",
              { className: "rpv-default-layout__sidebar-tabs" },
              React__namespace.createElement("div", { className: "rpv-default-layout__sidebar-headers", role: "tablist", "aria-orientation": "vertical" }, listTabs.map(function(tab, index) {
                return React__namespace.createElement(
                  "div",
                  { "aria-controls": "rpv-default-layout__sidebar-content", "aria-selected": currentTab === index, key: index, className: "rpv-default-layout__sidebar-header", id: "rpv-default-layout__sidebar-tab-".concat(index), role: "tab" },
                  React__namespace.createElement(core.Tooltip, { ariaControlsSuffix: "default-layout-sidebar-tab-".concat(index), position: isRtl ? core.Position.LeftCenter : core.Position.RightCenter, target: React__namespace.createElement(core.MinimalButton, { ariaLabel: tab.title, isSelected: currentTab === index, onClick: function() {
                    return toggleTab(index);
                  } }, tab.icon), content: function() {
                    return tab.title;
                  }, offset: isRtl ? TOOLTIP_OFFSET_RTL : TOOLTIP_OFFSET_LTR })
                );
              })),
              React__namespace.createElement("div", { "aria-labelledby": "rpv-default-layout__sidebar-tab-".concat(currentTab), id: "rpv-default-layout__sidebar-content", className: core.classNames({
                "rpv-default-layout__sidebar-content": true,
                "rpv-default-layout__sidebar-content--opened": opened,
                "rpv-default-layout__sidebar-content--ltr": !isRtl,
                "rpv-default-layout__sidebar-content--rtl": isRtl
              }), role: "tabpanel", tabIndex: -1 }, listTabs[currentTab].content)
            )
          ),
          opened && React__namespace.createElement(core.Splitter, { constrain: resizeConstrain })
        );
      };
      var defaultLayoutPlugin2 = function(props) {
        var store = React__namespace.useMemo(function() {
          return core.createStore({
            isCurrentTabOpened: false,
            currentTab: 0
          });
        }, []);
        var attachmentPluginInstance = attachment.attachmentPlugin();
        var bookmarkPluginInstance = bookmark.bookmarkPlugin();
        var thumbnailPluginInstance = thumbnail.thumbnailPlugin(props ? props.thumbnailPlugin : {});
        var toolbarPluginInstance = toolbar.toolbarPlugin(props ? props.toolbarPlugin : {});
        var Attachments = attachmentPluginInstance.Attachments;
        var Bookmarks = bookmarkPluginInstance.Bookmarks;
        var Thumbnails = thumbnailPluginInstance.Thumbnails;
        var Toolbar = toolbarPluginInstance.Toolbar;
        var sidebarTabs = props ? props.sidebarTabs : function(defaultTabs) {
          return defaultTabs;
        };
        var plugins = [attachmentPluginInstance, bookmarkPluginInstance, thumbnailPluginInstance, toolbarPluginInstance];
        return {
          attachmentPluginInstance,
          bookmarkPluginInstance,
          thumbnailPluginInstance,
          toolbarPluginInstance,
          activateTab: function(index) {
            store.update("currentTab", index);
          },
          toggleTab: function(index) {
            var currentTab = store.get("currentTab");
            store.update("isCurrentTabOpened", !store.get("isCurrentTabOpened"));
            if (currentTab !== index) {
              store.update("currentTab", index);
            }
          },
          install: function(pluginFunctions) {
            plugins.forEach(function(plugin) {
              if (plugin.install) {
                plugin.install(pluginFunctions);
              }
            });
          },
          renderPageLayer: function(renderProps) {
            return React__namespace.createElement(React__namespace.Fragment, null, plugins.map(function(plugin, idx) {
              return plugin.renderPageLayer ? React__namespace.createElement(React__namespace.Fragment, { key: idx }, plugin.renderPageLayer(renderProps)) : React__namespace.createElement(
                React__namespace.Fragment,
                { key: idx },
                React__namespace.createElement(React__namespace.Fragment, null)
              );
            }));
          },
          renderViewer: function(renderProps) {
            var slot = renderProps.slot;
            plugins.forEach(function(plugin) {
              if (plugin.renderViewer) {
                slot = plugin.renderViewer(__assign(__assign({}, renderProps), { slot }));
              }
            });
            var mergeSubSlot = slot.subSlot && slot.subSlot.attrs ? {
              className: slot.subSlot.attrs.className,
              "data-testid": slot.subSlot.attrs["data-testid"],
              ref: slot.subSlot.attrs.ref,
              style: slot.subSlot.attrs.style
            } : {};
            slot.children = React__namespace.createElement(
              "div",
              { className: "rpv-default-layout__container" },
              React__namespace.createElement(
                "div",
                { "data-testid": "default-layout__main", className: core.classNames({
                  "rpv-default-layout__main": true,
                  "rpv-default-layout__main--rtl": renderProps.themeContext.direction === core.TextDirection.RightToLeft
                }) },
                React__namespace.createElement(Sidebar, { attachmentTabContent: React__namespace.createElement(Attachments, null), bookmarkTabContent: React__namespace.createElement(Bookmarks, null), store, thumbnailTabContent: React__namespace.createElement(Thumbnails, null), tabs: sidebarTabs }),
                React__namespace.createElement(
                  "div",
                  { className: "rpv-default-layout__body", "data-testid": "default-layout__body" },
                  React__namespace.createElement("div", { className: "rpv-default-layout__toolbar" }, props && props.renderToolbar ? props.renderToolbar(Toolbar) : React__namespace.createElement(Toolbar, null)),
                  React__namespace.createElement("div", __assign({}, mergeSubSlot), slot.subSlot.children)
                )
              ),
              slot.children
            );
            slot.subSlot.attrs = {};
            slot.subSlot.children = React__namespace.createElement(React__namespace.Fragment, null);
            return slot;
          },
          uninstall: function(pluginFunctions) {
            plugins.forEach(function(plugin) {
              if (plugin.uninstall) {
                plugin.uninstall(pluginFunctions);
              }
            });
          },
          onDocumentLoad: function(documentLoadProps) {
            plugins.forEach(function(plugin) {
              if (plugin.onDocumentLoad) {
                plugin.onDocumentLoad(documentLoadProps);
              }
            });
            if (props && props.setInitialTab) {
              props.setInitialTab(documentLoadProps.doc).then(function(initialTab) {
                store.update("currentTab", initialTab);
                store.update("isCurrentTabOpened", true);
              });
            }
          },
          onAnnotationLayerRender: function(props2) {
            plugins.forEach(function(plugin) {
              if (plugin.onAnnotationLayerRender) {
                plugin.onAnnotationLayerRender(props2);
              }
            });
          },
          onTextLayerRender: function(props2) {
            plugins.forEach(function(plugin) {
              if (plugin.onTextLayerRender) {
                plugin.onTextLayerRender(props2);
              }
            });
          },
          onViewerStateChange: function(viewerState) {
            var newState = viewerState;
            plugins.forEach(function(plugin) {
              if (plugin.onViewerStateChange) {
                newState = plugin.onViewerStateChange(newState);
              }
            });
            return newState;
          }
        };
      };
      var setInitialTabFromPageMode = function(doc) {
        return new Promise(function(resolve, _) {
          doc.getPageMode().then(function(pageMode) {
            if (!pageMode) {
              resolve(-1);
            } else {
              switch (pageMode) {
                case core.PageMode.Attachments:
                  resolve(2);
                  break;
                case core.PageMode.Bookmarks:
                  resolve(1);
                  break;
                case core.PageMode.Thumbnails:
                  resolve(0);
                  break;
                default:
                  resolve(-1);
                  break;
              }
            }
          });
        });
      };
      exports2.BookmarkIcon = BookmarkIcon;
      exports2.FileIcon = FileIcon;
      exports2.ThumbnailIcon = ThumbnailIcon;
      exports2.defaultLayoutPlugin = defaultLayoutPlugin2;
      exports2.setInitialTabFromPageMode = setInitialTabFromPageMode;
    }
  });

  // node_modules/@react-pdf-viewer/default-layout/lib/index.js
  var require_lib18 = __commonJS({
    "node_modules/@react-pdf-viewer/default-layout/lib/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_default_layout();
      }
    }
  });

  // app/all.tsx
  var import_react_dom = __toESM(require_react_dom(), 1);

  // app/routes/hello2.tsx
  var import_react = __toESM(require_react(), 1);
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  function HelloWorld2() {
    const [data, setData] = (0, import_react.useState)(null);
    (0, import_react.useEffect)(() => {
      fetch("https://jsonplaceholder.typicode.com/posts/2").then((response) => response.json()).then((data2) => setData(data2));
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", { children: "Hello World 2 Component" }),
      data ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", { children: data.title }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { children: data.body })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { children: "Loading..." })
    ] });
  }

  // app/routes/hello1.tsx
  var import_react2 = __toESM(require_react(), 1);
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  function HelloWorld1() {
    const [data, setData] = (0, import_react2.useState)(null);
    (0, import_react2.useEffect)(() => {
      fetch("https://jsonplaceholder.typicode.com/posts/1").then((response) => response.json()).then((data2) => setData(data2));
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("h1", { children: "Hello World 1 Component" }),
      data ? /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("h2", { children: data.title }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("p", { children: data.body })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("p", { children: "Loading..." })
    ] });
  }

  // app/routes/pdfViewer.tsx
  var import_react3 = __toESM(require_react(), 1);
  var import_core = __toESM(require_lib(), 1);
  var import_default_layout = __toESM(require_lib18(), 1);
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var PdfViewer = () => {
    const [file, setFile] = (0, import_react3.useState)(null);
    const [fileUrl, setFileUrl] = (0, import_react3.useState)(null);
    const [pdfBlob, setPdfBlob] = (0, import_react3.useState)(null);
    const [pdfBlobUrl, setPdfBlobUrl] = (0, import_react3.useState)("");
    const defaultLayoutPluginInstance = (0, import_default_layout.defaultLayoutPlugin)();
    (0, import_react3.useEffect)(() => {
      const fetchData = async () => {
        if (file) {
          const url = URL.createObjectURL(file);
          setPdfBlobUrl(url);
        } else if (fileUrl) {
          const response = await fetch(fileUrl);
          const blob = await response.blob();
          const url = URL.createObjectURL(blob);
          setPdfBlob(blob);
          setPdfBlobUrl(url);
        } else {
          console.log("Error while loading pdf");
        }
      };
      fetchData();
    }, [file, fileUrl]);
    const handleChange = (e) => {
      if (e.target.files) {
        setFile(e.target.files[0]);
      } else {
        setFileUrl(e.target.value);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative p-5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex gap-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "input",
          {
            id: "pdfFile",
            type: "file",
            accept: "application/pdf",
            onChange: handleChange,
            className: "inline-flex justify-center items-center p-1 text-md font-bold shadow-2xl rounded-lg text-center w-64 h-10 text-gray-500 "
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "input",
          {
            id: "pdfFileUrl",
            type: "text",
            placeholder: "Enter file url",
            onChange: handleChange,
            className: "inline-flex justify-center items-center p-1 text-lg font-bold shadow-2xl rounded-lg text-center w-full h-10 text-gray-500  "
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "w-full h-[calc(100vh-90px)] mt-5", children: pdfBlobUrl && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_core.Worker, { workerUrl: "https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.js ", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        import_core.Viewer,
        {
          fileUrl: pdfBlobUrl,
          plugins: [defaultLayoutPluginInstance]
        }
      ) }) })
    ] });
  };
  var pdfViewer_default = PdfViewer;

  // app/all.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  import_react_dom.default.render(/* @__PURE__ */ (0, import_jsx_runtime4.jsx)(HelloWorld1, {}), document.getElementById("root1"));
  import_react_dom.default.render(/* @__PURE__ */ (0, import_jsx_runtime4.jsx)(HelloWorld2, {}), document.getElementById("root2"));
  import_react_dom.default.render(/* @__PURE__ */ (0, import_jsx_runtime4.jsx)(pdfViewer_default, {}), document.getElementById("root3"));
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@react-pdf-viewer/core/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/attachment/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/bookmark/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/thumbnail/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/selection-mode/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/full-screen/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/get-file/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/open/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/page-navigation/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/print/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/properties/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/rotate/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/scroll-mode/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/search/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/theme/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/zoom/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/toolbar/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)

@react-pdf-viewer/default-layout/lib/index.js:
  (**
   * A React component to view a PDF document
   *
   * @see https://react-pdf-viewer.dev
   * @license https://react-pdf-viewer.dev/license
   * @copyright 2019-2023 Nguyen Huu Phuoc <me@phuoc.ng>
   *)
*/
